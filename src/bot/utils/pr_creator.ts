import { Octokit } from 'octokit';
import { config } from '../config.js';
import { getCurrentBranch, pushBranch, commitChanges } from '../../rmpr/git_utils.js';
import { log, error, debugLog } from '../../logging.js';

export interface PRCreationOptions {
  /** The bot's implementation task ID */
  taskId: string;
  /** The workspace path where changes were made */
  workspacePath: string;
  /** The GitHub issue number */
  issueNumber: number;
  /** The repository full name (e.g., "owner/repo") */
  repositoryFullName: string;
  /** The issue title */
  issueTitle: string;
  /** Optional content of the original plan */
  planMarkdownContent?: string;
  /** Optional link to Discord discussion thread */
  discordThreadUrl?: string;
}

export interface PRCreationResult {
  /** The created PR number */
  prNumber?: number;
  /** The PR URL */
  prUrl?: string;
  /** Error message if PR creation failed */
  error?: string;
}

/**
 * Creates a pull request from the changes in the workspace.
 * @param options The PR creation options
 * @returns The PR creation result
 */
export async function createPullRequest(
  options: PRCreationOptions
): Promise<PRCreationResult> {
  try {
    // 1. Initialize Octokit
    const octokit = new Octokit({ auth: config.GITHUB_TOKEN });

    // 2. Get the current branch name
    const branchName = await getCurrentBranch(options.workspacePath);
    if (!branchName) {
      return { error: 'Could not determine current branch name in workspace' };
    }
    debugLog(`Current branch in workspace: ${branchName}`);

    // 3. Commit any remaining changes (optional)
    log('Checking for uncommitted changes...');
    const commitResult = await commitChanges(
      options.workspacePath,
      `Finalizing changes from AI implementation for task ${options.taskId}`
    );
    if (!commitResult.success && commitResult.error) {
      // If there's an actual error (not just "no changes"), log it but continue
      debugLog(`Commit attempt: ${commitResult.error}`);
    }

    // 4. Push the branch
    log(`Pushing branch ${branchName} to remote...`);
    const pushResult = await pushBranch(branchName, options.workspacePath);
    if (!pushResult.success) {
      return { error: `Failed to push branch: ${pushResult.error}` };
    }

    // 5. Parse owner and repo from repositoryFullName
    const [owner, repo] = options.repositoryFullName.split('/');
    if (!owner || !repo) {
      return { error: `Invalid repository full name: ${options.repositoryFullName}` };
    }

    // 6. Get the default branch of the repository
    let baseBranch = 'main';
    try {
      const repoInfo = await octokit.rest.repos.get({ owner, repo });
      baseBranch = repoInfo.data.default_branch;
      debugLog(`Repository default branch: ${baseBranch}`);
    } catch (err) {
      error(`Failed to fetch repository info, using 'main' as base branch: ${err}`);
    }

    // 7. Construct PR title and body
    const prTitle = `[BOT] ${options.issueTitle}`;
    let prBody = `## Summary\n\n`;
    prBody += `This PR was automatically generated by the LLMUtils bot to implement issue #${options.issueNumber}.\n\n`;
    prBody += `Resolves #${options.issueNumber}\n\n`;

    if (options.planMarkdownContent) {
      prBody += `## Implementation Plan\n\n`;
      prBody += `<details>\n<summary>Click to expand</summary>\n\n`;
      prBody += `\`\`\`markdown\n${options.planMarkdownContent}\n\`\`\`\n`;
      prBody += `</details>\n\n`;
    }

    if (options.discordThreadUrl) {
      prBody += `## Discussion\n\n`;
      prBody += `For more context and discussion, see the [Discord thread](${options.discordThreadUrl}).\n\n`;
    }

    prBody += `---\n`;
    prBody += `*Generated by [LLMUtils Bot](https://github.com/dimfeld/llmutils) for task ${options.taskId}*`;

    // 8. Create the pull request
    log(`Creating pull request from ${branchName} to ${baseBranch}...`);
    const pr = await octokit.rest.pulls.create({
      owner,
      repo,
      title: prTitle,
      head: branchName,
      base: baseBranch,
      body: prBody,
    });

    log(`Successfully created PR #${pr.data.number}: ${pr.data.html_url}`);
    return {
      prNumber: pr.data.number,
      prUrl: pr.data.html_url,
    };
  } catch (err) {
    const errorMessage = err instanceof Error ? err.message : String(err);
    error(`Failed to create pull request: ${errorMessage}`);
    return { error: errorMessage };
  }
}

/**
 * Creates a pull request for a bot implementation task.
 * This is a convenience wrapper around createPullRequest.
 */
export class PRCreator {
  /**
   * Creates a new pull request.
   * @param options The PR creation options
   * @returns The PR creation result
   */
  async createPullRequest(options: PRCreationOptions): Promise<PRCreationResult> {
    return createPullRequest(options);
  }
}
