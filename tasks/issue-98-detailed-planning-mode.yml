---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Implement the "Detailed Planning Mode" feature for `dimfeld/llmutils`,
  enabling phase-based project planning. This involves generating a high-level
  markdown plan with phases, parsing it into phase-specific YAML files,
  generating detailed prompts for each phase, and updating the CLI to support
  these new workflows.
id: 1
uuid: 73cb497c-4ee0-4664-b071-ea32cf03d894
status: done
priority: high
issue:
  - https://api.github.com/repos/dimfeld/llmutils/issues/98
planGeneratedAt: 2025-05-29T02:13:21.502Z
promptsGeneratedAt: 2025-05-29T02:13:21.502Z
createdAt: 2025-05-29T02:13:21.502Z
updatedAt: 2025-05-29T03:48:40.485Z
tasks:
  - title: 1. Define Phase Schema and ID Utilities
    done: true
    description: Update the existing `planSchema.ts` to define the `phaseSchema` as
      specified in the project plan. Create utility functions for generating
      project and phase IDs.
  - title: 2. Modify Planning Prompt for Phase-Based Markdown Generation
    done: true
    description: Update the existing planning prompt in `src/rmplan/prompt.ts` to
      instruct the LLM to generate high-level, phase-based plans in Markdown.
      This Markdown will serve as the input for the `rmplan parse` command.
  - title: 3. Implement Markdown Parser Logic
    done: true
    description: Create a new module `src/rmplan/markdown_parser.ts` to parse the
      phase-based markdown generated in the previous task. This parser will
      extract the overall project goal and details, as well as information for
      each phase (title, numeric index, goal, dependencies, details, and tasks).
  - title: 4. Implement `rmplan parse` Command
    done: true
    description: Create the `rmplan parse --input <markdown_file> --output-dir
      <dir>` command. This command will use the markdown parser from Task 3,
      generate project and phase IDs, resolve dependencies, and create
      individual YAML files for each phase.
  - title: 5. Per-Phase Prompt Template and Context Aggregation Logic
    done: true
    description: Create the LLM prompt template for generating detailed steps within
      a phase. Implement the logic to aggregate all necessary context for this
      prompt, including overall project goals, details of the current phase,
      information from completed dependent phases, and relevant codebase files.
  - title: 6. Implement `rmplan generate-phase` Command
    done: true
    description: Create the `rmplan generate-phase --phase <phase_yaml_file>`
      command. This command loads a phase YAML, checks its dependencies, gathers
      context (including codebase files via `rmfilter`), invokes an LLM to
      generate detailed steps for tasks, and updates the phase YAML with these
      details.
  - title: 7. Single-Phase Project Support and Error Handling Refinements
    done: true
    description: Ensure that single-phase projects (where the markdown plan has no
      explicit `### Phase X` headers) are correctly handled by `rmplan parse`
      and `rmplan generate-phase`. Implement robust error handling across all
      new commands, saving partial or erroneous outputs to disk for manual
      correction as specified in the project plan.
  - title: 8. Documentation Update
    done: true
    description: Update the `README.md` file to include documentation for the new
      "Detailed Planning Mode" feature, including the new CLI commands,
      workflow, and file structures.
  - title: 9. Refine Project ID Generation for `rmplan parse`
    done: true
    description: Refine the project ID generation logic within the `rmplan parse`
      command. If a GitHub issue is provided, the project ID should be
      `issue-ISSUENUMBER-SLUGIFIEDTITLE`. Otherwise, if no explicit project ID
      is given, use Gemini Flash (or a similar fast model) to generate a concise
      title from the overall project goal/details, then slugify this title and
      append a unique ID component.
changedFiles:
  - README.md
  - package.json
  - src/rmplan/actions.ts
  - src/rmplan/cleanup.test.ts
  - src/rmplan/cleanup.ts
  - src/rmplan/generate-phase.test.ts
  - src/rmplan/id_utils.test.ts
  - src/rmplan/id_utils.ts
  - src/rmplan/integration.test.ts
  - src/rmplan/markdown_parser.test.ts
  - src/rmplan/markdown_parser.ts
  - src/rmplan/parse-id-generation.test.ts
  - src/rmplan/parse.test.ts
  - src/rmplan/planSchema.ts
  - src/rmplan/prompt.test.ts
  - src/rmplan/prompt.ts
  - src/rmplan/rmplan.ts
  - tasks/issue-98-detailed-planning-mode.md
  - tasks/issue-98-detailed-planning-mode.yml
  - test-id-generation.ts
  - test-id-utils.ts
rmfilter:
  - src/rmplan
  - --with-imports
---

The project aims to enhance `rmplan` with a structured, multi-phase planning capability. This will allow breaking down large software features into incremental, functional deliverables. Each phase will deliver a working component, building upon previous validated phases. The system must maintain compatibility with existing single-phase workflows.

Key deliverables:
1.  **Modified Planning Prompt:** Update the existing planning prompt to generate markdown plans with distinct phases, goals, dependencies, and tasks (without implementation details).
2.  **Markdown Parser:** A new component to parse the generated markdown plan into structured data representing phases and their contents.
3.  **Phase-Specific YAML Generation:** Logic to convert the parsed markdown into individual YAML files for each phase, adhering to an updated `phaseSchema`. This includes generating unique project and phase IDs and resolving dependencies.
4.  **Per-Phase Prompt Generation:** A new prompt and logic to generate detailed implementation steps (prompts, file lists, etc.) for each task within a phase, using context from the overall plan and completed dependent phases.
5.  **CLI Commands:**
    *   `rmplan generate`: (Modified) To output the phase-based markdown plan.
    *   `rmplan parse`: (New) To parse the markdown plan into phase YAML files.
    *   `rmplan generate-phase`: (New) To populate a phase's YAML file with detailed implementation steps.
6.  **Error Handling:** Mechanisms to save incomplete or erroneous outputs for manual correction.
7.  **Documentation:** Updated README explaining the new feature and CLI commands.

The implementation will follow the specifications outlined in the provided project plan document.
