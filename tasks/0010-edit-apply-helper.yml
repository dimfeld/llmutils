goal: Improve the error handling for edit application failures in applyLlmEdits
  by implementing an interactive resolution mode using @inquirer/prompts. This
  mode will handle "no exact match" errors by finding the closest match and
  offering to apply it or open in Neovim diff mode, and "not unique" errors by
  allowing the user to select the correct location.
details: >
  The current implementation simply prints errors and exits when `diff-editor`
  or `udiff-simple` fail to apply edits. This project aims to:

  1.  Define a common structure (`EditResult`) to report success or specific
  failure types (`NoMatchFailure`, `NotUniqueFailure`) from edit processors.

  2.  Implement a `findClosestMatches` algorithm to assist in resolving "no
  exact match" errors.

  3.  Modify `diff-editor` and `udiff-simple` parsers to return `EditResult[]`
  instead of throwing errors, incorporating closest match or all match locations
  into the failure results.

  4.  Add an `--interactive` flag to `apply-llm-edits`.

  5.  Implement the interactive resolution logic in `applyLlmEdits` (or a
  dedicated module) that uses `@inquirer/prompts` to guide the user through
  resolving failures based on the `EditResult` type.

  6.  Integrate Neovim diff mode (`nvim -d`) as a resolution option for "no
  exact match" errors.
tasks:
  - title: 1. Define Common Result Structure & Closest Match Foundation
    description: Create the necessary TypeScript types for representing edit results
      (success/failure) and implement/test the core findClosestMatches
      algorithm.
    files:
      - src/editor/types.ts
      - src/editor/closest_match.ts
      - src/editor/closest_match.test.ts
    steps:
      - prompt: >
          Modify `src/editor/types.ts` to define a structured way to represent
          the outcome of applying an edit.


          1.  Define a type `MatchLocation` which should contain at least the
          starting line number (`startLine`) and potentially the character index
          (`startIndex`) of a match within a file. Include a few lines of
          context (`contextLines: string[]`) around the match.
              ```typescript
              export interface MatchLocation {
                startLine: number; // 1-based line number
                startIndex: number; // 0-based character index in the full content string
                contextLines: string[]; // e.g., +/- 2 lines around the match start
              }
              ```
          2.  Define a type `ClosestMatchResult` containing the lines that were
          found as the closest match (`lines: string[]`), the start and end line
          numbers (`startLine`, `endLine`) in the original file where this match
          was found, and a similarity score (`score: number`).
              ```typescript
              export interface ClosestMatchResult {
                lines: string[];
                startLine: number; // 1-based start line number
                endLine: number; // 1-based end line number
                score: number; // Similarity score (e.g., 0 to 1)
                // Add startIndex if feasible later, might be complex with fuzzy matching
              }
              ```
          3.  Define distinct result interfaces:
              *   `SuccessResult`: Indicates successful application. Should include `filePath: string`, `originalText: string`, `updatedText: string`.
              *   `NoMatchFailure`: Indicates the `originalText` was not found. Should include `filePath: string`, `originalText: string`, `updatedText: string`, and `closestMatch: ClosestMatchResult | null`.
              *   `NotUniqueFailure`: Indicates the `originalText` was found multiple times. Should include `filePath: string`, `originalText: string`, `updatedText: string`, and `matchLocations: MatchLocation[]`.
          4.  Define a discriminated union type `EditResult` covering all three
          result types (e.g., add a `type: 'success' | 'noMatch' | 'notUnique'`
          field to each interface).
              ```typescript
              // Example structure - adjust as needed
              interface BaseEditResult {
                filePath: string;
                originalText: string; // The text that was searched for
                updatedText: string;  // The text that was intended to replace originalText
              }

              export interface SuccessResult extends BaseEditResult {
                type: 'success';
              }

              export interface NoMatchFailure extends BaseEditResult {
                type: 'noMatch';
                closestMatch: ClosestMatchResult | null;
              }

              export interface NotUniqueFailure extends BaseEditResult {
                type: 'notUnique';
                matchLocations: MatchLocation[]; // Information about each match found
              }

              export type EditResult = SuccessResult | NoMatchFailure | NotUniqueFailure;
              ```
          5. Ensure the existing `ProcessFileOptions` interface remains in this
          file.
        done: true
      - prompt: >
          Create a new file `src/editor/closest_match.ts`. Implement the
          `findClosestMatches` function as described in the project plan's
          "Finding the Closest Match" section.


          1.  Import necessary types (`ClosestMatchResult`,
          `ClosestMatchConfig`) from `src/editor/types.ts` (you'll need to
          define `ClosestMatchConfig` there too, or define it locally here
          first).
              ```typescript
              // Define within closest_match.ts or move to types.ts
              export interface ClosestMatchConfig {
                similarityThreshold?: number; // 0 to 1, higher means stricter matching (default: 0.6)
                maxMatches?: number; // Max number of close matches to return (default: 1)
                // maxLineGap might be too complex for initial implementation, focus on similarity of contiguous blocks first.
                // Consider using diff-match-patch or similar libraries if simple string-comparison is insufficient.
                // For now, let's simplify: find best matching *contiguous* block using string similarity.
              }
              ```
          2.  Implement `findClosestMatches`. It should take `fileContent:
          string`, `searchLines: string[]`, and optionally `config:
          ClosestMatchConfig`.

          3.  The goal is to find the slice (contiguous block of lines) within
          `fileContent` that is most similar to `searchLines.join('\n')`, above
          a certain `similarityThreshold`.

          4.  Use the `string-comparison` library (specifically
          `diceCoefficient` or similar appropriate algorithm) to compare the
          `searchLines` block against all possible blocks of the same line count
          within `fileContent`.

          5.  Keep track of the match(es) with the highest similarity score
          above the threshold.

          6.  Return an array of `ClosestMatchResult`, sorted by score (highest
          first), respecting `maxMatches`.

          7.  Ensure line numbers in the result are 1-based.

          8.  Include helper functions like `calculateMatchScore` if needed, or
          integrate scoring directly.

          9.  Handle edge cases like empty files or search lines.

          10. Use `splitLinesWithEndings` helper function (copy from
          `src/editor/udiff-simple/parse.ts` or create a common utility) for
          consistent line splitting.


          Example function signature:

          ```typescript

          import stringComparison from 'string-comparison';

          import type { ClosestMatchConfig, ClosestMatchResult } from './types';
          // Adjust path if needed

          // import { splitLinesWithEndings } from '../common/text_utils'; //
          Create this if needed


          // Placeholder for line splitting function - ensure it exists

          function splitLinesWithEndings(content: string): string[] {
            if (!content) return [];
            // Simple split, adjust if needed for CRLF etc.
            let lines = content.split('\n');
            // Handle trailing newline case
            if (lines.length > 0 && lines[lines.length - 1] === '') {
                lines.pop();
            }
            return lines.map((line, index) => line + (index === lines.length - 1 ? '' : '\n'));
          }


          export function findClosestMatches(
            fileContent: string,
            searchLines: string[],
            config: ClosestMatchConfig = {}
          ): ClosestMatchResult[] {
            const { similarityThreshold = 0.6, maxMatches = 1 } = config;
            const searchStr = searchLines.join(''); // Join with preserved endings
            const fileLines = splitLinesWithEndings(fileContent);

            if (searchLines.length === 0 || fileLines.length === 0 || searchLines.length > fileLines.length) {
              return [];
            }

            const results: ClosestMatchResult[] = [];
            const searchLineCount = searchLines.length;

            for (let i = 0; i <= fileLines.length - searchLineCount; i++) {
              const chunkLines = fileLines.slice(i, i + searchLineCount);
              const chunkStr = chunkLines.join('');
              const similarity = stringComparison.diceCoefficient.similarity(searchStr, chunkStr);

              if (similarity >= similarityThreshold) {
                results.push({
                  lines: chunkLines.map(l => l.replace(/\n$/, '')), // Return lines without trailing newlines for easier diffing later? Check usage. Or keep them? Let's keep them for now.
                  // lines: chunkLines,
                  startLine: i + 1, // 1-based line number
                  endLine: i + searchLineCount, // 1-based line number
                  score: similarity,
                });
              }
            }

            // Sort by score descending and take top N matches
            return results.sort((a, b) => b.score - a.score).slice(0, maxMatches);
          }

          ```
        done: true
      - prompt: >
          Create a new test file `src/editor/closest_match.test.ts`. Write unit
          tests for the `findClosestMatches` function implemented in the
          previous step.


          1.  Import `test`, `expect` from `bun:test`.

          2.  Import `findClosestMatches` from `../editor/closest_match.ts`.

          3.  Create test cases covering:
              *   An exact match.
              *   A close match above the threshold.
              *   A match below the threshold (should return empty array).
              *   Multiple matches, ensuring the best one is returned (or top N if `maxMatches` > 1).
              *   No matches in the file.
              *   Edge cases: empty file content, empty search lines.
              *   Matches with minor differences (e.g., whitespace, small typos).
              *   Correct line numbers (1-based) in the results.

          Example Test Structure:

          ```typescript

          import { test, expect, describe } from 'bun:test';

          import { findClosestMatches } from '../editor/closest_match';


          describe('findClosestMatches', () => {
            const fileContent = `Line 1
          Line 2

          Line 3 with change

          Line 4

          Line 5

          Line 6 Exact Match

          Line 7 Exact Match

          Line 8 Exact Match

          Line 9

          Line 10 Another Close Match

          Line 11 Another Close Match

          Line 12`;

            test('should find an exact match', () => {
              const searchLines = ['Line 6 Exact Match\n', 'Line 7 Exact Match\n', 'Line 8 Exact Match\n'];
              const result = findClosestMatches(fileContent, searchLines);
              expect(result.length).toBe(1);
              expect(result[0].score).toBe(1);
              expect(result[0].startLine).toBe(6);
              expect(result[0].endLine).toBe(8);
              expect(result[0].lines).toEqual(searchLines); // Assuming lines include newlines
            });

            test('should find a close match', () => {
                const searchLines = ['Line 10 Anoter Close Match\n', 'Line 11 Another Close Match\n']; // Typo in search
                const result = findClosestMatches(fileContent, searchLines, { similarityThreshold: 0.7 });
                expect(result.length).toBe(1);
                expect(result[0].score).toBeGreaterThan(0.7);
                expect(result[0].startLine).toBe(10);
                expect(result[0].endLine).toBe(11);
                expect(result[0].lines).toEqual(['Line 10 Another Close Match\n', 'Line 11 Another Close Match\n']);
            });

            test('should return empty if below threshold', () => {
                const searchLines = ['Completely different line\n'];
                const result = findClosestMatches(fileContent, searchLines, { similarityThreshold: 0.9 });
                expect(result.length).toBe(0);
            });

            // Add more tests for edge cases, multiple matches, etc.
          });

          ```

          Make sure the `splitLinesWithEndings` function used by
          `findClosestMatches` handles newlines correctly for the tests to pass.
          You may need to copy/import it.
        done: true
  - title: 2. Modify diff-editor for Structured Results
    description: Update src/editor/diff-editor/parse.ts to return EditResult[]
      instead of throwing errors, integrating findClosestMatches for failures.
    files:
      - src/editor/diff-editor/parse.ts
      - src/editor/closest_match.ts
      - src/editor/types.ts
    steps:
      - prompt: >
          Refactor the `applyEdits` function in
          `src/editor/diff-editor/parse.ts` to return structured results instead
          of throwing an error string.


          1.  Import the `EditResult` union type, specific result types
          (`SuccessResult`, `NoMatchFailure`), and `ClosestMatchResult` from
          `src/editor/types.ts`.

          2.  Import the `findClosestMatches` function from
          `src/editor/closest_match.ts`.

          3.  Change the return type of `applyEdits` from `Promise<Edit[] |
          void>` to `Promise<EditResult[]>`.

          4.  Initialize an empty array `results: EditResult[] = []` at the
          beginning of the function.

          5.  In the loop over `edits`:
              *   If `doReplace` is successful and the file is written (or would be written in dry run), create a `SuccessResult` object containing `filePath`, `original` (as `originalText`), `updated` (as `updatedText`), and `type: 'success'`. Push it to the `results` array. Remove the `passed.push(edit)` line.
              *   If `doReplace` returns `null` (indicating the `original` text wasn't found), handle the failure:
                  *   Read the original file content (`fileContent`). If reading failed or file didn't exist (and `original` was not empty), perhaps log an error and create a specific failure type, or stick to `NoMatchFailure` for simplicity for now. Assume `fileContent` is available if `doReplace` was attempted on an existing file.
                  *   Call `findClosestMatches(fileContent!, original, { maxMatches: 1 })`.
                  *   Create a `NoMatchFailure` object containing `filePath`, `original` (as `originalText`), `updated` (as `updatedText`), `type: 'noMatch'`, and `closestMatch` (set to the result of `findClosestMatches` if found, otherwise `null`). Push it to the `results` array.
                  *   Remove the `failed.push(edit)` line.
          6.  Remove the check `if (!failed.length)` and the subsequent `throw
          new Error(formatErrorMessage(rootDir, failed, passed))` call.

          7.  Remove the `formatErrorMessage` function entirely, along with the
          `findSimilarLines` helper function within it, as `findClosestMatches`
          now provides this functionality.

          8.  Return the `results` array at the end of the `applyEdits`
          function.

          9.  Make sure `original` and `updated` text used in results preserve
          newline characters consistently (use the `prep` helper or similar if
          needed).
        done: true
  - title: 3. Modify udiff-simple for Structured Results
    description: Update src/editor/udiff-simple/parse.ts to return EditResult[],
      handling both "no match" and "not unique" failures and incorporating
      findClosestMatches and match location details.
    files:
      - src/editor/udiff-simple/parse.ts
      - src/editor/closest_match.ts
      - src/editor/types.ts
    steps:
      - prompt: >
          Refactor the `applyEdits` function in
          `src/editor/udiff-simple/parse.ts` to return structured results
          (`EditResult[]`) instead of throwing `UnifiedDiffError`.


          1.  Import necessary types from `src/editor/types.ts`: `EditResult`,
          `SuccessResult`, `NoMatchFailure`, `NotUniqueFailure`,
          `MatchLocation`, `ClosestMatchResult`.

          2.  Import `findClosestMatches` from `src/editor/closest_match.ts`.

          3.  Import `splitLinesWithEndings` helper (or ensure it's defined
          locally/imported correctly).

          4.  Change the return type of `applyEdits` from `Promise<void>` to
          `Promise<EditResult[]>`.

          5.  Initialize an empty array `results: EditResult[] = []` at the
          beginning of the function.

          6.  Modify the loop iterating through `uniqueEdits`:
              *   Remove the `errors: string[]` array and the related error message formatting (`noMatchErrorTemplate`, `notUniqueErrorTemplate`).
              *   Inside the `try...catch` block for `doReplace`:
                  *   If `doReplace` returns a `newContent` string (success):
                      *   Use `hunkToBeforeAfter(hunk)` to get the `originalText` and `updatedText`.
                      *   Create a `SuccessResult` with `filePath`, `originalText`, `updatedText`, `type: 'success'`.
                      *   Push it to the `results` array.
                      *   Increment `hunksAppliedCount` (keep this counter for logging).
                  *   If `doReplace` returns `null` (failure: no match):
                      *   Use `hunkToBeforeAfter(hunk)` to get `originalText` and `updatedText`.
                      *   Call `findClosestMatches(currentContent!, originalText.split('\\n'), { maxMatches: 1 })`. Make sure to handle `currentContent` being null (file not found). If null, create `NoMatchFailure` with `closestMatch: null`. Split `originalText` into lines appropriately for `findClosestMatches`.
                      *   Create a `NoMatchFailure` with `filePath`, `originalText`, `updatedText`, `type: 'noMatch'`, and the `closestMatch` result.
                      *   Push it to the `results` array.
              *   Modify the `catch (e)` block:
                  *   If `e instanceof SearchTextNotUnique`:
                      *   Use `hunkToBeforeAfter(hunk)` to get `originalText` and `updatedText`.
                      *   **(New Logic needed):** Call a modified version of `searchAndReplace` (or a new function `findAllMatches`) that returns *all* match locations (start index, line number, context lines) instead of throwing `SearchTextNotUnique`. Implement `findAllMatches(whole: string, part: string): MatchLocation[]`. This function should use `indexOf` repeatedly or regex with `matchAll` to find all occurrences and calculate line numbers and context.
                      *   Call `findAllMatches(currentContent!, originalText)` to get the `matchLocations`. Handle `currentContent` being null.
                      *   Create a `NotUniqueFailure` with `filePath`, `originalText`, `updatedText`, `type: 'notUnique'`, and the collected `matchLocations`.
                      *   Push it to the `results` array.
                  *   For other unexpected errors, log the error as before, but push a generic error result or rethrow for now? Let's try to capture it as a specific error type if possible, otherwise log and potentially create a generic failure result for that hunk. For now, just log the unexpected error and continue.
          7.  Remove the final error throwing logic based on the `errors` array
          at the end of `applyEdits`.

          8.  Return the `results` array.

          9.  Remove the unused `UnifiedDiffError` class and the error
          templates.
        done: true
      - prompt: >
          Implement the `findAllMatches` function within
          `src/editor/udiff-simple/parse.ts` as required by the previous step.


          1.  Import `MatchLocation` from `src/editor/types.ts`.

          2.  Import or define `splitLinesWithEndings`.

          3.  Define `findAllMatches(whole: string, part: string):
          MatchLocation[]`.

          4.  Use `String.prototype.indexOf(searchValue, fromIndex)` in a loop
          or `String.prototype.matchAll` with a global regex to find all
          occurrences of `part` within `whole`.

          5.  For each match found:
              *   Determine the 0-based `startIndex`.
              *   Calculate the 1-based `startLine` number by counting newlines before the `startIndex`.
              *   Extract a few lines of context (`contextLines`) around the `startLine` from the `whole` content (e.g., +/- 2 lines). Use `splitLinesWithEndings` on `whole` to work with lines easily.
              *   Create a `MatchLocation` object and add it to an array.
          6.  Return the array of `MatchLocation` objects.

          7.  Handle edge cases like empty strings or no matches.


          Example implementation sketch:

          ```typescript

          // Inside src/editor/udiff-simple/parse.ts

          import type { MatchLocation } from '../types';

          // Assuming splitLinesWithEndings is available


          function findAllMatches(whole: string, part: string): MatchLocation[]
          {
            if (!whole || !part) {
              return [];
            }

            const locations: MatchLocation[] = [];
            const fileLines = splitLinesWithEndings(whole); // Includes endings
            let fromIndex = 0;
            let matchIndex: number;

            while ((matchIndex = whole.indexOf(part, fromIndex)) !== -1) {
              // Calculate line number (1-based)
              const linesBefore = whole.substring(0, matchIndex).split('\n');
              const startLine = linesBefore.length; // 1-based

              // Get context lines (+/- 2 lines)
              const contextRadius = 2;
              const contextStartLine = Math.max(0, startLine - 1 - contextRadius); // 0-based index for fileLines
              const contextEndLine = Math.min(fileLines.length, startLine - 1 + contextRadius + 1); // Exclusive end index
              const contextLines = fileLines.slice(contextStartLine, contextEndLine);

              locations.push({
                startLine: startLine,
                startIndex: matchIndex,
                contextLines: contextLines,
              });

              // Move search start past the current match
              // If part is empty string, avoid infinite loop (though handled by initial check)
              fromIndex = matchIndex + (part.length || 1);
            }

            return locations;
          }

          ```

          Ensure this function is used correctly within the `applyEdits` catch
          block for `SearchTextNotUnique` errors. You may need to adjust how
          `SearchTextNotUnique` is caught or handled in `doReplace` or its
          callers to utilize `findAllMatches`. Consider modifying
          `searchAndReplace` to return the matches array instead of throwing,
          simplifying the `catch` block.
        done: false
      - prompt: >
          Update the `searchAndReplace` function in
          `src/editor/udiff-simple/parse.ts` to return the list of matches
          instead of throwing `SearchTextNotUnique`.


          1. Modify `searchAndReplace(whole: string, part: string, replace:
          string): string | null | MatchLocation[]`.

          2. Instead of throwing `SearchTextNotUnique` when `matches.length >
          1`, call `findAllMatches(whole, part)` and return the result.

          3. Keep the behavior for `matches.length === 0` (return `null`) and
          `matches.length === 1` (return the replaced string).


          Then, update the call site(s) of `searchAndReplace` (likely within
          `directlyApplyHunk` or `applyHunk`) to handle the three possible
          return types:

          - `string`: Success, use the string.

          - `null`: No match failure.

          - `MatchLocation[]`: Not unique failure. Propagate this array or the
          failure information up to `applyEdits`. The `try/catch` block in
          `applyEdits` might become simpler, checking the result type instead of
          catching the error. Adjust `applyHunk` and `applyPartialHunk`
          accordingly if they call `searchAndReplace` directly.
        done: false
  - title: 4. Integrate Results into applyLlmEdits & Add Interactive Flag
    description: Update applyLlmEdits to handle the structured EditResult[] from
      processors and add the --interactive flag.
    files:
      - src/apply-llm-edits/apply.ts
      - src/apply-llm-edits/cmd.ts
      - src/editor/diff-editor/parse.ts
      - src/editor/udiff-simple/parse.ts
      - src/editor/types.ts
    steps:
      - prompt: >
          Update `src/apply-llm-edits/apply.ts` and `src/apply-llm-edits/cmd.ts`
          to add an interactive mode flag and handle the structured results from
          edit processors.


          1.  In `src/apply-llm-edits/apply.ts`:
              *   Add an optional `interactive?: boolean` field to the `ApplyLlmEditsOptions` interface.
              *   Modify the function signature: `applyLlmEdits({ content, writeRoot, dryRun, mode, interactive }: ApplyLlmEditsOptions)`
              *   Update the calls to `processUnifiedDiff` and `processSearchReplace`. These functions (or the `applyEdits` they call) now return `Promise<EditResult[]>`. Capture this result, e.g., `const results: EditResult[] = await processUnifiedDiff(...)`.
              *   After getting the `results`, filter out the failures: `const failures = results.filter(r => r.type === 'noMatch' || r.type === 'notUnique');`.
              *   Check if `failures.length > 0`.
                  *   If yes AND `interactive` is true:
                      *   Call a new function (placeholder for now) `await resolveFailuresInteractively(failures as (NoMatchFailure | NotUniqueFailure)[], writeRoot!, dryRun ?? false);`. Define a stub for this function at the bottom of the file for now:
                        ```typescript
                        import type { NoMatchFailure, NotUniqueFailure } from '../editor/types';
                        import { log } from '../logging'; // Import log

                        async function resolveFailuresInteractively(
                            failures: (NoMatchFailure | NotUniqueFailure)[],
                            writeRoot: string,
                            dryRun: boolean
                        ): Promise<void> {
                            log(`Entering interactive mode for ${failures.length} failure(s)... (Implementation Pending)`);
                            // TODO: Implement in Task 5
                        }
                        ```
                      *   Ensure `writeRoot` is resolved before calling.
                  *   If yes AND `interactive` is false (or not set):
                      *   Log a summary of the errors based on the `failures` array (e.g., "Failed to apply edit to <file>: Edit text not found." or "Failed to apply edit to <file>: Edit text found in multiple locations.").
                      *   Re-throw an error or exit the process with a non-zero code to maintain previous non-interactive failure behavior. E.g., `throw new Error(\`Failed to apply ${failures.length} edits. Run with --interactive to resolve.\`);`
                  *   If `failures.length === 0`: Log overall success (e.g., "All edits applied successfully.").

          2.  In `src/apply-llm-edits/cmd.ts`:
              *   Add the `--interactive` option to the help message.
              *   Detect the `--interactive` flag from `args`.
              *   Pass the `interactive` boolean value to the `applyLlmEdits` call.
        done: false
  - title: 5. Implement Interactive Resolution Logic
    description: Implement the resolveFailuresInteractively function using
      @inquirer/prompts to handle user interaction for resolving NoMatchFailure
      and NotUniqueFailure.
    files:
      - src/apply-llm-edits/interactive.ts (New)
      - src/apply-llm-edits/apply.ts
      - src/editor/types.ts
      - src/rmfilter/utils.ts
      - src/logging.ts
    steps:
      - prompt: >
          Create the interactive resolution module
          `src/apply-llm-edits/interactive.ts` and implement the
          `resolveFailuresInteractively` function.


          1.  Create the file `src/apply-llm-edits/interactive.ts`.

          2.  Import necessary modules:
              *   `@inquirer/prompts` (`select`)
              *   `diff` (`createPatch`, `applyPatch`) - or just use `diff.createPatch` for display.
              *   `path`
              *   `os`
              *   `Bun` (for `Bun.file`, `Bun.write`, `Bun.spawn`, `fs.mkdtemp`, `fs.unlink`)
              *   `chalk` for colored output.
              *   Types: `EditResult`, `NoMatchFailure`, `NotUniqueFailure`, `MatchLocation`, `ClosestMatchResult` from `../editor/types`.
              *   Utilities: `secureWrite` from `../rmfilter/utils`.
              *   Logging: `log`, `warn`, `error` from `../logging`.
              *   Helpers: `splitLinesWithEndings` (copy or import).
          3.  Define the main async function
          `resolveFailuresInteractively(failures: (NoMatchFailure |
          NotUniqueFailure)[], writeRoot: string, dryRun: boolean):
          Promise<void>`.

          4.  Loop through each `failure` in the `failures` array.

          5.  Inside the loop, use a type guard (`if (failure.type ===
          'noMatch')`) to handle each failure type.
        done: false
      - prompt: >
          Implement the logic within `resolveFailuresInteractively` in
          `src/apply-llm-edits/interactive.ts` to handle `NoMatchFailure`.


          1.  Inside the `if (failure.type === 'noMatch')` block:

          2.  Check if `failure.closestMatch` exists and its `score` is
          reasonably high (e.g., > 0.5, maybe make configurable later).

          3.  If a good closest match exists:
              *   Get the original file's content: `const originalContent = await Bun.file(path.resolve(writeRoot, failure.filePath)).text();` (handle file not found).
              *   Generate the text of the closest match block: `const closestMatchText = failure.closestMatch.lines.join('');`
              *   Generate the proposed change text (replacing the closest match with the intended update): This requires finding the *exact* closest match text in the original content and replacing it. Use `originalContent.indexOf(closestMatchText)` to find the start index (careful, closestMatch might not be exact if fuzzy matching was deeper).
              *   *Alternative/Simpler Diff Display:* Calculate a diff patch between the `failure.originalText` (what the LLM provided) and the `closestMatchText` (what's actually in the file). Use `diff.createPatch`. Print this diff clearly using `chalk` to show the user *why* it didn't match and what the closest block looks like. Indicate the similarity score and file path.
              *   Use `@inquirer/prompts` `select` prompt:
                  *   Message: `Edit for "${failure.filePath}" failed: Original text not found. Found a close match (score: ${failure.closestMatch.score.toFixed(2)}):` (Show diff here).
                  *   Choices:
                      *   `{ name: 'Apply Edit using Closest Match', value: 'apply' }`: Apply the edit by replacing the `closestMatchText` with `failure.updatedText`.
                      *   `{ name: 'Open in Neovim Diff Mode', value: 'nvim' }`: Open `nvim -d`.
                      *   `{ name: 'Skip this edit', value: 'skip' }`
              *   Handle the choice:
                  *   If 'apply': Find `closestMatchText` in `originalContent`. Replace it with `failure.updatedText`. Use `secureWrite` to save the `newContent` (respect `dryRun`). Log action.
                  *   If 'nvim':
                      *   Create the temporary file content: Replace `closestMatchText` in `originalContent` with `failure.updatedText`.
                      *   Create a temporary directory using `fs.mkdtempSync(path.join(os.tmpdir(), 'llmutils-diff-'))`.
                      *   Write the temporary content to a file within the temp dir (e.g., `tempFile.ext`).
                      *   Get the absolute path to the original file: `originalFilePathAbs`.
                      *   Spawn `nvim -d originalFilePathAbs tempFilePath`. Use `{ stdio: 'inherit' }`. Wait for the process to exit (`await proc.exited`).
                      *   Clean up the temporary file and directory (`fs.unlinkSync`, `fs.rmdirSync`).
                      *   **Important:** After nvim exits, the user might have saved changes to the *original* file. We don't automatically apply anything further here. The goal was just to let them edit manually.
                  *   If 'skip': Log skipping.
          4.  If no good `closestMatch` exists:
              *   Log that the original text wasn't found and no close match was identified for `failure.filePath`.
              *   Offer only the "Skip" option (or maybe just log and continue automatically). Let's prompt with just "Skip". Use `select` with one choice or just log.
        done: false
      - prompt: >
          Implement the logic within `resolveFailuresInteractively` in
          `src/apply-llm-edits/interactive.ts` to handle `NotUniqueFailure`.


          1.  Inside the `else if (failure.type === 'notUnique')` block:

          2.  Get the original file content: `const originalContent = await
          Bun.file(path.resolve(writeRoot, failure.filePath)).text();` (handle
          file not found).

          3.  Prepare choices for `@inquirer/prompts` `select`:
              *   Map over `failure.matchLocations`:
                  *   For each `location: MatchLocation`, create a choice object.
                  *   `name`: `Line ${location.startLine}: ...context...` (Show context lines, maybe highlight the match). Use `chalk`.
                  *   `value`: The `location.startIndex` (or `location` object itself).
                  *   `description`: Optionally show more context lines.
              *   Add a final choice: `{ name: 'Skip this edit', value: 'skip' }`.
          4.  Use `select` prompt:
              *   Message: `Edit for "${failure.filePath}" failed: Original text found in multiple locations. Select the correct one to apply the change:`
              *   Pass the generated `choices`.
          5.  Handle the choice:
              *   If a location (`startIndex`) is selected:
                  *   Construct the `newContent` by replacing the `failure.originalText` specifically at the chosen `startIndex` in the `originalContent`. Use `originalContent.substring(0, selectedIndex) + failure.updatedText + originalContent.substring(selectedIndex + failure.originalText.length)`.
                  *   Use `secureWrite` to save the `newContent` (respect `dryRun`). Log action.
              *   If 'skip': Log skipping.
        done: false
      - prompt: >
          Finalize the integration.


          1.  In `src/apply-llm-edits/apply.ts`, replace the placeholder
          function definition for `resolveFailuresInteractively` with an import
          from `src/apply-llm-edits/interactive.ts`.
              ```typescript
              import { resolveFailuresInteractively } from './interactive';
              ```
          2.  Ensure all necessary dependencies (`@inquirer/prompts`, `chalk`,
          `diff`) are added to `package.json`. You don't need to edit
          `package.json`, just be aware they are needed.

          3.  Review the code in `interactive.ts` for error handling (e.g., file
          reads, temporary file operations, nvim execution) and user feedback
          clarity. Ensure `dryRun` is respected when writing files.
        done: false
