goal: Implement a new rmpr command-line tool (as a subcommand within the
  existing rmplan structure) to help developers address Pull Request review
  comments using an LLM. The tool will fetch PR review comments, allow the user
  to select which ones to address, prepare a context for an LLM based on one of
  two modes ("AI Comments" or "Separate Context"), and then invoke the LLM to
  suggest and apply fixes.
details: >
  The `rmpr` command will integrate with the GitHub API to retrieve PR
  information and review comments. Users will interactively select comments. The
  core functionality lies in constructing a detailed prompt for an LLM.


  **Context Components:**

  1.  **Current Code:** The content of the files relevant to the selected review
  comments, as they are in the PR's head revision. This includes their imports
  to provide sufficient context to the LLM. `rmfilter` or similar logic should
  be used for this.

  2.  **Diff from Parent Branch:** The diff of these files against the PR's base
  branch.

  3.  **Review Comments:** Incorporated based on the chosen mode.


  **Editing Modes:**

  1.  **AI Comments Mode:**
      *   Selected review comments are inserted directly into the source code as specially formatted AI comments (e.g., prefixed with "AI:", using unique start/end markers for multi-line comments).
      *   The actual working files will be modified to include these AI comments.
      *   The user gets a chance to review/edit these files before they are sent to the LLM.
      *   The LLM will be instructed to address these comments and remove the AI comment markers.
      *   A post-processing step will ensure any remaining AI comment markers are cleaned up.
  2.  **Separate Context Mode:**
      *   Selected review comments, along with their associated file paths, line numbers, and diff hunks, are formatted into a separate text block.
      *   This block is appended to the prompt, along with the original file contents and diffs.

  **Workflow:**

  1.  User invokes `rmpr <pr_identifier>`.

  2.  Tool fetches PR data and unresolved review comments.

  3.  User selects comments via a checkbox dialog.

  4.  User chooses an editing mode (or a default is used).

  5.  Context is prepared:
      *   Relevant files (from PR and comments) and their imports are fetched.
      *   Diffs from the parent branch for these files are generated.
      *   Review comments are integrated based on the mode.
  6.  If in "AI Comments" mode, AI comments are inserted into files. User is
  prompted to review/edit these files.

  7.  LLM is called with the constructed prompt.

  8.  LLM's suggested changes are applied using existing mechanisms
  (`applyLlmEdits`).

  9.  If in "AI Comments" mode, AI comment markers are cleaned from the files.


  The implementation will involve creating new modules under `src/rmpr/` and
  modifying `src/common/github/pull_requests.ts` and `src/rmplan/rmplan.ts`.
tasks:
  - title: 1. Basic CLI Structure and PR Identifier Parsing
    description: >
      Set up the `rmpr` subcommand within `src/rmplan/rmplan.ts`. Create the
      main file for `rmpr` logic (`src/rmpr/main.ts`) and implement parsing for
      the PR identifier (URL or `owner/repo#number` or
      `owner/repo/pull/number`).
    files:
      - src/rmplan/rmplan.ts
      - src/rmpr/main.ts
      - src/rmpr/types.ts
    include_imports: false
    include_importers: false
    steps:
      - prompt: >
          Modify `src/rmplan/rmplan.ts` to add a new subcommand `rmpr`.

          This command should take one mandatory argument: `prIdentifier` (a
          string).

          The action for this command should call a new function,
          `handleRmprCommand`, in a new file `src/rmpr/main.ts`.


          Create `src/rmpr/main.ts`.

          Implement `handleRmprCommand(prIdentifier: string, options: any,
          globalCliOptions: any)`.

          Inside `handleRmprCommand`, implement a utility function
          `parsePrIdentifier(identifier: string): { owner: string; repo: string;
          prNumber: number } | null`.

          This function should parse the following formats:

          - Full URL: `https://github.com/owner/repo/pull/123`

          - Short format: `owner/repo#123`

          - Alternative short format: `owner/repo/123` (if PR is implied)


          If parsing fails, `parsePrIdentifier` should return `null`.
          `handleRmprCommand` should log an error and exit if parsing fails.

          For now, if parsing succeeds, log the parsed owner, repo, and PR
          number.


          Add basic options to the `rmpr` command in `src/rmplan/rmplan.ts`:

          - `--mode <mode>`: Editing mode ('ai-comments' or 'separate-context').
          Default to 'ai-comments'.

          - `--yes`: Skip interactive prompts (e.g., for editing files).

          - `-m, --model <model>`: LLM model to use.


          Ensure necessary imports like `Command` from `commander` and logging
          functions are used.

          Create `src/rmpr/types.ts` and define an interface `PrIdentifier` for
          the return type of `parsePrIdentifier`.
        done: true
      - prompt: >
          Write tests for the `parsePrIdentifier` function in
          `src/rmpr/main.ts`.

          Create a new test file `src/rmpr/main.test.ts`.

          The tests should cover:

          - Valid full URL.

          - Valid short format (`owner/repo#123`).

          - Valid alternative short format (`owner/repo/123`).

          - Invalid formats (e.g., missing parts, non-numeric PR number).

          - URLs from different GitHub instances (e.g., GitHub Enterprise -
          though parsing might assume github.com for simplicity unless specified
          otherwise). For now, assume github.com.
        done: true
  - title: 2. Fetch PR Data and Enhance Comment Selection
    description: >
      Integrate GitHub API calls to fetch PR details and review comments.
      Enhance the existing comment selection mechanism in
      `src/common/github/pull_requests.ts` to return detailed comment
      information (including file path, line numbers, diff hunk) needed for
      `rmpr`.
    files:
      - src/rmpr/main.ts
      - src/common/github/pull_requests.ts
      - src/rmpr/types.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          In `src/rmpr/types.ts`, define a new interface
          `DetailedReviewComment`:

          ```typescript

          export interface DetailedReviewComment {
            threadId: string; // Review thread ID
            commentId: string; // Specific comment ID
            body: string;
            path: string; // File path this comment pertains to
            line: number | null; // End line of the comment in the diff
            originalLine: number; // For single line comments, the line in the original diff. For multi-line, the end line of the original selection.
            originalStartLine: number | null; // For multi-line comments, the start line of the original selection in the diff.
            diffHunk: string;
            authorLogin: string | undefined;
            // Add other relevant fields from ReviewThreadNode or CommentNode if necessary
          }

          ```


          Modify `src/common/github/pull_requests.ts`:

          1.  Update the `getUnresolvedComments` function (or create a new one,
          e.g., `getDetailedUnresolvedReviewComments`) to process
          `ReviewThreadNode[]` from `fetchPullRequestAndComments`.
              It should return an array of `DetailedReviewComment` objects.
              Iterate through threads and their comments. For each comment in an unresolved, non-outdated thread, construct a `DetailedReviewComment`.
              The `path`, `originalLine`, `originalStartLine`, `diffHunk` should be taken from the `ReviewThreadNode`.
              The `body` and `id` (as `commentId`) from `CommentNode`. `threadId` from `ReviewThreadNode`.
          2.  Update the `selectUnresolvedComments` function (or create a new
          one, e.g., `selectDetailedReviewComments`):
              - It should accept `DetailedReviewComment[]`.
              - The `choices` for the `checkbox` prompt should display more context, e.g., `[${comment.path}:${comment.originalLine}] ${comment.authorLogin}: ${comment.body.substring(0, 80)}...`.
              - It should return the selected `DetailedReviewComment[]`.
        done: true
      - prompt: >
          In `src/rmpr/main.ts`, within `handleRmprCommand`:

          1. After successfully parsing the `prIdentifier`, call
          `fetchPullRequestAndComments` from
          `src/common/github/pull_requests.ts` using the parsed owner, repo, and
          PR number. Handle potential errors.

          2. Extract the `baseRefName` and `headRefName` from the PR data. Store
          them for later use.

          3. Extract the list of `FileNode` (changed files in PR) from the PR
          data. Store them.

          4. Call the newly modified `getDetailedUnresolvedReviewComments` (or
          equivalent) to get all detailed unresolved review comments.

          5. If there are no unresolved comments, log a message and exit.

          6. Call the newly modified `selectDetailedReviewComments` (or
          equivalent) to allow the user to select comments.

          7. If no comments are selected by the user, log a message and exit.

          8. For now, log the selected `DetailedReviewComment` objects.

          Ensure `GITHUB_TOKEN` environment variable usage is clear (it's used
          by Octokit internally).
        done: true
  - title: 3. Git Utilities for File Content and Diffs
    description: >
      Create utility functions to fetch file content at a specific Git ref and
      to get the diff of a file between two refs. These will be used to build
      the context for the LLM.
    files:
      - src/rmpr/git_utils.ts
      - src/rmpr/main.ts
      - src/rmfilter/utils.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          Create a new file `src/rmpr/git_utils.ts`.

          This file will contain helper functions for Git operations.

          Import `getGitRoot` from `src/rmfilter/utils.ts` and `logSpawn` or
          similar for running git commands.


          Implement the following functions:


          1.  `async function getFileContentAtRef(filePath: string, ref:
          string): Promise<string>`
              - Takes a file path (relative to git root) and a git ref (branch, commit hash).
              - Uses `git show <ref>:<filePath>` to get the content of the file at that specific ref.
              - Returns the file content as a string.
              - Handles errors (e.g., file not found at ref).

          2.  `async function getDiff(filePath: string, baseRef: string,
          headRef: string): Promise<string>`
              - Takes a file path (relative to git root), a base ref, and a head ref.
              - Uses `git diff --patch ${baseRef}..${headRef} -- ${filePath}` to get the diff for that specific file.
              - Returns the diff output as a string.
              - Handles errors.

          Ensure these functions correctly resolve paths relative to the git
          root.
        done: true
      - prompt: >
          Write tests for the functions in `src/rmpr/git_utils.ts`.

          Create `src/rmpr/git_utils.test.ts`.

          You will need to set up a temporary Git repository with some commits
          and files to test these functions.

          - For `getFileContentAtRef`:
              - Test fetching content of an existing file at a specific commit.
              - Test fetching content of a file that was modified.
              - Test attempting to fetch a non-existent file at a commit (expect error or specific output).
          - For `getDiff`:
              - Test getting a diff for a modified file.
              - Test getting a diff for an added file.
              - Test getting a diff for a deleted file.
              - Test getting a diff for an unchanged file (expect empty output).

          Use Bun's built-in file system and child_process utilities to manage
          the temporary Git repository.

          Remember to clean up the temporary directory after tests.
        done: true
      - prompt: >
          In `src/rmpr/main.ts`, within `handleRmprCommand`:

          1. After selecting review comments, identify the unique set of file
          paths mentioned in these comments.

          2. For each unique file path:
              a. Use `getFileContentAtRef` from `src/rmpr/git_utils.ts` to fetch its content at `headRefName` (obtained in Task 2). Store these as `Map<filePath, content>`.
              b. Use `getDiff` from `src/rmpr/git_utils.ts` to get its diff between `baseRefName` and `headRefName`. Store these as `Map<filePath, diff>`.
          3. For now, log a summary of fetched contents and diffs (e.g.,
          "Fetched content for X files, diffs for Y files").
        done: true
  - title: 4. Implement "AI Comments" Mode Logic
    description: >
      Develop the logic for the "AI Comments" mode. This includes inserting
      AI-prefixed comments and markers into file content, and generating the
      specific LLM prompt for this mode. Also, implement the cleanup function.
    files:
      - src/rmpr/modes.ts
      - src/rmpr/types.ts
      - src/rmpr/main.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          Create a new file `src/rmpr/modes.ts`.

          Import `DetailedReviewComment` from `src/rmpr/types.ts`.


          Implement `insertAiCommentsIntoFileContent`:

          ```typescript

          interface AiCommentInsertionResult {
            contentWithAiComments: string;
            // any other metadata if needed
          }


          export function insertAiCommentsIntoFileContent(
            originalContent: string,
            commentsForFile: DetailedReviewComment[],
            filePath: string // for language-specific comment syntax, though not strictly needed by plan
          ): AiCommentInsertionResult {
            // ...
          }

          ```

          - This function takes the original content of a single file and an
          array of `DetailedReviewComment` objects relevant to this file.

          - For each comment:
              - Generate a unique ID (e.g., using `crypto.randomUUID().slice(0, 8)`).
              - Prefix each line of the comment body with "AI: ".
              - If `comment.originalStartLine` is different from `comment.originalLine` (multi-line original comment) or if the comment refers to a block:
                  - Insert `<!-- AI_COMMENT_START_${uniqueId} -->` (or a language-appropriate block comment marker) above the `originalStartLine` (or `originalLine` if `originalStartLine` is null).
                  - Insert the prefixed comment body.
                  - Insert `<!-- AI_COMMENT_END_${uniqueId} -->` after the `originalLine`.
              - If it's a single-line comment (originalStartLine is null or same as originalLine):
                  - Insert the prefixed comment body directly above the `originalLine`. No start/end markers needed.
          - The function should carefully insert comments into the
          `originalContent` based on line numbers. Line numbers are 1-based.
          Convert to 0-based for array manipulation.

          - Return the modified file content.


          Implement `createAiCommentsPrompt`:

          ```typescript

          export function createAiCommentsPrompt(
            filesWithAiComments: Map<string, string>, // filePath -> content with AI comments
            fileDiffs: Map<string, string> // filePath -> diff string
          ): string {
            // ...
          }

          ```

          - This function constructs the full prompt for the LLM.

          - It should include:
              - An introductory instruction explaining that files contain "AI comments" (prefixed "AI:", possibly with start/end markers) that need to be addressed.
              - Instruction to the LLM to make the code changes and **remove** the AI comment and its markers.
              - The content of each file that has AI comments, clearly demarcated (e.g., using Markdown code blocks with language identifiers).
              - The diffs from the parent branch for each file, also clearly demarcated.
          - Example structure:
            ```
            You will be provided with source code files that include special 'AI comments'. These comments are prefixed with 'AI:' and may be enclosed in markers like '<!-- AI_COMMENT_START_XYZ -->' and '<!-- AI_COMMENT_END_XYZ -->'. Your task is to address the instructions in these AI comments by modifying the code.
            - Make the necessary code changes to satisfy the AI comment.
            - After addressing a comment, **remove the AI comment itself and its markers**. Do not add any new comments like 'addressed' or 'fixed'. Simply make the change.
            - The diff from the parent branch is provided for context on recent changes.

            Files with AI Comments:
            ---
            Path: path/to/file1.ts
            \`\`\`typescript
            // content of file1.ts with AI comments inserted
            \`\`\`
            ---
            Path: path/to/file2.py
            \`\`\`python
            # content of file2.py with AI comments inserted
            \`\`\`
            ---

            Diffs from parent branch:
            ---
            Path: path/to/file1.ts
            \`\`\`diff
            // diff for file1.ts
            \`\`\`
            ---
            Path: path/to/file2.py
            \`\`\`diff
            // diff for file2.py
            \`\`\`
            ---
            ```
        done: true
      - prompt: >
          In `src/rmpr/modes.ts`, implement `removeAiCommentMarkers`:

          ```typescript

          export function removeAiCommentMarkers(fileContent: string): string {
            // ...
          }

          ```

          - This function takes file content (potentially modified by the LLM).

          - It should remove:
              - Lines starting with "AI: " (and any leading whitespace before "AI:").
              - Lines that are `<!-- AI_COMMENT_START_... -->` or `<!-- AI_COMMENT_END_... -->` (and similar language-specific markers if you introduced them).
          - This is a cleanup step, in case the LLM doesn't remove all markers.
        done: true
      - prompt: >
          Write tests for `insertAiCommentsIntoFileContent` and
          `removeAiCommentMarkers` in `src/rmpr/modes.test.ts`.

          - For `insertAiCommentsIntoFileContent`:
              - Test with single-line comments.
              - Test with multi-line comments (requiring start/end markers).
              - Test inserting multiple comments into one file.
              - Test comments at the beginning, middle, and end of the file.
              - Test with empty file content.
          - For `removeAiCommentMarkers`:
              - Test removing "AI: " prefixed lines.
              - Test removing start/end markers.
              - Test content with no markers (should remain unchanged).
              - Test content where markers might be slightly malformed by LLM (if possible to anticipate).
        done: true
  - title: 5. Implement "Separate Context" Mode Logic
    description: >
      Develop the logic for the "Separate Context" mode. This involves
      formatting the selected review comments and their diff hunks into a text
      block, and generating the LLM prompt for this mode.
    files:
      - src/rmpr/modes.ts
      - src/rmpr/types.ts
      - src/rmpr/main.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          In `src/rmpr/modes.ts`:


          Implement `formatReviewCommentsForSeparateContext`:

          ```typescript

          export function formatReviewCommentsForSeparateContext(
            selectedComments: DetailedReviewComment[]
          ): string {
            // ...
          }

          ```

          - This function takes the array of selected `DetailedReviewComment`
          objects.

          - It formats them into a single string block. Each comment should
          include:
              - File path and line number(s).
              - The comment body.
              - The associated `diffHunk`.
          - Example structure for one comment:
            ```
            File: path/to/file1.ts (Lines: ${originalStartLine}-${originalLine})
            Author: ${authorLogin}
            Comment:
            ${body}
            Relevant Diff Hunk:
            \`\`\`diff
            ${diffHunk}
            \`\`\`
            ---
            ```
          - Concatenate all formatted comments.


          Implement `createSeparateContextPrompt`:

          ```typescript

          export function createSeparateContextPrompt(
            originalFilesContent: Map<string, string>, // filePath -> original content
            fileDiffs: Map<string, string>, // filePath -> diff string
            formattedReviewComments: string // Output from formatReviewCommentsForSeparateContext
          ): string {
            // ...
          }

          ```

          - This function constructs the full prompt for the LLM.

          - It should include:
              - An introductory instruction to address the review comments provided in a separate section, using the file contents and diffs for context.
              - The content of each original file, clearly demarcated.
              - The diffs from the parent branch for each file.
              - The block of formatted review comments.
          - Example structure:
            ```
            Please review the following code files and address the provided review comments. Use the diffs from the parent branch for additional context on recent changes.

            File Contents:
            ---
            Path: path/to/file1.ts
            \`\`\`typescript
            // content of file1.ts
            \`\`\`
            ---
            Path: path/to/file2.py
            \`\`\`python
            # content of file2.py
            \`\`\`
            ---

            Diffs from parent branch:
            ---
            Path: path/to/file1.ts
            \`\`\`diff
            // diff for file1.ts
            \`\`\`
            ---
            Path: path/to/file2.py
            \`\`\`diff
            // diff for file2.py
            \`\`\`
            ---

            Review Comments to Address:
            ${formattedReviewComments}
            ```
        done: false
      - prompt: >
          Write tests for `formatReviewCommentsForSeparateContext` in
          `src/rmpr/modes.test.ts`.

          - Test with a single comment.

          - Test with multiple comments.

          - Ensure the formatting is as expected, including correct diff hunk
          inclusion.
        done: false
  - title: 6. Orchestrate Mode Logic, User Review, LLM Call, and Edit Application
    description: >
      Integrate the mode-specific logic into `src/rmpr/main.ts`. Implement the
      user review step for "AI Comments" mode. Call the LLM with the generated
      prompt and apply its edits using existing utilities.
    files:
      - src/rmpr/main.ts
      - src/rmpr/modes.ts
      - src/common/run_and_apply.ts
      - src/apply-llm-edits/apply.ts
      - src/rmfilter/utils.ts
      - src/logging.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          In `src/rmpr/main.ts`, within `handleRmprCommand`, after fetching file
          contents and diffs:


          1.  **Mode Selection & Prompt Generation:**
              - Based on the `--mode` option:
                  - If "ai-comments":
                      - Create a new map `filesToProcessWithAiComments: Map<string, string>`.
                      - For each file path in `originalFilesContent` (Map from Task 3.3):
                          - Filter `selectedDetailedReviewComments` to get comments relevant to the current file.
                          - If comments exist for this file, call `insertAiCommentsIntoFileContent` from `src/rmpr/modes.ts` with the file's original content and its relevant comments. Store the result in `filesToProcessWithAiComments`.
                          - If no comments for this file, copy its original content to `filesToProcessWithAiComments`.
                      - **User Review (AI Comments Mode):**
                          - If not `--yes`:
                              - Log a message: "AI comments have been prepared in the following files. Please review and make any desired edits before proceeding."
                              - List the files that will be modified/sent to LLM (keys of `filesToProcessWithAiComments` that had comments).
                              - **Important**: To allow user editing, you must write the `contentWithAiComments` to the actual working directory files.
                              - After writing, prompt the user to press Enter to continue after they've finished editing.
                              - After user confirmation, re-read the content of these files from the working directory into `filesToProcessWithAiComments` because the user might have edited them.
                      - Call `createAiCommentsPrompt` with `filesToProcessWithAiComments` and `fileDiffs` to get the `llmPrompt`.
                  - If "separate-context":
                      - Call `formatReviewCommentsForSeparateContext` with `selectedDetailedReviewComments`.
                      - Call `createSeparateContextPrompt` with `originalFilesContent`, `fileDiffs`, and the formatted comments to get the `llmPrompt`.
              - Log the first few lines of the generated `llmPrompt` for debugging (if not too verbose, or under a debug flag).

          2.  **LLM Call and Edit Application:**
              - Get `gitRoot` using `getGitRoot()`.
              - Use `runStreamingPrompt` (from `src/common/run_and_apply.ts`) with the `llmPrompt`, user-specified or default model, and temperature 0.
              - Get the LLM output text.
              - Call `applyLlmEdits` (from `src/apply-llm-edits/apply.ts`) with:
                  - `interactive: !options.yes` (or always true for this flow initially)
                  - `baseDir: gitRoot`
                  - `content: llmOutput`
                  - `originalPrompt: llmPrompt`
                  - A `retryRequester` (can use `createRetryRequester` from `src/apply-llm-edits/retry.ts`).

          3.  **Post-processing (AI Comments Mode):**
              - If mode was "ai-comments":
                  - For each file that was processed with AI comments:
                      - Read its content (which should now include LLM's edits).
                      - Call `removeAiCommentMarkers` from `src/rmpr/modes.ts` on the content.
                      - Write the cleaned content back to the file.
                  - Log that AI comment markers have been cleaned up.

          Handle errors throughout this process. Use logging functions from
          `src/logging.ts`.
        done: false
  - title: 7. Final Touches and Testing
    description: >
      Perform end-to-end testing of the `rmpr` command with both modes. Refine
      CLI options, help messages, and logging.
    files:
      - src/rmpr/main.ts
      - src/rmplan/rmplan.ts
      - (Manual testing against a real or mock PR)
    include_imports: false
    include_importers: false
    steps:
      - prompt: >
          Review and refine the `rmpr` command in `src/rmplan/rmplan.ts` and its
          main logic in `src/rmpr/main.ts`:

          - Ensure help messages for the command and its options are clear.

          - Verify default values for options (e.g., mode, model from config if
          applicable).

          - Improve logging for clarity and user experience. Add `debugLog` for
          verbose information.

          - Ensure consistent error handling and user feedback.

          - Consider adding a `--dry-run` option that generates the prompt but
          doesn't call the LLM or apply edits.

          - The `rmplanConfig` (loaded via `loadEffectiveConfig`) could provide
          a default model for `rmpr` if the user doesn't specify one via
          `--model`. Integrate this.


          This step is primarily about refinement and preparing for manual
          testing. No new core logic, but focus on usability and robustness.
        done: false
      - prompt: >
          Manual Testing Plan (Conceptual - to be executed by the developer):

          - Create a test PR on a GitHub repository.

          - Add a few review comments on different lines and files, some
          multi-line.

          - Run `rmpr <pr_identifier>`:
              - Verify PR data is fetched.
              - Verify comment selection UI works and shows correct comment details.
              - Test "ai-comments" mode:
                  - Check that AI comments are inserted into files correctly.
                  - Test the user review step (pause and manual edit).
                  - Check the generated prompt.
                  - (If LLM call is mocked/skipped) Verify `applyLlmEdits` would be called correctly.
                  - Verify AI comment cleanup.
              - Test "separate-context" mode:
                  - Check the generated prompt, especially the formatted comments section.
                  - (If LLM call is mocked/skipped) Verify `applyLlmEdits` would be called correctly.
          - Test with `--yes` option.

          - Test with invalid PR identifiers.

          - Test when GITHUB_TOKEN is not set (expect clear error).


          (No code output needed for this step, it's a guide for the developer
          implementing the plan).
        done: false
