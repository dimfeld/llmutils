---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Core `update` command implementation
goal: Deliver a fully functional `rmplan update` command that can take an
  existing plan and a text description, use an LLM to generate an updated plan,
  and write the changes back to the original file.
id: 44
uuid: 1edc5276-1e85-4373-8830-6e2659a851f4
status: done
priority: high
dependencies: []
issue:
  - https://github.com/dimfeld/llmutils/issues/117
planGeneratedAt: 2025-06-10T07:23:41.608Z
promptsGeneratedAt: 2025-06-10T07:34:01.189Z
createdAt: 2025-06-06T16:55:35.032Z
updatedAt: 2025-10-27T08:39:04.242Z
project:
  title: Implement the `rmplan update` command
  goal: The goal of this project is to implement a new `rmplan update` command.
    This command will allow users to modify an existing plan by providing a
    natural language description of the desired changes. It will leverage an LLM
    to intelligently update the plan's tasks and structure, similar to how the
    `generate` command creates a plan from scratch.
  details: >-
    The `rmplan update` command will provide an iterative workflow for plan
    refinement. It will take a plan file and a description of the update, submit
    this information to an LLM, and then process the LLM's response to update
    the original plan file.


    This process will involve:

    1. Creating a new command handler for `update`.

    2. Developing a new prompt that instructs the LLM on how to modify an
    existing plan.

    3. Creating a utility to convert the existing YAML plan into a Markdown
    format that the LLM can easily process.

    4. Reusing the existing `rmfilter` and YAML extraction logic from the
    `generate` command.

    5. Adapting the extraction process to overwrite the existing plan file with
    the updated content while preserving key metadata.


    This feature will enhance `rmplan` by making plans dynamic and adaptable,
    allowing for changes and refinements as a project evolves.
tasks:
  - title: Create the `update` command structure
    done: true
    description: This task involves setting up the boilerplate for the new command.
      We will add the `update` command to the main CLI entry point, define its
      arguments and options, and create the new handler file where the core
      logic will reside.
  - title: Implement update description input handling
    done: true
    description: The command needs to accept the update description from either a
      command-line flag or the user's default text editor. This task will
      implement the logic to handle both input methods, ensuring a flexible user
      experience.
  - title: Create a YAML-to-Markdown plan converter
    done: true
    description: To provide the existing plan as context to the LLM, we need to
      convert it from its structured YAML format into a human-readable Markdown
      format that the LLM is trained on. This task involves creating a new
      utility function that performs this conversion, effectively reversing the
      process of the existing Markdown-to-YAML extractor.
  - title: Create the plan update prompt template
    done: true
    description: A new, specialized prompt is required to instruct the LLM on how to
      perform the update. This task will involve creating a prompt template in
      `src/rmplan/prompt.ts` that includes placeholders for the existing plan
      (in Markdown) and the user's update description.
  - title: Implement the core update logic
    done: true
    description: This task will wire all the components together in the command
      handler. It will read the specified plan, convert it to Markdown,
      construct the full LLM prompt, and reuse the existing `rmfilter` logic
      from the `generate` command to gather relevant codebase context before
      presenting the final prompt to the LLM.
  - title: Adapt the YAML extraction process for updates
    done: true
    description: The existing `extractMarkdownToYaml` function is designed for
      creating new plans or filling in stubs. This task will involve
      generalizing this function or its calling context to handle updates to a
      full, existing plan. The goal is to merge the LLM's changes while
      preserving important metadata like the plan ID and creation timestamp, and
      then write the result back to the original file.
  - title: Add comprehensive tests for the update command
    done: true
    description: To ensure reliability, we will create a suite of tests for the
      `update` command. These tests will cover various scenarios, such as
      adding, removing, and modifying tasks, using different input methods for
      the update description, and verifying that the plan file is correctly
      updated.
  - title: Update user documentation
    done: true
    description: The final task is to document the new `rmplan update` command. We
      will update the `README.md` and any other relevant documentation to
      include a description of the command, its options, and usage examples.
changedFiles:
  - README.md
  - src/rmplan/commands/update.test.ts
  - src/rmplan/commands/update.ts
  - src/rmplan/process_markdown.test.ts
  - src/rmplan/process_markdown.ts
  - src/rmplan/prompt.test.ts
  - src/rmplan/prompt.ts
  - src/rmplan/rmplan.ts
rmfilter:
  - src/rmplan/
---

This phase covers the end-to-end implementation of the `update` command. We will start by setting up the command-line interface, then implement the core logic for gathering inputs, generating the LLM prompt, and processing the output. This involves creating a new utility for converting YAML plans to Markdown and adapting the existing YAML extraction logic to handle updates.
