goal: Enhance rmfilter to automatically discover and include relevant .mdc
  (Markdown Domain Configuration) files based on rules defined within the MDC
  files themselves (matching globs or grep terms against active source files),
  including files without specific rules by default. Provide an option to
  disable this feature and update the output format for included documentation
  and rules. Use Bun.file for file operations where appropriate.
details: >
  The project involves several interconnected parts:

  1.  **MDC Discovery:** Locating `.mdc` files in standard project locations
  (`.cursor/rules/`) and a user-specific location (`~/.config/rmfilter/rules`).

  2.  **MDC Parsing:** Reading `.mdc` files using `Bun.file` and parsing their
  frontmatter (YAML) to extract metadata like `description`, `globs`, `grep`,
  and `type`.

  3.  **Filtering Logic:** Implementing the core mechanism to determine if an
  MDC file should be included. This involves:
      *   Checking if the MDC file lacks *both* `globs` and `grep` specifiers (include by default).
      *   Matching the MDC `globs` against the set of *active source files* selected by `rmfilter`.
      *   Matching the MDC `grep` terms (case-insensitively) against the *content* of the active source files (read using `Bun.file`).
  4.  **Integration:** Connecting the discovery, parsing, and filtering logic
  into the main `rmfilter` execution flow. The filtering needs access to the
  final set of source files selected by the user's commands.

  5.  **Output Formatting:** Modifying `additional_docs.ts` to structure the
  included documents and rules using `<documents>`/`<rules>` parent tags and
  individual `<document>`/`<rule>` child tags, potentially with a `description`
  attribute.

  6.  **Configuration:** Adding a `--no-mdc` command-line flag to disable the
  automatic MDC inclusion.


  We will use libraries like `fast-glob` for finding files, `gray-matter` for
  parsing frontmatter, and `micromatch` for glob matching.
tasks:
  - title: 1. Setup MDC Parsing and Discovery Utilities
    description: Create utility functions to find .mdc files in the specified
      locations and parse their frontmatter and content using `Bun.file`. Add a
      new command-line flag `--no-mdc`.
    files:
      - src/rmfilter/config.ts
      - src/rmfilter/mdc.ts
      - src/rmfilter/mdc.test.ts
      - src/rmfilter/utils.ts
    steps:
      - prompt: >
          Modify `src/rmfilter/config.ts` to add a new command-line option
          `--no-mdc`.


          1.  Add `'no-mdc': { type: 'boolean' }` to the `globalOptions` object
          within the `getCurrentConfig` function.

          2.  Update the help message text (within the `if (globalValues.help)`
          block) to include a description for the new `--no-mdc` flag. Suggest
          description: `--no-mdc                  Disable automatic loading of
          .mdc rule/doc files`.

          3.  Add `'no-mdc': z.boolean().optional()` to the `ConfigSchema` Zod
          schema definition.

          4.  Ensure the new option is correctly merged when loading YAML
          configuration (CLI flags should take precedence). Update the merging
          logic within the `if (yamlConfigPath)` block if necessary (it might
          already be covered by the spread syntax `{ ...config, ...globalValues,
          ... }`).
        done: true
      - prompt: >
          Create a new file `src/rmfilter/mdc.ts`. This file will contain
          utilities for handling MDC files.


          1.  Install the `gray-matter` library: `bun add gray-matter`

          2.  Install the `micromatch` library: `bun add micromatch`

          3.  Import necessary modules: `path`, `os`, `glob` from `fast-glob`,
          `matter` from `gray-matter`, `micromatch` from `micromatch`. (No need
          for `fs/promises` as we'll use `Bun.file`).

          4.  Define a TypeScript interface or type named `MdcFile` to represent
          a parsed MDC file. It should include:
              *   `filePath`: string (absolute path)
              *   `content`: string (the body content after the frontmatter)
              *   `data`: object containing the parsed frontmatter fields:
                  *   `description?`: string
                  *   `globs?`: string | string[]
                  *   `grep?`: string | string[]
                  *   `type?`: string (expect 'docs' or 'rules', potentially others)
                  *   `name?`: string
                  *   // Allow other potential metadata fields
                  *   [key: string]: any;

          5.  Create an async function `parseMdcFile(filePath: string):
          Promise<MdcFile | null>`.
              *   It should read the file content using `await Bun.file(filePath).text()`.
              *   Use `matter()` from `gray-matter` to parse the file content.
              *   Handle potential errors during file reading (e.g., file not found from `Bun.file`) or parsing (e.g., invalid YAML). Return `null` in case of errors.
              *   Construct and return an `MdcFile` object using the absolute `filePath`, parsed `content`, and `data` (frontmatter). If parsing fails or the file is invalid, return `null`.

          6.  Create an async function `findMdcFiles(gitRoot: string):
          Promise<string[]>`.
              *   Define the search directories:
                  *   Project-specific: `path.join(gitRoot, '.cursor/rules')`
                  *   User-specific: `path.join(os.homedir(), '.config/rmfilter/rules')`
              *   Use `glob` from `fast-glob` to find all `.mdc` files within these directories (and their subdirectories). Search recursively (`**/*.mdc`).
              *   Ensure the function handles cases where these directories might not exist gracefully.
              *   Return an array of absolute file paths to the found `.mdc` files.
        done: true
      - prompt: >
          Create a new test file `src/rmfilter/mdc.test.ts`.


          1.  Import necessary functions from `bun:test` and the functions
          `parseMdcFile`, `findMdcFiles` from `./mdc.ts`.

          2.  Add tests for `parseMdcFile`:
              *   Use `Bun.write` in setup (`beforeEach` or similar) to create temporary test files.
              *   Test parsing a valid MDC file with all expected frontmatter fields (`description`, `globs`, `grep`, `type`).
              *   Test parsing a file with minimal frontmatter (e.g., only `description`).
              *   Test parsing a file with *no* frontmatter (should still return content, empty data object).
              *   Test parsing a file with array values for `globs` and `grep`.
              *   Test handling a non-existent file path (should return null or throw, be consistent based on `Bun.file` behavior, likely throw). Catch the error and assert `null` is returned from `parseMdcFile`.
              *   Test handling a file with invalid YAML frontmatter (should return `null`).
          3.  Add tests for `findMdcFiles`:
              *   Set up mock directories and `.mdc` files within a temporary test structure simulating `.cursor/rules` and `~/.config/rmfilter/rules`. Use `mkdirSync` and `Bun.write`. Clean up in `afterEach`.
              *   Test finding files in both locations.
              *   Test finding files in nested subdirectories.
              *   Test the case where one or both directories do not exist.
              *   Test the case where no `.mdc` files are found.
              *   Ensure returned paths are absolute.

          (Use `bun:test` features like `beforeEach`, `afterEach`).
        done: true
  - title: 2. Implement MDC Filtering Logic (Updated)
    description: Create the logic that filters parsed MDC files. Files without
      `globs` or `grep` are included by default. Otherwise, inclusion depends on
      `globs` matching active source files or `grep` matching active source file
      content (read via `Bun.file`).
    files:
      - src/rmfilter/mdc.ts
      - src/rmfilter/mdc.test.ts
      - src/common/file_finder.ts
      - src/rmfilter/utils.ts
    steps:
      - prompt: >
          Update/Add the function `filterMdcFiles` in `src/rmfilter/mdc.ts`.


          1.  Define the function signature: `async function
          filterMdcFiles(mdcFiles: MdcFile[], activeSourceFiles: string[],
          gitRoot: string): Promise<MdcFile[]>`
              *   `mdcFiles`: An array of parsed `MdcFile` objects.
              *   `activeSourceFiles`: An array of *absolute paths* to the source files selected by the main `rmfilter` process.
              *   `gitRoot`: The absolute path to the git repository root.
              *   Returns: A promise resolving to an array of `MdcFile` objects that meet the inclusion criteria.

          2.  Inside the function, initialize an empty array `includedMdcFiles`.

          3.  Convert `activeSourceFiles` to paths *relative* to `gitRoot` for
          glob matching. Store these relative paths in a new array (e.g.,
          `relativeSourceFiles`). Remember to handle path separators
          consistently (e.g., use POSIX paths for matching).

          4.  Create a helper function `normalizeArrayInput(input: string |
          string[] | undefined): string[]` that takes the `globs` or `grep`
          field and returns a cleaned array of non-empty strings. Handle
          undefined, single string, or array input. Trim whitespace from
          patterns/terms.

          5.  Iterate through each `mdcFile` in the input `mdcFiles` array.

          6.  Inside the loop, determine if the current `mdcFile` should be
          included:
              *   Initialize a flag `shouldInclude = false`.
              *   Get normalized patterns/terms:
                  *   `const globPatterns = normalizeArrayInput(mdcFile.data.globs);`
                  *   `const grepTerms = normalizeArrayInput(mdcFile.data.grep);`
              *   **Default Inclusion Check:**
                  *   If `globPatterns.length === 0` AND `grepTerms.length === 0`, set `shouldInclude = true`.
              *   **Glob Matching (only if not default-included):**
                  *   If `!shouldInclude` and `globPatterns.length > 0`:
                      *   Check if *any* `relativeSourceFile` in `relativeSourceFiles` matches *any* pattern in `globPatterns` using `micromatch.isMatch(relativeSourceFile, pattern)`.
                      *   If a match is found, set `shouldInclude = true`.
              *   **Grep Matching (only if not default-included or glob-included):**
                  *   If `!shouldInclude` and `grepTerms.length > 0`:
                      *   Use a `for...of` loop to iterate through `activeSourceFiles` (absolute paths) to allow early exit.
                      *   Inside the source file loop:
                          *   Try to read the content: `const content = await Bun.file(absoluteSourceFilePath).text();`. Handle potential read errors gracefully (e.g., log and continue to the next file).
                          *   Check if `content` (lowercase) contains *any* term in `grepTerms` (also lowercase). Perform a **case-insensitive** search.
                          *   If a match is found, set `shouldInclude = true` and `break` the source file loop (found a match for this `mdcFile`).
                      *   *(Ensure the outer loop checking `mdcFiles` continues even if one grep fails)*
          7.  If `shouldInclude` is true, add the `mdcFile` to the
          `includedMdcFiles` array.

          8.  After the loop, return `includedMdcFiles`.
        done: false
      - prompt: >
          Add/Update tests for the `filterMdcFiles` function in
          `src/rmfilter/mdc.test.ts`.


          1.  Set up mock `MdcFile` objects with different combinations of
          `globs` and `grep` fields, including cases with neither.

          2.  Define sample `activeSourceFiles` (absolute paths) and the
          corresponding `gitRoot`.

          3.  Use `Bun.write` to create mock source files with specific content
          for testing the `grep` functionality. Clean up afterwards.

          4.  Test Scenarios:
              *   **Default Inclusion:** MDC included because it has *no* `globs` and *no* `grep` fields.
              *   Glob Match: MDC included because its `globs` match an active source file (relative path).
              *   Grep Match: MDC included because its `grep` term (case-insensitively) is found in an active source file's content (read via `Bun.file`).
              *   Glob takes precedence: MDC included by glob match, even if grep *doesn't* match.
              *   Grep match when glob doesn't: MDC included by grep match when its globs *don't* match.
              *   MDC *not* included because it has `globs` or `grep` defined, but neither match.
              *   Test with multiple MDC files (some default, some glob, some grep, some non-matching).
              *   Test with multiple active source files.
              *   Test array format for `globs` and `grep`.
              *   Test edge cases: empty `activeSourceFiles`, empty `mdcFiles`.
              *   Verify relative path conversion and matching works correctly (e.g., with files in subdirectories).
        done: false
  - title: 3. Update Output Formatting for Docs and Rules
    description: Modify `getAdditionalDocs` to accept processed MDC files and
      generate the output using the new `<documents>` and `<rules>` XML
      structure. Ensure existing `--docs` and `--rules` flags still work and use
      the new format.
    files:
      - src/rmfilter/additional_docs.ts
      - src/rmfilter/mdc.ts
    steps:
      - prompt: >
          Modify the `getAdditionalDocs` function in
          `src/rmfilter/additional_docs.ts`.


          1.  Import the `MdcFile` type from `./mdc.ts`.

          2.  Update the function signature to accept an optional array of
          filtered MDC files:
              ```typescript
              export async function getAdditionalDocs(
                baseDir: string,
                values: {
                  instructions?: string[];
                  instruction?: string[];
                  docs?: string[];
                  rules?: string[];
                  'omit-cursorrules'?: boolean;
                  'omit-instructions-tag'?: boolean;
                },
                filteredMdcFiles: MdcFile[] = [] // Add this new parameter
              )
              ```
          3.  **Refactor Docs Processing:**
              *   Rename the existing `docsTag` variable (e.g., to `docsOutputTag`).
              *   Rename the `docsContent` array (e.g., to `manualDocsContent`). Keep the existing logic that processes `values.docs` using `glob` and reads file contents (using `Bun.file`) into `manualDocsContent`.
              *   Initialize a new array `allDocumentsData: { content: string; description?: string }[] = []`.
              *   Populate `allDocumentsData` from `manualDocsContent`. Each item will just have the `content`.
              *   Iterate through `filteredMdcFiles`. If an `mdcFile.data.type` is 'docs' (case-insensitive check), or if `type` is missing/undefined, add an object `{ content: mdcFile.content, description: mdcFile.data.description }` to `allDocumentsData`. **Default to 'docs' if type is missing.**
              *   If `allDocumentsData` is not empty:
                  *   Map `allDocumentsData` to create individual `<document>` tags. If `description` exists, add it as an attribute: `<document description="description text here">`. Escape the description attribute value properly for XML. Wrap the `content` within the tag. Ensure content is wrapped in CDATA if it might contain XML-invalid characters: `<document><![CDATA[...content...]]></document>`.
                  *   Join these `<document>` tags with newlines.
                  *   Wrap the joined tags in a `<documents>` parent tag.
                  *   Assign the final string to `docsOutputTag`.
              *   If `allDocumentsData` is empty, set `docsOutputTag = ''`.

          4.  **Refactor Rules Processing:**
              *   Rename the existing `rulesTag` variable (e.g., to `rulesOutputTag`).
              *   Rename the `rulesContent` array (e.g., to `manualRulesContent`). Keep the existing logic that processes `values.rules` and `.cursorrules` (if not omitted) into `manualRulesContent`, reading files with `Bun.file`.
              *   Initialize a new array `allRulesData: { content: string; description?: string }[] = []`.
              *   Populate `allRulesData` from `manualRulesContent`. Each item will just have the `content`.
              *   Iterate through `filteredMdcFiles`. If an `mdcFile.data.type` is 'rules' (case-insensitive check), add an object `{ content: mdcFile.content, description: mdcFile.data.description }` to `allRulesData`.
              *   If `allRulesData` is not empty:
                  *   Map `allRulesData` to create individual `<rule>` tags, adding the `description` attribute if present (escape it). Wrap the `content` within the tag, potentially using CDATA: `<rule><![CDATA[...content...]]></rule>`.
                  *   Join these `<rule>` tags with newlines.
                  *   Wrap the joined tags in a `<rules>` parent tag.
                  *   Assign the final string to `rulesOutputTag`.
              *   If `allRulesData` is empty, set `rulesOutputTag = ''`.

          5.  Update the return statement to use the renamed variables: `return
          { docsTag: docsOutputTag, instructionsTag, rulesTag: rulesOutputTag,
          rawInstructions };`
        done: false
      - prompt: >
          Update the tests for `getAdditionalDocs` in
          `src/rmfilter/additional_docs.test.ts` (if it exists, otherwise
          consider adding basic tests).


          1.  Modify existing tests or add new ones to verify the new output
          format for `--docs` and `--rules`.
              *   Ensure output uses `<documents><document><![CDATA[...]]></document></documents>`.
              *   Ensure output uses `<rules><rule><![CDATA[...]]></rule></rules>`.
              *   Test escaping of the `description` attribute.
          2.  Add tests specifically for the integration of `filteredMdcFiles`:
              *   Pass mock `MdcFile` objects with `type: 'docs'` and `description`. Verify they appear correctly formatted within the `<documents>` tag, including the `description` attribute and CDATA content.
              *   Pass mock `MdcFile` objects with `type: 'rules'` and `description`. Verify they appear correctly formatted within the `<rules>` tag.
              *   Test MDC files with missing `type` (should default to 'docs').
              *   Test MDC files with missing `description`.
              *   Test the case where both manual `--docs`/`--rules` files AND matching MDC files are present; ensure all are included in the correct format.
              *   Test the case where `filteredMdcFiles` is empty or undefined.
        done: false
  - title: 4. Integrate MDC Processing into Main Workflow
    description: Modify `rmfilter.ts` to orchestrate the MDC discovery, parsing,
      filtering, and integration with the final output generation, respecting
      the `--no-mdc` flag.
    files:
      - src/rmfilter/rmfilter.ts
      - src/rmfilter/mdc.ts
      - src/rmfilter/additional_docs.ts
      - src/rmfilter/config.ts
      - src/rmfilter/utils.ts
    steps:
      - prompt: >
          Modify the main execution logic in `src/rmfilter/rmfilter.ts`.


          1.  Import the necessary functions from `./mdc.ts`: `findMdcFiles`,
          `parseMdcFile`, `filterMdcFiles`, and the `MdcFile` type.

          2.  After the `allFilesSet` (containing relative paths) and `gitRoot`
          have been determined, and *before* calling the `Promise.all` that
          includes `getAdditionalDocs`:
              *   Initialize `let filteredMdcFiles: MdcFile[] = [];`.
              *   Check the `globalValues['no-mdc']` flag. If it's **false** (or undefined):
                  *   Call `const mdcFilePaths = await findMdcFiles(gitRoot);`
                  *   Use `Promise.all` to map over `mdcFilePaths` and call `parseMdcFile(filePath)` for each. Filter out any `null` results (parsing errors). Store this in `const parsedMdcFiles`.
                  *   Convert the `allFilesSet` (which contains relative paths) into an array of *absolute* paths (`const absoluteSourceFiles = Array.from(allFilesSet, p => path.resolve(gitRoot, p))`). Handle potential errors if `gitRoot` isn't properly determined, though prior logic should ensure it is.
                  *   Call `filteredMdcFiles = await filterMdcFiles(parsedMdcFiles, absoluteSourceFiles, gitRoot);` to get the final list of MDC files to include.
              *   *(If `globalValues['no-mdc']` is true, `filteredMdcFiles` remains empty)*.
          3.  Modify the call to `getAdditionalDocs` within the main
          `Promise.all`: Pass the `filteredMdcFiles` array as the third
          argument:
              ```typescript
               const [
                   { docsTag, instructionsTag, rulesTag, rawInstructions },
                   { diffTag, changedFiles },
                   examplesTag // Ensure buildExamplesTag is also awaited if moved into Promise.all
               ] = await Promise.all([
                   // Pass filteredMdcFiles here
                   getAdditionalDocs(baseDir, {
                       ...globalValues,
                       instructions: (globalValues.instructions || []).concat(editorInstructions),
                   }, filteredMdcFiles), // <--- Pass filteredMdcFiles here
                   getDiffTag(gitRoot, globalValues),
                   buildExamplesTag(allExamples),
               ]);
              ```
              *Make sure the destructuring matches the return value of the modified `getAdditionalDocs` and the order within `Promise.all`.*

          4.  Ensure the rest of the script proceeds as normal, using the
          potentially updated `docsTag` and `rulesTag` content when assembling
          `finalOutput`.
        done: false
