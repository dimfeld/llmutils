---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Write a comprehensive test suite for the state machine functionality in
  `dimfeld/llmutils`, ensuring robustness, correctness, and observability of the
  `StateMachine`, `Node`, `FlowNode`, and `SharedStore` components.
id: 13
uuid: 2d0648a7-92fd-452c-8295-fc0f4b273288
status: done
updatedAt: 2025-10-27T08:39:04.211Z
tasks:
  - title: 1. Setup Test Environment and `SharedStore` Context/Scratchpad Tests
    done: true
    description: >
      This task focuses on setting up the testing environment (assuming Jest)
      and writing the first set of unit tests for the `SharedStore` class. These
      initial tests will cover context and scratchpad management. A mock
      `PersistenceAdapter` will also be defined for use in `SharedStore` tests.
  - title: 2. `SharedStore` Event Queue and History Tests
    done: true
    description: >
      This task continues testing `SharedStore` by focusing on its event queue
      management (`enqueueEvents`, `processEvents`, `getPendingEvents`,
      `dequeueEvent`) and history/tracing features (`logTransition`,
      `getCurrentState`, `setCurrentState`, `getExecutionTrace`, `exportTrace`).
  - title: 3. `SharedStore` Persistence, Rollback, and Retry Tests
    done: true
    description: >
      This task tests `SharedStore`'s persistence capabilities using the mock
      adapter, and its `withRollback` and `retry` mechanisms. This will also
      involve checking that telemetry calls (mocked for now) within these
      methods are made.
  - title: 4. `telemetry.ts` Utility Function Tests and Basic Telemetry Setup
    done: true
    description: >
      This task involves writing unit tests for utility functions in
      `src/state_machine/telemetry.ts` like `flattenAttributes`,
      `objectToSpanAttributeValues`, and `toSpanAttributeValue`. It also
      includes setting up the actual OpenTelemetry SDK with an
      `InMemorySpanExporter` for more comprehensive telemetry testing in later
      tasks, instead of relying solely on mocks for `withSpan`.
  - title: 5. Basic `Node` Tests (Lifecycle and Error Handling)
    done: true
    description: >
      This task focuses on testing the abstract `Node` class. Since `Node` is
      abstract, we'll need to create a concrete implementation for testing.
      Tests will cover the `run` method, including the `prep`, `exec`, `post`
      lifecycle, error handling, and interactions with`SharedStore` (retry,
      rollback). We will also start using the telemetry test setup from Task 4
      to verify spans created by `Node.run`.
  - title: 6. `StateMachine` Initialization and Basic Transitions
    done: true
    description: >
      This task begins testing the `StateMachine` class. It covers
      initialization, loading persisted state (using a mock adapter), and
      processing a single event that leads to a simple state transition. We'll
      verify state changes, context updates, and basic telemetry.
  - title: 7. `StateMachine` Event Handling, Multiple Transitions, and Terminal States
    done: true
    description: >
      This task expands `StateMachine` tests to cover scenarios with multiple
      events, sequences of transitions, and handling of `waiting` and `terminal`
      state results.
  - title: 8. `StateMachine` Error Handling and Retries
    done: true
    description: >
      This task focuses on testing the `StateMachine`'s error handling
      capabilities. This includes errors originating from nodes, node-specific
      `onError` handlers, machine-level `config.onError` handlers, transitions
      to the configured `errorState`, and the retry mechanism defined in
      `StateMachineConfig`.
  - title: 9. `StateMachine` Persistence Integration
    done: true
    description: >
      This task tests the integration of persistence with the `StateMachine`. It
      involves verifying that the state is correctly saved to (and loaded from)
      the `PersistenceAdapter` during the state machine's lifecycle.
  - title: 10. `StateMachine` Hooks
    done: true
    description: >
      This task is dedicated to testing the various hooks provided by
      `StateMachine`: `onTransition`, `onActions` (if its TODO is resolved or
      testing current behavior), `onError`, and `onRetry`.
  - title: 11. `FlowNode` Tests and Integration
    done: true
    description: >
      This task tests the `FlowNode` class, which manages a nested state
      machine. Tests will cover event/action translation, sub-machine execution,
      persistence of sub-machine state in the scratchpad, and integration of
      `FlowNode` within a parent `StateMachine`.
  - title: 12. Advanced Telemetry Verification
    done: true
    description: >
      Using the OpenTelemetry SDK setup with `InMemorySpanExporter` (from Task
      4), this task focuses on performing more detailed verification of emitted
      spans, attributes, and events across `StateMachine`, `Node`, and
      `SharedStore` operations.
  - title: 13. Documentation Update
    done: true
    description: >
      Update `src/state_machine/README.md` to include information about the
      newly created test suite, how to run the tests, and any other relevant
      details for developers regarding testing the state machine functionality.
---

The project aims to create a suite of unit and integration tests using a test-driven development (TDD) approach. The tests will cover all major aspects of the state machine:
- Core logic of `SharedStore` (context, scratchpad, events, history, persistence, rollback, retry).
- `Node` lifecycle (`prep`, `exec`, `post`), error handling, and interaction with `SharedStore`.
- `FlowNode` behavior, including sub-machine management and event/action translation.
- `StateMachine` operations: initialization, event processing, state transitions, error handling, retries, persistence integration, and hooks.
- Telemetry generation: ensuring correct spans, attributes, and events are emitted for observability.

We will use Jest (or a similar testing framework) and create mocks for external dependencies like the `PersistenceAdapter`. For telemetry, we will leverage the `@opentelemetry/sdk-trace-base` with an `InMemorySpanExporter` to capture and verify emitted telemetry data. The tests will be broken down into small, incremental tasks, building upon each other to achieve full coverage.
