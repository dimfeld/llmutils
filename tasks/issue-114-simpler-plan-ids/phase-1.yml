# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Core Numeric ID Implementation
goal: Implement the core functionality for generating, storing, and resolving
  numeric plan IDs, and update the `rmplan add` command to use this new system.
  Plan filenames will be changed to `[ID].yml`.
details: This phase focuses on establishing the foundation for numeric IDs. We
  will modify ID generation to be sequential, ensure plans are read and written
  with numeric IDs, and adapt the `add` command. Existing alphanumeric IDs will
  need to be handled gracefully during the transition, though new plans will
  exclusively use numeric IDs.
id: 1rkuwy1-1
status: in_progress
dependencies: []
planGeneratedAt: 2025-06-04T07:59:19.941Z
promptsGeneratedAt: 2025-06-04T08:07:12.449Z
createdAt: 2025-06-04T07:59:19.941Z
updatedAt: 2025-06-04T08:10:03.161Z
project:
  title: Implement Simpler Numeric Plan IDs and Enhanced Multiphase Plan Handling
  goal: Transition the `rmplan` system from autogenerated alphanumeric plan IDs to
    simpler, sequential numeric IDs, implement automatic conflict resolution for
    these IDs, and revise multiphase plan processing to save each task as an
    individual plan.
  details: >
    This project aims to improve the usability and robustness of plan
    identification within `rmplan`.

    Key changes include:

    1.  **Numeric Plan IDs:** New plans will receive numeric IDs, incrementing
    from the highest existing ID (e.g., if max ID is 100, new ID is 101). Plan
    filenames will be `[ID].yml`.

    2.  **ID Conflict Resolution:** When duplicate numeric IDs are detected
    (e.g., after a git merge), conflicts will be automatically resolved by
    re-assigning IDs to the plans with later creation/modification timestamps.

    3.  **Multiphase Plan Task Separation:** When processing LLM-generated plans
    that have a multiphase structure, each task within those phases will be
    saved as a distinct, individual plan file with its own numeric ID.


    This refactor will touch ID generation, plan storage, plan resolution, and
    how multiphase plans are processed and saved.
tasks:
  - title: Update Plan Schema for Numeric IDs
    description: "Modify `planSchema.ts` to define the `id` field as a number or
      string. This ensures that parsed YAML will treat numeric IDs numerically,
      and `yaml.stringify` will output them as numbers (e.g., `id: 123`), while
      still allowing string IDs for older plans."
    files:
      - src/rmplan/planSchema.ts
      - src/rmplan/plans.test.ts
    steps:
      - prompt: >
          In `src/rmplan/planSchema.ts`, modify the `id` field within
          `phaseSchema` (which is also exported as `planSchema`).

          Change its type from `z.string().optional()` to
          `z.union([z.number().int().positive(), z.string()]).optional()`.

          This will allow the `id` to be either a positive integer or a string,
          or be absent.
        done: true
      - prompt: >
          Add a new test suite to `src/rmplan/plans.test.ts` specifically for
          schema validation or plan serialization.

          Include a test case that:

          1. Creates a `PlanSchema` object with a numeric `id` (e.g., `id:
          123`).

          2. Serializes this object to YAML using `yaml.stringify()`.

          3. Verifies that the output YAML string contains `id: 123` (the
          number, not `"123"`).

          4. Parses a YAML string `id: 456` using `yaml.parse()` and then
          `planSchema.parse()`.

          5. Verifies that the parsed `id` field is the number `456`.

          Include similar tests for string IDs to ensure they are still handled
          correctly.
        done: true
  - title: Implement Maximum Numeric ID Discovery
    description: Enhance `readAllPlans` function in `src/rmplan/plans.ts` to parse
      numeric IDs from plan files and identify the maximum existing numeric ID.
      This function must gracefully handle older plans with non-numeric or
      missing IDs. The `PlanSummary` type and the returned map key type will
      also need adjustment.
    files:
      - src/rmplan/plans.ts
      - src/rmplan/plans.test.ts
    steps:
      - prompt: >
          In `src/rmplan/plans.ts`, modify the `PlanSummary` type. Change the
          `id` field from `string` to `string | number`.
        done: false
      - prompt: >
          Update the `readAllPlans` function in `src/rmplan/plans.ts`.

          The function should now return an object: `Promise<{ plans: Map<string
          | number, PlanSummary>; maxNumericId: number }>`.

          - When reading each plan file and parsing its `id` (which can now be a
          number or a string):
            - If the `id` is numeric, use the number as the key in the `plans` map and store it as a number in `PlanSummary.id`.
            - If the `id` is a string, use the string as the key and store it as a string in `PlanSummary.id`.
            - If a plan has no `id`, it should continue to be skipped (not added to the map).
          - Iterate through all parsed plan IDs. If an ID is numeric, consider
          it for calculating the maximum numeric ID.

          - Initialize `maxNumericId` to 0. Update it if a larger numeric ID is
          found.

          - Non-numeric IDs or plans without IDs should be ignored for the
          `maxNumericId` calculation.
        done: false
      - prompt: >
          In `src/rmplan/plans.test.ts`, update existing tests for
          `readAllPlans` or add new ones to verify the new return structure and
          `maxNumericId` calculation.

          - Test with a directory containing a mix of plans:
            - Plans with numeric IDs (e.g., `id: 100`, `id: 50`).
            - Plans with string IDs (e.g., `id: "old-plan"`).
            - Plans with no `id` field.
            - An empty plan file or invalid YAML (should be handled gracefully).
          - Verify that `maxNumericId` correctly reflects the highest numeric ID
          found (e.g., 100).

          - Verify that the `plans` map contains entries keyed by their actual
          ID (number or string) and `PlanSummary.id` has the correct type.

          - Test with a directory containing only plans with string IDs or no
          IDs (maxNumericId should be 0).

          - Test with an empty directory (maxNumericId should be 0, plans map
          should be empty).
        done: false
  - title: Create Numeric ID Generator
    description: In `src/rmplan/id_utils.ts`, create a new function
      `generateNumericPlanId()`. This function will use the mechanism developed
      in Task 2 to determine the current maximum numeric ID and return `maxId +
      1`. The existing `generateProjectId` will be updated/renamed.
    files:
      - src/rmplan/id_utils.ts
      - src/rmplan/id_utils.test.ts
      - src/rmplan/plans.ts
    steps:
      - prompt: >
          In `src/rmplan/plans.ts`, create a new exported helper function `async
          function getMaxNumericPlanId(tasksDir: string): Promise<number>`.

          This function should call `readAllPlans(tasksDir)` and return the
          `maxNumericId` from the result.
        done: false
      - prompt: >
          In `src/rmplan/id_utils.ts`, rename the existing `generateProjectId`
          function to `generateAlphanumericPlanId`. Update its callers if any
          are critical for this phase (though it's being phased out).
        done: false
      - prompt: >
          In `src/rmplan/id_utils.ts`, create a new exported async function
          `generateNumericPlanId(tasksDir: string): Promise<number>`.

          This function should call the `getMaxNumericPlanId(tasksDir)` helper
          from `plans.ts`.

          It should then return `maxId + 1`.
        done: false
      - prompt: >
          In `src/rmplan/id_utils.test.ts`, add a new test suite for
          `generateNumericPlanId`.

          - Use a temporary directory with mock plan files (e.g., `1.yml` with
          `id: 1`, `100.yml` with `id: 100`, `old.yml` with `id: "abc"`).

          - Test `generateNumericPlanId` against this directory and assert it
          returns the correct next ID (e.g., 101).

          - Test with an empty `tasksDir` (should return 1).

          - Test with a `tasksDir` containing only plans with non-numeric IDs
          (should return 1).
        done: false
  - title: Update `rmplan add` Command for Numeric IDs
    description: Modify the `rmplan add` command in `src/rmplan/rmplan.ts` to use
      the new numeric ID system. It will assign a sequential numeric ID, save
      the plan with this ID in its content, and name the file `[ID].yml`.
    files:
      - src/rmplan/rmplan.ts
      - src/rmplan/workspace/workspace_add.test.ts
    steps:
      - prompt: >
          In `src/rmplan/rmplan.ts`, within the `rmplan add` command handler:

          - Replace the call to `generateProjectId()` (now
          `generateAlphanumericPlanId()`) with a call to the new
          `generateNumericPlanId(targetDir)` to obtain the numeric ID.

          - Ensure the `plan.id` field in the `PlanSchema` object being created
          is set to this numeric ID.
        done: false
      - prompt: >
          Still in the `rmplan add` command handler in `src/rmplan/rmplan.ts`:

          - Modify the plan filename generation. Instead of using
          `slugify(planTitle)`, the filename should be `\${numericId}.yml`
          (e.g., `101.yml`).

          - The plan's `title` will now only be stored inside the YAML content.
        done: false
      - prompt: >
          Update tests for the `rmplan add` command, likely in
          `src/rmplan/workspace/workspace_add.test.ts` or a relevant test file
          for `rmplan` commands.

          - Verify that running `rmplan add "Test Title"` creates a plan file
          named like `[ID].yml` (e.g., `1.yml` if no plans exist, or `101.yml`
          if max ID was 100).

          - Verify that the content of the created YAML file includes the
          correct numeric `id` (e.g., `id: 101`).

          - Ensure the title is correctly stored within the YAML.
        done: false
  - title: Adapt Plan Resolution for Numeric IDs and Filenames
    description: Update `resolvePlanFile` in `src/rmplan/plans.ts` to correctly
      resolve plans by numeric ID and new `[ID].yml` filenames, while
      maintaining compatibility with older alphanumeric IDs and filenames.
    files:
      - src/rmplan/plans.ts
      - src/rmplan/plans.test.ts
    steps:
      - prompt: >
          Modify `resolvePlanFile` in `src/rmplan/plans.ts`.

          The resolution logic should be:

          1. Attempt to resolve `planArg` as a direct file path (absolute or
          relative using `path.resolve` and `fs.stat`). If it exists, return its
          absolute path.

          2. If not a direct file path, determine the `tasksDir` using
          `loadEffectiveConfig` and `getGitRoot`.

          3. Try to parse `planArg` as an integer. If successful (let's call it
          `numericPlanArg`):
             a. Construct `potentialPath = path.join(tasksDir, \`\${numericPlanArg}.yml\`)`.
             b. Check if `potentialPath` exists. If yes, return it.
          4. If not found yet, call `readAllPlans(tasksDir)` to get the `plans`
          map (which is `Map<string | number, PlanSummary>`).
             a. If `numericPlanArg` was successfully parsed, try `plans.get(numericPlanArg)`. If a plan is found, return `plan.filename`.
             b. If `planArg` could not be parsed as a number, or if the numeric lookup failed, try `plans.get(planArg)` (treating `planArg` as a string). If a plan is found, return `plan.filename`.
          5. If no plan is found after all checks, throw an error.
        done: false
      - prompt: >
          In `src/rmplan/plans.test.ts`, update or add tests for
          `resolvePlanFile` to cover various scenarios:

          - Resolving by a numeric string ID (e.g., `"101"`) that corresponds to
          an existing `101.yml` file.

          - Resolving by a numeric string ID (e.g., `"102"`) where `102.yml`
          does not exist, but another file (e.g., `my-plan.yml`) contains `id:
          102`.

          - Resolving by providing the direct filename `103.yml`.

          - Resolving older plans by their string ID (e.g., `"alpha-plan-id"`)
          contained within a file like `old-plan.yml`.

          - Resolving older plans by their direct filename (e.g.,
          `old-plan.yml`).

          - Ensure it throws an error if the plan ID or filename cannot be
          resolved.
        done: false
  - title: Add Basic Tests for Numeric IDs
    description: "Create new tests or augment existing ones to specifically verify
      the core numeric ID functionality: sequential generation, `rmplan add`
      behavior, and `resolvePlanFile` accuracy with new ID types and filenames."
    files:
      - src/rmplan/id_utils.test.ts
      - src/rmplan/rmplan.test.ts
      - src/rmplan/plans.test.ts
    steps:
      - prompt: >
          In `src/rmplan/id_utils.test.ts`, ensure the test suite for
          `generateNumericPlanId` (created in Task 3) thoroughly covers:

          - Generating an ID when the tasks directory is empty (should start
          from 1).

          - Generating an ID when the tasks directory contains only plans with
          non-numeric (string) IDs (should start from 1).

          - Generating an ID when there are existing numeric IDs (e.g., if max
          is 5, next should be 6).

          - Handling of plan files with mixed ID types (numeric, string, none)
          correctly for max ID calculation.

          Use a temporary directory with sample plan files for these tests.
        done: false
      - prompt: >
          In the test file for `rmplan add` (e.g.,
          `src/rmplan/workspace/workspace_add.test.ts` or a new
          `src/rmplan/rmplan.test.ts`):

          - Add a test case that simulates running `rmplan add "My New Plan"`.

          - Before running, set up a temporary tasks directory. Optionally,
          pre-populate it with a plan file like `100.yml` (containing `id:
          100`).

          - After running the command, verify that a new file (e.g., `101.yml`)
          is created in the tasks directory.

          - Read this new file and assert that its `id` field is the correct
          numeric value (e.g., `101`) and its `title` is "My New Plan".
        done: false
      - prompt: >
          In `src/rmplan/plans.test.ts`, review and augment tests for
          `resolvePlanFile` (as started in Task 5) to ensure comprehensive
          coverage:

          - Resolving by numeric ID string (e.g., "123") when `123.yml` exists.

          - Resolving by numeric ID string (e.g., "123") when `123.yml` does NOT
          exist but another file (e.g., `legacy-name.yml`) contains `id: 123`.

          - Resolving by directly providing the filename `[ID].yml` (e.g.,
          `123.yml`).

          - Confirm that resolution of older plans by their string ID (e.g.,
          "old-id") and by their alphanumeric filename (e.g.,
          `old-plan-file.yml`) still works.

          - Test edge cases like providing a planArg that is numeric but no
          corresponding plan exists.
        done: false
changedFiles:
  - src/rmplan/planSchema.ts
  - src/rmplan/plans.test.ts
rmfilter:
  - src/rmplan
  - src/common
