# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Multiphase Plan Task Separation
goal: Revise the processing of LLM-generated multiphase plans so that each task
  within any phase is saved as an individual, separate plan file with its own
  unique numeric ID.
details: When `rmplan extract` (or other commands processing LLM output that
  resembles a multiphase plan) encounters such a structure, it will no longer
  save phase-level files. Instead, it will iterate through all tasks across all
  phases and create a distinct plan file for each task.
id: 1rkuwy1-3
status: pending
dependencies:
  - 1rkuwy1-1
planGeneratedAt: 2025-06-04T07:59:19.941Z
createdAt: 2025-06-04T07:59:19.941Z
updatedAt: 2025-06-04T07:59:19.941Z
project:
  title: Implement Simpler Numeric Plan IDs and Enhanced Multiphase Plan Handling
  goal: Transition the `rmplan` system from autogenerated alphanumeric plan IDs to
    simpler, sequential numeric IDs, implement automatic conflict resolution for
    these IDs, and revise multiphase plan processing to save each task as an
    individual plan.
  details: >
    This project aims to improve the usability and robustness of plan
    identification within `rmplan`.

    Key changes include:

    1.  **Numeric Plan IDs:** New plans will receive numeric IDs, incrementing
    from the highest existing ID (e.g., if max ID is 100, new ID is 101). Plan
    filenames will be `[ID].yml`.

    2.  **ID Conflict Resolution:** When duplicate numeric IDs are detected
    (e.g., after a git merge), conflicts will be automatically resolved by
    re-assigning IDs to the plans with later creation/modification timestamps.

    3.  **Multiphase Plan Task Separation:** When processing LLM-generated plans
    that have a multiphase structure, each task within those phases will be
    saved as a distinct, individual plan file with its own numeric ID.


    This refactor will touch ID generation, plan storage, plan resolution, and
    how multiphase plans are processed and saved.
tasks:
  - title: Adapt `extractMarkdownToYaml` for Multiphase Structures
    description: "Modify `extractMarkdownToYaml` in
      `src/rmplan/process_markdown.ts`. When the parsed LLM output (from
      `convertMarkdownToYaml`) is identified as a multiphase plan (e.g.,
      `parsedYaml.phases` array exists): - It should iterate through each phase
      in `parsedYaml.phases`. - Then, iterate through each `task` within that
      phase. - For each such `task`, it will orchestrate the creation of an
      individual plan file as described in the following tasks."
    files: []
    steps: []
  - title: Implement Individual Task-Plan Creation Logic
    description: >
      For each task extracted from the multiphase structure:

      - A new `PlanSchema` object will be created.

      - **ID Assignment:** Assign a unique numeric ID using
      `generateNumericPlanId()`.

      - **Content Population:**
          - `title`: Formulate a descriptive title, possibly combining overall project title, phase title, and task title (e.g., "Project X - Phase Y - Task Z").
          - `goal`: Set to the original task's `title`.
          - `details`: Set to the original task's `description`.
          - `project`: Populate with the `title`, `goal`, and `details` from the top-level of the multiphase LLM output.
          - `tasks`: This array in the new plan will contain a single task object. This object will encapsulate the `files` and `steps` from the original task in the multiphase structure.
      - **Metadata:** Set `createdAt`, `updatedAt`, `planGeneratedAt`,
      `promptsGeneratedAt` timestamps. Default `status` to `pending`.

      - **Dependencies:**
          - Initial simple approach: If the multiphase LLM output defines dependencies between phases (e.g., Phase 2 depends on Phase 1), then all task-plans generated from Phase 2 will depend on all task-plans generated from Phase 1.
          - Task-plans generated from tasks within the same original phase can be made to depend on the preceding task-plan from that same phase to enforce sequence.
          - This requires careful mapping of original task positions to new numeric plan IDs.
    files: []
    steps: []
  - title: Save Individual Task-Plans
    description: Each newly created task-plan object (from Task 2) must be saved as
      a separate YAML file named `[ID].yml` in the configured tasks directory
      using the `writePlanFile` function.
    files: []
    steps: []
  - title: Update `rmplan split` Command (If Applicable)
    description: Review the `rmplan split` command. If it relies on
      `saveMultiPhaseYaml` or similar logic that produces phase-level files, it
      needs to be updated to use or trigger the new task-separation logic,
      ensuring its output is a set of individual task-plans.
    files: []
    steps: []
  - title: Test Multiphase Plan Extraction and Saving
    description: "Create tests for `rmplan extract` (and `rmplan split` if
      modified): - Provide Markdown input that represents a multiphase plan. -
      Verify that the correct number of individual task-plan files are created.
      - Check that each task-plan file (`[ID].yml`) has the correct numeric ID,
      content (derived from the original task), project context, and dependency
      links."
    files: []
    steps: []
rmfilter:
  - src/rmplan
  - src/common
