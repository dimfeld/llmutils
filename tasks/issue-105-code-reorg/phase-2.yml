# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Consolidate Common Utilities and Refine Module Boundaries
goal: Streamline dependencies across `rmfilter`, `rmpr`, `rmplan`, and `common`
  modules by consolidating shared utilities and clarifying module
  responsibilities, leading to a more modular and maintainable codebase.
details: This phase addresses the broader code organization. It involves
  analyzing how `rmfilter`, `rmpr`, and the newly refactored `rmplan` interact
  with `src/common/` and with each other. The aim is to ensure `src/common/`
  houses truly common code, move misplaced utilities, and refactor inter-module
  dependencies for better separation of concerns.
id: 1rm0j7j-2
status: pending
dependencies:
  - 1rm0j7j-1
planGeneratedAt: 2025-06-04T08:24:18.885Z
createdAt: 2025-06-04T08:24:18.885Z
updatedAt: 2025-06-04T08:24:18.885Z
project:
  title: Refactor codebase to improve modularity and reorganize `rmplan` by
    command functionality
  goal: The primary goal of this project is to reorganize the `dimfeld/llmutils`
    codebase to enhance modularity and maintainability. This involves
    refactoring code along functionality boundaries to reduce inter-directory
    coupling and reorganizing the `rmplan` directory for better clarity by
    structuring its code per command.
  details: >-
    The current codebase has dependencies and interactions between modules like
    `rmfilter`, `rmplan`, and `rmpr` that have become unwieldy. This project
    aims to:

    1. Reorganize the `rmplan` module by creating separate files for each of its
    sub-commands, improving its internal structure.

    2. Analyze and refactor dependencies between `rmfilter`, `rmplan`, `rmpr`,
    and `common` modules. This includes consolidating shared utilities into
    `src/common/` or more specific common modules, and ensuring that
    interactions between the main feature modules (`rmfilter`, `rmplan`, `rmpr`)
    are clean and well-defined.

    The project will be broken into phases to manage complexity and ensure
    incremental progress with continuous testing.
tasks:
  - title: Consolidate Git Utilities
    description: Review Git-related functions currently in `src/rmfilter/utils.ts`
      and `src/rmpr/git_utils.ts`. Move general Git functionalities (e.g.,
      `getGitRoot`, `getCurrentBranchName`, `hasUncommittedChanges`) into a new
      or existing dedicated module within `src/common/` (e.g.,
      `src/common/git.ts`). Update `rmfilter` and `rmpr` to use these common Git
      utilities.
    files: []
    steps: []
  - title: Consolidate File System Utilities
    description: Review `src/rmfilter/utils.ts` and other modules for
      general-purpose file system utilities (e.g., `validatePath`,
      `secureWrite`, `secureRm`). Move these to a dedicated common module (e.g.,
      `src/common/fs.ts`). Update dependent modules.
    files: []
    steps: []
  - title: Consolidate CLI and Process Utilities
    description: Review `src/rmfilter/utils.ts` for CLI argument parsing
      (`parseCliArgsFromString`) and process spawning utilities (`logSpawn`,
      `spawnAndLogOutput`). Relocate these to appropriate common modules (e.g.,
      `src/common/cli.ts`, `src/common/process.ts`). Update dependent modules.
    files: []
    steps: []
  - title: Review and Relocate `src/common/` Utilities
    description: Examine each utility within `src/common/`. If a utility is
      exclusively used by a single module (`rmfilter`, `rmpr`, or `rmplan`),
      move it into that module's local utility collection.
    files: []
    steps: []
  - title: Refactor `rmfilter`'s Cross-Module Dependencies
    description: Analyze how `rmfilter` interacts with `rmplan` and `rmpr`. If
      `rmfilter` depends on internal logic from these modules, refactor these
      dependencies. Options include moving the shared logic to `src/common/`, or
      defining clear public APIs in `rmplan`/`rmpr` for `rmfilter` to consume.
    files: []
    steps: []
  - title: Update All Cross-Module Imports
    description: After reorganizing utilities and refactoring dependencies, update
      all import statements across the `src/common/`, `src/rmfilter/`,
      `src/rmpr/`, and `src/rmplan/` directories to reflect the new code
      structure.
    files: []
    steps: []
  - title: Comprehensive Testing
    description: Execute the entire test suite for the project. Perform manual
      verification of the main functionalities of `rmfilter`, `rmplan`, and
      `rmpr` to ensure the reorganization has not introduced regressions.
    files: []
    steps: []
rmfilter:
  - --
  - src/rmplan
  - src/rmpr
  - src/common
  - src/rmfilter
