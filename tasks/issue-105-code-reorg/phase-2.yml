# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Consolidate Common Utilities and Refine Module Boundaries
goal: Streamline dependencies across `rmfilter`, `rmpr`, `rmplan`, and `common`
  modules by consolidating shared utilities and clarifying module
  responsibilities, leading to a more modular and maintainable codebase.
details: This phase addresses the broader code organization. It involves
  analyzing how `rmfilter`, `rmpr`, and the newly refactored `rmplan` interact
  with `src/common/` and with each other. The aim is to ensure `src/common/`
  houses truly common code, move misplaced utilities, and refactor inter-module
  dependencies for better separation of concerns.
id: 1rm0j7j-2
status: pending
priority: urgent
dependencies:
  - 1rm0j7j-1
planGeneratedAt: 2025-06-04T08:24:18.885Z
promptsGeneratedAt: 2025-06-05T08:01:01.004Z
createdAt: 2025-06-04T08:24:18.885Z
updatedAt: 2025-06-05T08:01:01.004Z
project:
  title: Refactor codebase to improve modularity and reorganize `rmplan` by
    command functionality
  goal: The primary goal of this project is to reorganize the `dimfeld/llmutils`
    codebase to enhance modularity and maintainability. This involves
    refactoring code along functionality boundaries to reduce inter-directory
    coupling and reorganizing the `rmplan` directory for better clarity by
    structuring its code per command.
  details: >-
    The current codebase has dependencies and interactions between modules like
    `rmfilter`, `rmplan`, and `rmpr` that have become unwieldy. This project
    aims to:

    1. Reorganize the `rmplan` module by creating separate files for each of its
    sub-commands, improving its internal structure.

    2. Analyze and refactor dependencies between `rmfilter`, `rmplan`, `rmpr`,
    and `common` modules. This includes consolidating shared utilities into
    `src/common/` or more specific common modules, and ensuring that
    interactions between the main feature modules (`rmfilter`, `rmplan`, `rmpr`)
    are clean and well-defined.

    The project will be broken into phases to manage complexity and ensure
    incremental progress with continuous testing.
tasks:
  - title: Consolidate Git Utilities
    description: Review Git-related functions currently in `src/rmfilter/utils.ts`
      and `src/rmpr/git_utils.ts`. Move general Git functionalities (e.g.,
      `getGitRoot`, `getCurrentBranchName`, `hasUncommittedChanges`) into a new
      dedicated module `src/common/git.ts`. Update `rmfilter`, `rmpr`, and any
      other consumers to use these common Git utilities.
    files:
      - src/common/git.ts
      - src/common/git.test.ts
      - src/rmfilter/utils.ts
      - src/rmfilter/utils.test.ts
      - src/rmpr/git_utils.ts
      - src/rmpr/git_utils.test.ts
      - src/rmpr/main.ts
      - src/rmfilter/rmfilter.ts
      - src/rmfilter/config.ts
      - src/rmfilter/additional_docs.ts
      - src/rmfilter/instructions.ts
      - src/rmplan/commands/agent.ts
      - src/rmplan/actions.ts
      - src/rmplan/executors/one-call.ts
      - src/rmplan/executors/copy_paste.ts
      - src/rmplan/executors/claude_code.ts
      - src/rmplan/process_markdown.ts
      - src/rmplan/commands/add.ts
      - src/rmplan/commands/done.ts
      - src/rmplan/commands/generate.ts
      - src/rmplan/commands/list.ts
      - src/rmplan/commands/next.ts
      - src/rmplan/commands/prepare.ts
      - src/rmplan/commands/show.ts
      - src/rmplan/commands/workspace.ts
      - src/rmplan/configLoader.ts
      - src/rmplan/workspace/workspace_auto_selector.ts
      - src/rmplan/workspace/workspace_manager.ts
      - src/rmplan/cleanup.ts
      - src/common/github/pull_requests.ts
      - src/common/github/identifiers.ts
    steps:
      - prompt: >
          Create the new file `src/common/git.ts` for housing common Git
          utilities.
        done: false
      - prompt: |
          Create a corresponding test file `src/common/git.test.ts`.
        done: false
      - prompt: >
          Locate the `getGitRoot` function in `src/rmfilter/utils.ts`. Move its
          implementation and any related helper functions or cached variables
          (like `cachedGitRoot`) to `src/common/git.ts`.

          Ensure existing tests for `getGitRoot` from
          `src/rmfilter/utils.test.ts` are moved or rewritten in
          `src/common/git.test.ts` to cover its functionality thoroughly.
          Consider edge cases like being outside a Git repository or in a `jj`
          workspace.
        done: false
      - prompt: >
          Locate the `getCurrentBranchName` function in `src/rmpr/git_utils.ts`
          (which itself calls `getCurrentGitBranch` and
          `getCurrentJujutsuBranch`). Move the logic for `getCurrentBranchName`,
          `getCurrentGitBranch`, and `getCurrentJujutsuBranch` to
          `src/common/git.ts`.

          Ensure existing tests for this functionality from
          `src/rmpr/git_utils.test.ts` are moved or rewritten in
          `src/common/git.test.ts`. Test scenarios should include standard Git
          branches, detached HEAD state, and Jujutsu branches.
        done: false
      - prompt: >
          Locate the `hasUncommittedChanges` function in
          `src/rmfilter/utils.ts`. Move its implementation to
          `src/common/git.ts`.

          Ensure existing tests for `hasUncommittedChanges` from
          `src/rmfilter/utils.test.ts` are moved or rewritten in
          `src/common/git.test.ts`. Test with both Git and Jujutsu repositories,
          covering clean states, uncommitted working directory changes, and
          staged changes.
        done: false
      - prompt: >
          Update all import statements for `getGitRoot`, `getCurrentBranchName`
          (and its constituents if they were exported), and
          `hasUncommittedChanges` across the entire codebase (including
          `src/rmfilter`, `src/rmpr`, `src/rmplan`, and other `src/common`
          files) to point to `src/common/git.ts`.
        done: false
      - prompt: >
          Remove the original implementations of the moved Git utility functions
          from `src/rmfilter/utils.ts` and `src/rmpr/git_utils.ts`.

          Clean up `src/rmfilter/utils.test.ts` and `src/rmpr/git_utils.test.ts`
          by removing tests for the moved functions, ensuring test coverage is
          maintained in `src/common/git.test.ts`.
        done: false
  - title: Consolidate File System Utilities
    description: Review `src/rmfilter/utils.ts` and other modules for
      general-purpose file system utilities (e.g., `validatePath`,
      `secureWrite`, `secureRm`). Move these to a dedicated common module
      `src/common/fs.ts`. Update dependent modules.
    files:
      - src/common/fs.ts
      - src/common/fs.test.ts
      - src/rmfilter/utils.ts
      - src/rmfilter/utils.test.ts
      - src/rmpr/main.ts
    steps:
      - prompt: >
          Create the new file `src/common/fs.ts` for common file system
          utilities.
        done: false
      - prompt: |
          Create a corresponding test file `src/common/fs.test.ts`.
        done: false
      - prompt: >
          Locate the `validatePath` function in `src/rmfilter/utils.ts`. Move
          its implementation to `src/common/fs.ts`.

          Move existing tests for `validatePath` from
          `src/rmfilter/utils.test.ts` to `src/common/fs.test.ts` and ensure
          they cover various path scenarios, including security checks against
          path traversal.
        done: false
      - prompt: >
          Locate the `secureWrite` function in `src/rmfilter/utils.ts`. Move its
          implementation to `src/common/fs.ts`.

          Create or move tests for `secureWrite` to `src/common/fs.test.ts`,
          verifying it correctly uses `validatePath` and writes content.
        done: false
      - prompt: >
          Locate the `secureRm` function in `src/rmfilter/utils.ts`. Move its
          implementation to `src/common/fs.ts`.

          Create or move tests for `secureRm` to `src/common/fs.test.ts`,
          verifying it correctly uses `validatePath` and removes files.
        done: false
      - prompt: >
          Update all import statements for `validatePath`, `secureWrite`, and
          `secureRm` across the codebase (e.g., in `src/rmpr/main.ts` if it uses
          these) to point to `src/common/fs.ts`.
        done: false
      - prompt: >
          Remove the original implementations of the moved file system utility
          functions from `src/rmfilter/utils.ts`.

          Clean up `src/rmfilter/utils.test.ts` by removing tests for these
          functions, ensuring coverage is maintained in `src/common/fs.test.ts`.
        done: false
  - title: Consolidate CLI and Process Utilities
    description: Review `src/rmfilter/utils.ts` for CLI argument parsing
      (`parseCliArgsFromString`) and process spawning utilities (`logSpawn`,
      `spawnAndLogOutput`). Relocate these to appropriate common modules
      (`src/common/cli.ts`, `src/common/process.ts`). Update dependent modules.
    files:
      - src/common/cli.ts
      - src/common/cli.test.ts
      - src/common/process.ts
      - src/common/process.test.ts
      - src/rmfilter/utils.ts
      - src/rmfilter/utils.test.ts
      - src/rmfilter/rmfilter.ts
      - src/rmfilter/config.ts
      - src/rmfilter/additional_docs.ts
      - src/rmfilter/instructions.ts
      - src/rmpr/comment_options.ts
      - src/rmpr/git_utils.ts
      - src/rmplan/commands/agent.ts
      - src/rmplan/actions.ts
      - src/rmplan/executors/claude_code.ts
      - src/rmplan/workspace/workspace_manager.ts
      - src/rmplan/workspace/workspace_lock.test.ts
      - src/rmplan/rmplan.ts
      - src/rmplan/commands/edit.ts
      - src/rmplan/commands/generate.ts
      - src/rmplan/commands/next.ts
      - src/common/file_finder.ts
    steps:
      - prompt: >
          Create the new file `src/common/cli.ts` for CLI-related utilities and
          `src/common/cli.test.ts` for its tests.
        done: false
      - prompt: >
          Create the new file `src/common/process.ts` for process management
          utilities and `src/common/process.test.ts` for its tests.
        done: false
      - prompt: >
          Locate `parseCliArgsFromString` in `src/rmfilter/utils.ts`. Move its
          implementation to `src/common/cli.ts`.

          Move existing tests for `parseCliArgsFromString` from
          `src/rmfilter/utils.test.ts` to `src/common/cli.test.ts`. Ensure
          comprehensive test coverage for various argument quoting and escaping
          scenarios.
        done: false
      - prompt: >
          Locate `logSpawn` in `src/rmfilter/utils.ts`. Move its implementation
          to `src/common/process.ts`.

          Create or move tests for `logSpawn` to `src/common/process.test.ts`.
          Test its behavior with `debug` and `quiet` flags.
        done: false
      - prompt: >
          Locate `spawnAndLogOutput` in `src/rmfilter/utils.ts`. Move its
          implementation to `src/common/process.ts`.

          Create or move tests for `spawnAndLogOutput` to
          `src/common/process.test.ts`. Test output capturing, stdin piping, and
          exit code handling.
        done: false
      - prompt: >
          Update all import statements for `parseCliArgsFromString`, `logSpawn`,
          and `spawnAndLogOutput` across the codebase to point to their new
          locations in `src/common/cli.ts` or `src/common/process.ts`.
        done: false
      - prompt: >
          Remove the original implementations of these utilities from
          `src/rmfilter/utils.ts`.

          Clean up `src/rmfilter/utils.test.ts` by removing tests for these
          functions, ensuring coverage is maintained in the new test files.
        done: false
  - title: Review and Relocate `src/common/` Utilities
    description: Examine each utility within `src/common/`. If a utility is
      exclusively used by a single module (`rmfilter`, `rmpr`, or `rmplan`),
      move it into that module's local utility collection (e.g.,
      `src/<module>/utils.ts` or a new `src/<module>/<utility_name>.ts`).
    files:
      - src/common/commands.ts
      - src/rmplan/utils/commands.ts
      - src/rmplan/rmplan.ts
      - src/common/env.ts
      - src/rmplan/utils/env.ts
      - src/common/file_finder.ts
      - src/rmfilter/file_finder.ts
      - src/rmfilter/rmfilter.ts
      - src/common/llm.ts
      - src/rmplan/llm_utils/llm.ts
      - src/common/run_and_apply.ts
      - src/rmplan/llm_utils/run_and_apply.ts
      - src/rmplan/executors/one-call.ts
      - src/rmplan/commands/generate.ts
    steps:
      - prompt: >
          Create a new directory `src/rmplan/utils/` if it doesn't exist.

          Move `src/common/commands.ts` to `src/rmplan/utils/commands.ts`.

          Update the import path for `handleCommandError` in
          `src/rmplan/rmplan.ts` to point to the new location.

          Create or update `src/rmplan/utils/commands.test.ts` if necessary.
        done: false
      - prompt: >
          Move `src/common/env.ts` to `src/rmplan/utils/env.ts`.

          Update the import path for `loadEnv` in `src/rmplan/rmplan.ts` to
          point to the new location.

          Create or update `src/rmplan/utils/env.test.ts` if necessary.
        done: false
      - prompt: >
          Move `src/common/file_finder.ts` to `src/rmfilter/file_finder.ts`.

          Update import paths for `globFiles` and `grepFor` in
          `src/rmfilter/rmfilter.ts` and any other consumers (e.g.
          `src/rmfilter/mdc.ts` if it uses them).

          Ensure tests for these functions are now in
          `src/rmfilter/file_finder.test.ts` or an appropriate test file within
          `rmfilter`.
        done: false
      - prompt: >
          Create a new directory `src/rmplan/llm_utils/` if it doesn't exist.

          Move `src/common/llm.ts` to `src/rmplan/llm_utils/llm.ts`.

          Update its internal imports if necessary and update any files that
          were importing from `src/common/llm.ts`.

          Create or update `src/rmplan/llm_utils/llm.test.ts` if necessary.
        done: false
      - prompt: >
          Move `src/common/run_and_apply.ts` to
          `src/rmplan/llm_utils/run_and_apply.ts`.

          Update its internal imports (e.g., to the new `llm.ts` location).

          Update import paths in `src/rmplan/executors/one-call.ts` and
          `src/rmplan/commands/generate.ts`.

          Create or update `src/rmplan/llm_utils/run_and_apply.test.ts` if
          necessary.
        done: false
  - title: Refactor `rmfilter`'s Cross-Module Dependencies
    description: Analyze how `rmfilter` interacts with `rmplan` and `rmpr`.
      `rmfilter` currently imports executor-related logic and configuration
      types from `rmplan`. This task aims to decouple this by introducing a
      dedicated function in `rmplan` for `rmfilter` to call if it needs to
      trigger plan execution, rather than `rmfilter` managing executor logic
      itself.
    files:
      - src/rmfilter/rmfilter.ts
      - src/rmplan/agent_runner.ts
      - src/rmplan/executors/index.ts
      - src/rmplan/configSchema.ts
      - src/rmplan/configLoader.ts
    steps:
      - prompt: >
          Create a new file `src/rmplan/agent_runner.ts`.

          Define a function `runPlanContextWithExecutor(executorName: string,
          contextContent: string, commonOpts: ExecutorCommonOptions,
          rmplanConfig: RmplanConfig)` in this new file.

          This function should encapsulate the logic currently in
          `rmfilter/rmfilter.ts` for building and running an executor (i.e.,
          calling `buildExecutorAndLog` and `executor.execute()`).
        done: false
      - prompt: >
          Modify `src/rmfilter/rmfilter.ts`:

          - Remove direct imports of `buildExecutorAndLog` and
          `DEFAULT_EXECUTOR` from `../rmplan/executors/index.ts`.

          - Import the new `runPlanContextWithExecutor` function from
          `../rmplan/agent_runner.ts`.

          - In the part of `fullRmfilterRun` where `globalValues.executor` is
          handled, replace the existing executor instantiation and execution
          logic with a call to `runPlanContextWithExecutor`.

          - You will still need to pass `RmplanConfig` and
          `ExecutorCommonOptions` to this new function.
        done: false
      - prompt: >
          Review the usage of `RmplanConfig` and `ExecutorCommonOptions` in
          `rmfilter/rmfilter.ts`.

          For now, continue passing `RmplanConfig` as loaded by `rmfilter`
          (which uses `rmplan`'s config loader).

          The `ExecutorCommonOptions` will also be constructed as before and
          passed to `runPlanContextWithExecutor`.

          No changes to config schemas are required for this step, but note any
          observations for future refactoring.
        done: false
      - prompt: >
          Create `src/rmplan/agent_runner.test.ts` and write unit tests for the
          `runPlanContextWithExecutor` function.

          Mock dependencies like `buildExecutorAndLog` and the executor's
          `execute` method to test the orchestration logic within
          `runPlanContextWithExecutor`.
        done: false
  - title: Update All Cross-Module Imports
    description: After reorganizing utilities and refactoring dependencies in tasks
      1-5, update all import statements across the `src/common/`,
      `src/rmfilter/`, `src/rmpr/`, and `src/rmplan/` directories to reflect the
      new code structure. This is a comprehensive sweep to catch any missed
      import updates.
    files:
      - src/common/**/*.ts
      - src/rmfilter/**/*.ts
      - src/rmpr/**/*.ts
      - src/rmplan/**/*.ts
    steps:
      - prompt: >
          Systematically review all TypeScript files within `src/common/`,
          `src/rmfilter/`, `src/rmpr/`, and `src/rmplan/`.

          For each file, examine all `import` statements.

          Ensure that paths correctly point to the new locations of any moved
          utilities or refactored modules from the previous tasks.

          Verify relative paths (`../`, `./`) and module aliases if any are
          used.
        done: false
      - prompt: >
          After updating imports, run `bun run check` to perform a type check
          across the project.

          Resolve any type errors that arise, which are often indicative of
          incorrect import paths or API changes from refactoring.
        done: false
      - prompt: >
          Run the full test suite using `bun test`.

          Address any test failures, as these can also indicate issues with
          module resolution or incorrect imports at runtime.
        done: false
  - title: Comprehensive Testing
    description: Execute the entire test suite for the project. Perform manual
      verification of the main functionalities of `rmfilter`, `rmplan`, and
      `rmpr` to ensure the reorganization has not introduced regressions.
    files: []
    steps:
      - prompt: >
          Execute the full project test suite using the command `bun test`.

          Investigate and fix any failing tests. Ensure all tests pass before
          proceeding.
        done: false
      - prompt: >
          Perform manual verification of `rmfilter`'s main functionalities. Test
          with various command-line options, including different file/glob
          inputs, grep patterns, and context generation options (e.g.,
          `--with-diff`, `--docs`, `--rules`).

          Verify that the output context is correctly generated and matches
          expectations for the given inputs.
        done: false
      - prompt: >
          Perform manual verification of `rmplan`'s core subcommands:

          - `add`: Create a new plan.

          - `list`: List existing plans.

          - `show`: Display details of a plan.

          - `next`: Prepare the next step of a plan.

          - `generate`: Generate a plan from a markdown description.

          - `extract`: Extract a markdown plan to YAML.

          - `agent`: Run a plan with a simple executor (e.g., `copy-only`).

          - `done`: Mark steps/tasks as done.

          - `prepare`: Prepare a phase for execution.

          - `answer-pr`: Test with a sample PR.

          - `workspace`: Test workspace creation and listing.

          Verify that each command behaves as expected and interacts correctly
          with plan files.
        done: false
      - prompt: >
          If `rmpr` has distinct CLI functionality beyond what's tested via
          `rmplan answer-pr`, manually verify its main features, particularly
          focusing on PR comment processing and interaction with Git.
        done: false
      - prompt: >
          Verify that modules consuming the newly centralized utilities from
          `src/common/git.ts`, `src/common/fs.ts`, `src/common/cli.ts`, and
          `src/common/process.ts` are functioning correctly.

          For example, check that Git operations in `rmpr` and `rmfilter` still
          work, file operations are secure, and CLI/process utilities behave as
          expected.
        done: false
      - prompt: >
          Document any regressions, bugs, or unexpected behavior encountered
          during manual testing.

          If significant issues are found, create new tasks or issues for them.
          For minor discrepancies, attempt to fix them as part of this step if
          feasible.
        done: false
rmfilter:
  - --
  - src/rmplan
  - src/rmpr
  - src/common
  - src/rmfilter
