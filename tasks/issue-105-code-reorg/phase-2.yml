---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Consolidate Common Utilities and Refine Module Boundaries
goal: Streamline dependencies across `rmfilter`, `rmpr`, `rmplan`, and `common`
  modules by consolidating shared utilities and clarifying module
  responsibilities, leading to a more modular and maintainable codebase.
id: 36
uuid: db51da84-1e57-44b9-b727-65618e616030
status: done
priority: urgent
dependencies:
  - 35
planGeneratedAt: 2025-06-04T08:24:18.885Z
promptsGeneratedAt: 2025-06-05T08:01:01.004Z
createdAt: 2025-06-04T08:24:18.885Z
updatedAt: 2025-10-27T08:39:04.277Z
project:
  title: Refactor codebase to improve modularity and reorganize `rmplan` by
    command functionality
  goal: The primary goal of this project is to reorganize the `dimfeld/llmutils`
    codebase to enhance modularity and maintainability. This involves
    refactoring code along functionality boundaries to reduce inter-directory
    coupling and reorganizing the `rmplan` directory for better clarity by
    structuring its code per command.
  details: >-
    The current codebase has dependencies and interactions between modules like
    `rmfilter`, `rmplan`, and `rmpr` that have become unwieldy. This project
    aims to:

    1. Reorganize the `rmplan` module by creating separate files for each of its
    sub-commands, improving its internal structure.

    2. Analyze and refactor dependencies between `rmfilter`, `rmplan`, `rmpr`,
    and `common` modules. This includes consolidating shared utilities into
    `src/common/` or more specific common modules, and ensuring that
    interactions between the main feature modules (`rmfilter`, `rmplan`, `rmpr`)
    are clean and well-defined.

    The project will be broken into phases to manage complexity and ensure
    incremental progress with continuous testing.
tasks:
  - title: Consolidate Git Utilities
    done: true
    description: Review Git-related functions currently in `src/rmfilter/utils.ts`
      and `src/rmpr/git_utils.ts`. Move general Git functionalities (e.g.,
      `getGitRoot`, `getCurrentBranchName`, `hasUncommittedChanges`) into a new
      dedicated module `src/common/git.ts`. Update `rmfilter`, `rmpr`, and any
      other consumers to use these common Git utilities.
  - title: Consolidate File System Utilities
    done: true
    description: Review `src/rmfilter/utils.ts` and other modules for
      general-purpose file system utilities (e.g., `validatePath`,
      `secureWrite`, `secureRm`). Move these to a dedicated common module
      `src/common/fs.ts`. Update dependent modules.
  - title: Consolidate CLI and Process Utilities
    done: true
    description: Review `src/rmfilter/utils.ts` for CLI argument parsing
      (`parseCliArgsFromString`) and process spawning utilities (`logSpawn`,
      `spawnAndLogOutput`). Relocate these to appropriate common modules
      (`src/common/cli.ts`, `src/common/process.ts`). Update dependent modules.
  - title: Review and Relocate `src/common/` Utilities
    done: true
    description: Examine each utility within `src/common/`. If a utility is
      exclusively used by a single module (`rmfilter`, `rmpr`, or `rmplan`),
      move it into that module's local utility collection (e.g.,
      `src/<module>/utils.ts` or a new `src/<module>/<utility_name>.ts`).
  - title: Refactor `rmfilter`'s Cross-Module Dependencies
    done: true
    description: Analyze how `rmfilter` interacts with `rmplan` and `rmpr`.
      `rmfilter` currently imports executor-related logic and configuration
      types from `rmplan`. This task aims to decouple this by introducing a
      dedicated function in `rmplan` for `rmfilter` to call if it needs to
      trigger plan execution, rather than `rmfilter` managing executor logic
      itself.
  - title: Update All Cross-Module Imports
    done: true
    description: After reorganizing utilities and refactoring dependencies in tasks
      1-5, update all import statements across the `src/common/`,
      `src/rmfilter/`, `src/rmpr/`, and `src/rmplan/` directories to reflect the
      new code structure. This is a comprehensive sweep to catch any missed
      import updates.
  - title: Comprehensive Testing
    done: true
    description: Execute the entire test suite for the project. Perform manual
      verification of the main functionalities of `rmfilter`, `rmplan`, and
      `rmpr` to ensure the reorganization has not introduced regressions.
changedFiles:
  - CLAUDE.md
  - TESTING_RESULTS.md
  - manual_test_rmfilter.ts
  - src/apply-llm-edits/apply.ts
  - src/apply-llm-edits/cmd.ts
  - src/apply-llm-edits/interactive.ts
  - src/common/cli.test.ts
  - src/common/cli.ts
  - src/common/env.ts
  - src/common/file_finder.ts
  - src/common/fs.test.ts
  - src/common/fs.ts
  - src/common/git.test.ts
  - src/common/git.ts
  - src/common/github/pull_requests.ts
  - src/common/process.test.ts
  - src/common/process.ts
  - src/common/run_and_apply.ts
  - src/dependency_graph/resolve.ts
  - src/editor/diff-editor/parse.ts
  - src/editor/udiff-simple/parse.ts
  - src/editor/whole-file/parse_raw_edits.ts
  - src/editor/xml/apply.ts
  - src/logging/console.ts
  - src/rmfilter/additional_docs.ts
  - src/rmfilter/config.ts
  - src/rmfilter/instructions.ts
  - src/rmfilter/repomix.ts
  - src/rmfilter/rmfilter.ts
  - src/rmfilter/utils.test.ts
  - src/rmfilter/utils.ts
  - src/rmfind/rmfind.ts
  - src/rmfix/cli.ts
  - src/rmfix/rmfix.ts
  - src/rmplan/actions.test.ts
  - src/rmplan/actions.ts
  - src/rmplan/agent_runner.test.ts
  - src/rmplan/agent_runner.ts
  - src/rmplan/cleanup.ts
  - src/rmplan/commands/add.ts
  - src/rmplan/commands/agent.ts
  - src/rmplan/commands/answer-pr.ts
  - src/rmplan/commands/answerPr.ts
  - src/rmplan/commands/cleanup.ts
  - src/rmplan/commands/done.test.ts
  - src/rmplan/commands/done.ts
  - src/rmplan/commands/edit.ts
  - src/rmplan/commands/extract.ts
  - src/rmplan/commands/generate.test.ts
  - src/rmplan/commands/generate.ts
  - src/rmplan/commands/list.test.ts
  - src/rmplan/commands/list.ts
  - src/rmplan/commands/next.ts
  - src/rmplan/commands/prepare.ts
  - src/rmplan/commands/show.test.ts
  - src/rmplan/commands/show.ts
  - src/rmplan/commands/split.ts
  - src/rmplan/commands/workspace.ts
  - src/rmplan/configLoader.test.ts
  - src/rmplan/configLoader.ts
  - src/rmplan/display_utils.test.ts
  - src/rmplan/executors/claude_code.ts
  - src/rmplan/executors/copy_paste.ts
  - src/rmplan/executors/index.ts
  - src/rmplan/executors/one-call.ts
  - src/rmplan/llm_utils/llm.ts
  - src/rmplan/llm_utils/run_and_apply.ts
  - src/rmplan/plans.test.ts
  - src/rmplan/plans.ts
  - src/rmplan/process_markdown.ts
  - src/rmplan/prompt.ts
  - src/rmplan/rmplan.integration.test.ts
  - src/rmplan/rmplan.ts
  - src/rmplan/utils/commands.ts
  - src/rmplan/utils/env.ts
  - src/rmplan/workspace/workspace_auto_selector.ts
  - src/rmplan/workspace/workspace_manager.ts
  - src/rmpr/comment_options.ts
  - src/rmpr/git_utils.ts
  - src/rmpr/main.ts
  - src/rmrun.ts
rmfilter:
  - --
  - src/rmplan
  - src/rmpr
  - src/common
  - src/rmfilter
---

This phase addresses the broader code organization. It involves analyzing how `rmfilter`, `rmpr`, and the newly refactored `rmplan` interact with `src/common/` and with each other. The aim is to ensure `src/common/` houses truly common code, move misplaced utilities, and refactor inter-module dependencies for better separation of concerns.
