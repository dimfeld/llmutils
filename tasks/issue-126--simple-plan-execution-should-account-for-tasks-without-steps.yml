---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Implement Direct Execution of Tasks without Steps
goal: Modify the agent to correctly identify and execute tasks that have a
  description but no explicit steps, and to track their completion status.
id: 61
uuid: 5d02747c-f2cc-4e8c-97a8-45d10fc7241a
status: done
priority: high
dependencies: []
issue:
  - https://github.com/dimfeld/llmutils/issues/126
planGeneratedAt: 2025-06-09T07:41:35.053Z
promptsGeneratedAt: 2025-06-09T07:43:16.575Z
createdAt: 2025-06-08T22:37:49.597Z
updatedAt: 2025-10-27T08:39:04.205Z
project:
  title: '"Simple plan" execution should account for tasks without steps'
  goal: 'Implement: "Simple plan" execution should account for tasks without steps'
  details: >-
    Right now we account for a plan with no tasks, and a fully populated plan
    with tasks and steps. We also should properly handle plans that have tasks,
    but no steps on the tasks. 


    In this case we can just use the regular task loop but treat the task
    description and related files as the entirety of the prompt.
tasks:
  - title: Enhance Plan Schema to Support Task-Level Completion
    done: true
    description: Update the `planSchema` to include an optional `done` boolean field
      on the task object. This is essential for tracking the completion status
      of tasks that do not have steps, preventing them from being executed
      multiple times. The field should default to `false`.
  - title: Refactor Agent's Initial Plan Analysis
    done: true
    description: Modify the agent's initial control flow logic that checks if a plan
      `needsPreparation`. This logic must be updated to correctly differentiate
      between a plan with no tasks at all (a true "stub plan") and a plan that
      contains simple tasks (tasks without steps). When a user opts to run a
      plan with simple tasks directly, the agent should proceed to the main
      execution loop instead of incorrectly calling the stub plan handler.
  - title: Create a Unified Function to Find the Next Actionable Task
    done: true
    description: Refactor the logic for determining the next action. Create a new
      function that scans the plan and finds the first incomplete task. This
      function will be used by the agent's main loop to decide which task to
      work on next, whether it's a complex task with steps or a simple task to
      be executed directly.
  - title: Refactor the Agent's Main Loop to Handle Simple Tasks
    done: true
    description: Modify the agent's main execution loop to use the new task-finding
      function. The loop will then branch its logic based on the task's
      structure. If the current task has steps, it will proceed with the
      existing step-by-step execution logic. If the task has no steps, it will
      trigger a new direct execution path.
  - title: Implement Direct Task Execution and Completion
    done: true
    description: Implement the new direct execution logic within the agent's main
      loop. This involves constructing a comprehensive prompt from the simple
      task's title, description, and associated files. After the executor
      successfully processes the prompt, the logic will update the plan file to
      set the task's `done` flag to `true` and handle optional commits.
  - title: Ensure Plan Completion Logic is Correct
    done: true
    description: Update all logic that checks for overall plan completion to be
      aware of the new task-level `done` flag. A plan should now be considered
      complete only when all of its tasks are complete. A task is considered
      complete if it has no steps and its `done` flag is true, or if it has
      steps and all of those steps are marked as done.
changedFiles:
  - src/rmplan/actions.test.ts
  - src/rmplan/actions.ts
  - src/rmplan/commands/agent.test.ts
  - src/rmplan/commands/agent.ts
  - src/rmplan/commands/research.test.ts
  - src/rmplan/planSchema.ts
  - src/rmplan/plans.test.ts
rmfilter:
  - src/rmplan/commands/agent.ts
  - --with-imports
---

This phase focuses on the core implementation for handling simple tasks. We will start by updating the plan's data schema to allow for task-level completion tracking. Then, we will refactor the agent's main control flow to correctly identify these simple tasks and route them to a new direct execution logic within the main loop, rather than the incorrect "stub plan" handler. This involves creating a new "actionable item" finder that can identify both pending steps and pending simple tasks, and then implementing the logic to execute the simple task and mark it as complete.
