---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: "Core: Import a Single GitHub Issue"
goal: Implement the core functionality of the `rmplan import` command to import
  a single, specified GitHub issue and create a local stub plan file for it.
id: 39
uuid: bf4094fa-3ed4-4b65-8565-1048b2e1b7df
status: done
priority: high
dependencies: []
planGeneratedAt: 2025-06-06T08:55:25.742Z
promptsGeneratedAt: 2025-06-06T08:59:58.038Z
createdAt: 2025-06-06T05:40:44.136Z
updatedAt: 2025-10-27T08:39:04.312Z
project:
  title: Add `rmplan import` Command to Import GitHub Issues
  goal: The project aims to add a new `rmplan import` command that allows users to
    import GitHub issues and create corresponding local plan files. This will
    streamline the process of turning feature requests and bug reports from
    GitHub into actionable development plans within the `rmplan` ecosystem.
  details: The new command will support two primary modes of operation. When a
    specific issue is provided via a flag, it will import that single issue.
    Otherwise, it will enter an interactive mode, listing all open issues for
    the current repository, allowing the user to select multiple issues to
    import. A key requirement is to avoid creating duplicate plans. The command
    will check existing plan files and filter out any issues that have already
    been imported by looking for the issue's URL in the `issue` field of the
    plan files. For each issue being imported, the command will prompt the user
    to select which parts of the issue (the main body and any comments) should
    be included as the `details` for the new plan. It will also parse any
    `rmfilter` arguments embedded in the issue's text, similar to the `generate`
    command. The final output for each imported issue will be a "stub" plan
    file, containing metadata like the title, goal, details, and issue link, but
    with an empty task list, ready for further planning with `rmplan generate`.
    This feature shares significant functionality with the existing `rmplan
    generate` command, particularly around GitHub issue processing. A major goal
    is to reuse existing code from `generate` and its helper modules to ensure
    consistency and reduce implementation effort.
tasks:
  - title: Create the `rmplan import` Command Structure
    done: true
    description: Create the new `rmplan import` command in the main CLI file and set
      up its handler. This involves adding the command definition, defining the
      `--issue` option, and creating the `import.ts` command handler file to
      which the action will be delegated.
  - title: Implement Single-Issue Import Logic
    done: true
    description: Develop the primary logic for importing a single issue. This
      function will be called when the `--issue` flag is used. It will use the
      existing `getInstructionsFromGithubIssue` helper to fetch the issue data,
      prompt the user to select which body and comments to include, and parse
      any embedded `rmfilter` arguments from the text.
  - title: Implement Stub Plan File Creation
    done: true
    description: Create a function that takes the processed issue data and generates
      a valid, minimal "stub" plan file. This plan will include the issue's
      title, the user-selected details, the associated GitHub issue URL, and any
      parsed `rmfilter` arguments. It will be assigned a new, unique plan ID and
      will not contain any tasks, making it ready for the `rmplan generate`
      command.
changedFiles:
  - src/common/model_factory.ts
  - src/rmplan/commands/generate.ts
  - src/rmplan/commands/import.test.ts
  - src/rmplan/commands/import.ts
  - src/rmplan/executors/copy_paste.ts
  - src/rmplan/executors/one-call.ts
  - src/rmplan/llm_utils/run_and_apply.ts
  - src/rmplan/plans.ts
  - src/rmplan/process_markdown.ts
  - src/rmplan/rmplan.ts
rmfilter:
  - src/rmplan/commands/generate.ts
  - --with-imports
  - --
  - src/rmplan/rmplan.ts
---

This phase focuses on establishing the `rmplan import` command and its single-issue import capability using the `--issue` flag. We will heavily leverage existing functions from the `generate` command's workflow, particularly for fetching issue data, prompting the user for content selection, and parsing `rmfilter` arguments. The outcome will be a fully functional, non-interactive import that lays the foundation for the multi-issue interactive mode.
