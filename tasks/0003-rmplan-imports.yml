goal: Add import analysis options (--with-imports, --with-all-imports) to rmplan
  next command.
details: >
  This feature allows `rmplan next` to automatically include imported files
  relevant to the current task, similar to `rmfilter`.


  When `rmplan next` is run with `--with-imports` or `--with-all-imports`:

  1. It will first attempt to extract file references mentioned directly within
  the generated LLM prompt text for the step.

  2. If no files are found in the prompt, it will fall back to using the `files`
  list defined in the current task of the plan YAML.

  3. If the `--rmfilter` option is also used, these candidate files and the
  corresponding import flag (`--with-imports` or `--with-all-imports`) will be
  passed as a separate command block (`-- <files> <flag>`) to the `rmfilter`
  process. The original task files will *not* be passed directly in the main
  arguments.

  4. If `--rmfilter` is *not* used, `rmplan` will perform the import analysis
  itself using `ImportWalker`, expand the file list, deduplicate it, and include
  the full list in the generated prompt context.
tasks:
  - title: Add CLI Options and Basic Logic Structure
    description: Add the new command-line options to `rmplan next` and set up the
      conditional logic structure for handling them.
    files:
      - src/rmplan/rmplan.ts
    steps:
      - prompt: >
          In `src/rmplan/rmplan.ts`, modify the `program.command('next
          <planFile>')` definition:

          1. Add two new boolean options using `.option()`:
             - `--with-imports`: Description "Include direct imports of files found in the prompt or task files."
             - `--with-all-imports`: Description "Include the entire import tree of files found in the prompt or task files."
          2. In the `.action(async (planFile, options) => { ... })` handler:
             - Retrieve the values of these options from the `options` object.
             - Add a check `if (options.withImports && options.withAllImports)` and print an error message suggesting the user choose only one, then exit. Ensure this check happens early in the action handler.
             - Add placeholder conditional blocks for the main logic:
               ```typescript
               let candidateFilesForImports: string[] = []; // Placeholder
               let performImportAnalysis = options.withImports || options.withAllImports;

               if (performImportAnalysis) {
                 // TODO: Extract candidate files
               }

               // ... existing code ...

               if (options.rmfilter) {
                 // Inside the existing rmfilter block
                 const rmfilterArgs = [ /* ... existing args ... */ ];
                 if (performImportAnalysis) {
                   // TODO: Modify rmfilterArgs for import options
                 }
                 // ... spawn rmfilter ...
               } else {
                 // Inside the existing standalone block
                 if (performImportAnalysis) {
                   // TODO: Perform standalone import analysis and update 'files'
                 }
                 // ... generate prompt ...
               }
               ```
          Ensure the new options are documented in the command's help text
          implicitly by commander.
        done: true
  - title: Implement Candidate File Extraction
    description: Implement the logic to determine the initial set of files for
      import analysis, using either files mentioned in the prompt or the task's
      file list as a fallback.
    files:
      - src/rmplan/rmplan.ts
      - src/rmfilter/instructions.ts
      - src/rmfilter/utils.ts
    steps:
      - prompt: >
          In `src/rmplan/rmplan.ts`, implement the candidate file extraction
          logic within the `next` command action handler.


          1.  Import `extractFileReferencesFromInstructions` from
          `src/rmfilter/instructions.ts`.

          2.  Import `path` module.

          3.  Import `getGitRoot` from `src/rmfilter/utils.ts`.

          4.  Locate the `if (performImportAnalysis)` block added in the
          previous step.

          5.  Inside this block, *after* the `llmPrompt` variable is
          constructed:
              - Get the `gitRoot` using `await getGitRoot()`.
              - Call `const { files: filesFromPrompt } = await extractFileReferencesFromInstructions(gitRoot, llmPrompt);`.
              - Resolve the `activeTask.files` to absolute paths, filtering out non-existent ones (this logic might already exist nearby for the `files` variable - reuse or adapt it). Store these resolved absolute paths in a temporary variable, e.g., `resolvedTaskFiles`.
              - Determine the `candidateFilesForImports` (declared earlier):
                ```typescript
                if (filesFromPrompt.length > 0) {
                  // If prompt has files, use them. Assume they are absolute or resolvable from gitRoot.
                  // Ensure they are absolute paths.
                  candidateFilesForImports = filesFromPrompt.map(f => path.resolve(gitRoot, f));
                  console.log(`Using ${candidateFilesForImports.length} files found in prompt for import analysis.`);
                } else {
                  // Fallback to task files if prompt has no files.
                  candidateFilesForImports = resolvedTaskFiles; // Already absolute
                  console.log(`No files found in prompt, using ${candidateFilesForImports.length} task files for import analysis.`);
                }
                // Filter out any non-existent files just in case
                candidateFilesForImports = (await Promise.all(candidateFilesForImports.map(async f => await Bun.file(f).exists() ? f : null))).filter(f => f !== null) as string[];
                ```
          Make sure `candidateFilesForImports` holds absolute paths at the end
          of this step. Log the source and count of candidate files if not
          quiet.
        done: false
  - title: Implement --rmfilter Integration
    description: Modify the rmfilter execution logic to pass the candidate files and
      import flags correctly when both `--rmfilter` and an import option are
      used.
    files:
      - src/rmplan/rmplan.ts
      - src/rmfilter/utils.ts
    steps:
      - prompt: >
          In `src/rmplan/rmplan.ts`, modify the `if (options.rmfilter)` block
          within the `next` command's action handler.


          1.  Ensure `gitRoot` is available (it should be from the previous
          step).

          2.  Inside the `if (options.rmfilter)` block, locate the construction
          of `rmfilterArgs`.

          3.  Add a new conditional block: `if (performImportAnalysis)` (using
          the boolean flag defined earlier).

          4.  Inside this new `if` block:
              - Convert the absolute paths in `candidateFilesForImports` to paths relative to `gitRoot`. Store them in `relativeCandidateFiles`.
                ```typescript
                const relativeCandidateFiles = candidateFilesForImports.map(f => path.relative(gitRoot, f));
                ```
              - Create the command block arguments:
                ```typescript
                const importCommandBlockArgs = ['--', ...relativeCandidateFiles];
                if (options.withImports) {
                  importCommandBlockArgs.push('--with-imports');
                } else if (options.withAllImports) {
                  importCommandBlockArgs.push('--with-all-imports');
                }
                ```
              - Modify the original `rmfilterArgs` construction:
                - *Remove* the part that spreads the original task `files` (e.g., `...files,`).
                - *Add* the `importCommandBlockArgs` to the end of the `rmfilterArgs` array using spread syntax (`...importCommandBlockArgs`).
              - Add logging (if not quiet) indicating that import analysis is being delegated to rmfilter with specific files and flags.
          5.  Ensure that the original `files` array (containing resolved paths
          from the task) is *not* included in the main `rmfilterArgs` when
          `performImportAnalysis` is true. It should look something like this
          (conceptual):
              ```typescript
              const baseRmfilterArgs = [ 'rmfilter', '--copy', '--gitroot', /* other args like --instructions */ ];
              let finalRmfilterArgs;
              if (performImportAnalysis) {
                 // Construct importCommandBlockArgs as above
                 finalRmfilterArgs = [...baseRmfilterArgs, ...importCommandBlockArgs, ...cmdLineRmfilterArgs];
              } else {
                 // Original logic: include resolved task files
                 finalRmfilterArgs = [...baseRmfilterArgs, ...files, ...cmdLineRmfilterArgs];
              }
              // Use finalRmfilterArgs in logSpawn
              ```
          Adjust the existing `rmfilterArgs` construction carefully to achieve
          this conditional inclusion.
        done: false
  - title: Implement Standalone Import Analysis
    description: Implement the import analysis directly within rmplan for cases
      where `--rmfilter` is not used, leveraging the existing `ImportWalker` and
      `Resolver`.
    files:
      - src/rmplan/rmplan.ts
      - src/dependency_graph/resolve.ts
      - src/dependency_graph/walk_imports.ts
      - src/treesitter/extract.ts
      - src/rmfilter/utils.ts
    steps:
      - prompt: >
          In `src/rmplan/rmplan.ts`, modify the `else` block (where
          `!options.rmfilter`) within the `next` command's action handler.


          1.  Import necessary classes at the top of the file: `Resolver` from
          `src/dependency_graph/resolve.ts`, `ImportWalker` from
          `src/dependency_graph/walk_imports.ts`, `Extractor` from
          `src/treesitter/extract.ts`.

          2.  Locate the `if (performImportAnalysis)` block added inside the
          `else` clause in Task 1.

          3.  Inside this block:
              - Instantiate the necessary components:
                ```typescript
                console.log('Performing standalone import analysis...');
                const resolver = await Resolver.new(gitRoot);
                const walker = new ImportWalker(new Extractor(), resolver);
                ```
              - Define an async function `processImportsStandalone` (or copy/adapt logic from `rmfilter.ts`'s `processWithImports`). This function takes `initialFiles: string[]` and `allImports: boolean`, performs the walk using `walker.getImportTree` or `walker.getDefiningFiles`, collects absolute file paths in a `Set`, and returns `Array.from(results)`.
                ```typescript
                async function processImportsStandalone(initialFiles: string[], allImports: boolean): Promise<string[]> {
                  const results = new Set<string>();
                  await Promise.all(
                    initialFiles.map(async (file) => {
                      // Ensure the file path is absolute for the walker
                      const filePath = path.resolve(gitRoot, file);
                      try {
                        if (allImports) {
                          await walker.getImportTree(filePath, results);
                        } else {
                          const definingFiles = await walker.getDefiningFiles(filePath);
                          definingFiles.forEach((imp) => results.add(imp));
                          // Also add the initial file itself
                          results.add(filePath);
                        }
                      } catch (error) {
                        console.warn(`Warning: Error processing imports for ${filePath}:`, error);
                      }
                    })
                  );
                   // Add initial files back just in case they weren't added (e.g., no imports)
                   initialFiles.forEach(f => results.add(path.resolve(gitRoot, f)));
                  return Array.from(results);
                }
                ```
              - Call this function:
                ```typescript
                const expandedFiles = await processImportsStandalone(candidateFilesForImports, options.withAllImports);
                ```
              - Remember the `files` variable holds the original resolved absolute paths from the task. Merge `files` and `expandedFiles`:
                ```typescript
                const combinedFiles = [...files, ...expandedFiles];
                ```
              - Deduplicate the list:
                ```typescript
                const uniqueFiles = Array.from(new Set(combinedFiles));
                ```
              - **Crucially, update the `files` variable** so that the rest of the code (prompt generation, logging) uses the expanded, unique list:
                ```typescript
                files = uniqueFiles;
                console.log(`Import analysis complete. Total relevant files: ${files.length}`);
                ```
          Ensure all file paths used within this block
          (`candidateFilesForImports`, results from `ImportWalker`, the final
          `files` list) are absolute paths.
        done: false
  - title: Refine and Test
    description: Review path handling, add logging, and perform manual testing of
      all scenarios.
    files:
      - src/rmplan/rmplan.ts
      - src/rmfilter/utils.ts
    steps:
      - prompt: >
          In `src/rmplan/rmplan.ts`:


          1.  **Review Path Consistency:**
              *   Double-check that `candidateFilesForImports` consistently holds absolute paths before being used by either the `--rmfilter` logic or the standalone logic.
              *   Verify that paths passed to `rmfilter` in the command block (`relativeCandidateFiles`) are correctly relativized to `gitRoot`.
              *   Verify that paths used by `ImportWalker` (`processImportsStandalone`) are absolute.
              *   Verify that the final `files` variable (potentially updated by standalone analysis) holds absolute paths.
          2.  **Add Logging:**
              *   Use `console.log` (respecting the `quiet` flag check, `if (!options.quiet)`) or `debugLog` to trace the flow:
                  *   Log the source of `candidateFilesForImports` (prompt or task files).
                  *   Log the list of `candidateFilesForImports` (or just the count).
                  *   In the `--rmfilter` case, log the final `rmfilterArgs` being passed to `logSpawn`.
                  *   In the standalone case, log the count of `expandedFiles` and the final count of `files` after merging and deduplicating.
          3.  **Manual Testing Plan (Self-Correction/Refinement):**
              *   Run `rmplan next ...` without any import/rmfilter options. Verify it works as before.
              *   Run `rmplan next ... --with-imports`. Verify standalone analysis runs, logs show expanded files, and the prompt includes the expanded list.
              *   Run `rmplan next ... --with-all-imports`. Verify standalone analysis runs correctly.
              *   Run `rmplan next ... --rmfilter`. Verify it works as before.
              *   Run `rmplan next ... --rmfilter --with-imports`. Check the logs to ensure the `rmfilter` command includes the `-- ... --with-imports` block and *omits* the original task files from the main arguments. Verify `rmfilter` runs successfully (requires a subsequent check of `rmfilter`'s output/clipboard).
              *   Run `rmplan next ... --rmfilter --with-all-imports`. Check logs similarly.
              *   Test with a plan where the generated prompt *will* contain file references. Verify `candidateFilesForImports` uses these prompt files.
              *   Test with a plan where the prompt *won't* contain file references. Verify `candidateFilesForImports` falls back to the task files.
          4.  **Code Cleanup:** Remove any temporary logging or unused
          variables. Ensure error handling (e.g., file not found during
          standalone analysis) is reasonable (e.g., prints a warning and
          continues).
        done: false
