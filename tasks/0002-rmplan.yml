---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Create a new command-line utility `rmplan` for generating and executing
  task plans using an LLM.
id: 20
uuid: 68f73fc0-7cec-4b96-859c-562e6672adba
status: done
updatedAt: 2025-10-27T08:39:04.235Z
tasks:
  - title: Setup Basic CLI Structure and Update Schema
    done: true
    description: Initialize the `rmplan` command structure using `commander`, define
      subcommands, add dependencies, and update the `planSchema` with the `done`
      field.
  - title: Implement `generate` Subcommand
    done: false
    description: Implement the logic for the `generate` subcommand, including
      argument handling, prompt generation, temporary file usage, and calling
      `rmfilter`.
  - title: Implement `extract` Subcommand
    done: false
    description: Implement the logic for the `extract` subcommand to find, parse,
      validate, and output YAML plans from input text.
  - title: Implement `done` Subcommand
    done: false
    description: Implement the logic for the `done` subcommand to load a plan, mark
      steps/tasks as done, and save the changes.
  - title: Implement `next` Subcommand (Core Logic)
    done: false
    description: "Implement the non-interactive parts of the `next` subcommand:
      loading the plan, finding the next task/steps, and preparing data for
      prompt generation."
  - title: Implement `next` Subcommand (Interaction and `rmfilter` Call)
    done: false
    description: Add user interaction to select steps and implement the final prompt
      generation and call to `rmfilter`.
---

The `rmplan` tool will integrate with the existing `rmfilter` utility. It provides subcommands to:
1.  `generate`: Create an initial planning prompt and context for a task description using `rmfilter`.
2.  `extract`: Parse a structured plan (YAML) from LLM output.
3.  `done`: Mark steps or entire tasks in a plan YAML file as completed.
4.  `next`: Interactively select the next steps from a plan YAML file and generate context using `rmfilter` to execute them.
The tool will use a defined Zod schema (`planSchema`) for plan validation and rely on libraries like `commander` for CLI structure, `yaml` for parsing/stringifying, and potentially `inquirer` for user interaction in the `next` command. Existing utilities from `llmutils` like argument parsing, file handling, and subprocess execution (`logSpawn`) should be reused where possible.
