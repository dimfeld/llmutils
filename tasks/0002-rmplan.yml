goal: Create a new command-line utility `rmplan` for generating and executing task plans using an LLM.
details: |
  The `rmplan` tool will integrate with the existing `rmfilter` utility. It provides subcommands to:
  1.  `generate`: Create an initial planning prompt and context for a task description using `rmfilter`.
  2.  `extract`: Parse a structured plan (YAML) from LLM output.
  3.  `done`: Mark steps or entire tasks in a plan YAML file as completed.
  4.  `next`: Interactively select the next steps from a plan YAML file and generate context using `rmfilter` to execute them.
  The tool will use a defined Zod schema (`planSchema`) for plan validation and rely on libraries like `commander` for CLI structure, `yaml` for parsing/stringifying, and potentially `inquirer` for user interaction in the `next` command. Existing utilities from `llmutils` like argument parsing, file handling, and subprocess execution (`logSpawn`) should be reused where possible.
tasks:
  - title: Setup Basic CLI Structure and Update Schema
    description: Initialize the `rmplan` command structure using `commander`, define subcommands, add dependencies, and update the `planSchema` with the `done` field.
    files:
      - src/rmplan/rmplan.ts
      - package.json
      - tsconfig.json # (Potentially for build configuration)
      - src/rmplan/planSchema.ts # Extract schema to its own file for clarity
    steps:
      - prompt: |
          Refactor `src/rmplan/rmplan.ts` to define the `planSchema`.
          1.  Move the existing `planSchema` Zod object definition from `src/rmplan/rmplan.ts` into a new file `src/rmplan/planSchema.ts`.
          2.  Modify the `step` object within the `planSchema` in `src/rmplan/planSchema.ts` to include a `done` field: `done: z.boolean().default(false)`.
          3.  Export `planSchema` from `src/rmplan/planSchema.ts`.
          4.  Import `planSchema` in `src/rmplan/rmplan.ts`.
          5.  Remove the old schema definition code from `src/rmplan/rmplan.ts`.
          6.  Keep the initial shebang and import for `planPrompt`. Remove the example file loading and parsing logic for now.
        done: true
      - prompt: |
          Install necessary dependencies and set up the basic CLI structure using `commander`.
          1.  Add `commander` and `yaml` as dependencies using `bun add commander yaml`.
          2.  In `src/rmplan/rmplan.ts`, import `Command` from `commander`.
          3.  Instantiate the main program: `const program = new Command();`.
          4.  Set the program name and description: `program.name('rmplan').description('Generate and execute task plans using LLMs');`.
          5.  Define the four subcommands (`generate`, `extract`, `done`, `next`) using `program.command()`:
              - `generate`: `.command('generate').description('Generate planning prompt and context for a task')`
              - `extract`: `.command('extract').description('Extract and validate a plan YAML from text')`
              - `done`: `.command('done').description('Mark the next step/task in a plan YAML as done')`
              - `next`: `.command('next').description('Prepare the next step(s) from a plan YAML for execution')`
          6.  Add placeholder `.action(() => { console.log('...'); })` calls for each subcommand for now.
          7.  Add `program.parse(process.argv);` at the end of the file.
        done: true
      - prompt: |
          Configure the `rmplan` executable in `package.json`.
          1.  In `package.json`, ensure there is a `bin` field.
          2.  Add an entry for `rmplan`: `"rmplan": "src/rmplan/rmplan.ts"`.
          3.  Run `bun install` to link the binary.
          4.  Verify you can run `rmplan --help` and see the basic structure and subcommands.
        done: true
      - prompt: |
          Add basic integration tests for the CLI structure.
          1.  Create a test file, e.g., `src/rmplan/rmplan.test.ts`.
          2.  Add tests that execute `rmplan --help`, `rmplan generate --help`, etc. (using `Bun.spawnSync` or similar) and assert that the command runs without error and prints help output. This verifies the basic `commander` setup.
        done: true

  - title: Implement `generate` Subcommand
    description: Implement the logic for the `generate` subcommand, including argument handling, prompt generation, temporary file usage, and calling `rmfilter`.
    files:
      - src/rmplan/rmplan.ts
      - src/rmplan/prompt.ts
      - src/rmfilter/instructions.ts # To potentially reuse getInstructionsFromEditor
      - src/rmfilter/utils.ts # To use logSpawn
    steps:
      - prompt: |
          Define arguments and options for the `generate` subcommand in `src/rmplan/rmplan.ts`.
          1.  Target the `.command('generate')` definition.
          2.  Add options `--plan <file>` and `--plan-editor`. Use `.option()` for these. Make them conflict (a user should provide one or the other, or maybe neither if we allow piping later, but let's require one for now). You might need custom logic for this check later.
          3.  Allow arbitrary arguments after `--` to be passed to `rmfilter`. Commander can handle this using `.allowUnknownOption().parseOptions(process.argv)`. You'll need to manually find the index of `--` and slice the args.
          4.  Update the `.action()` function for `generate` to accept `options` and `command` (which contains the arguments).
        done: true
      - prompt: |
          Implement the plan loading logic for the `generate` subcommand.
          1.  Inside the `generate` action, check if `--plan` or `--plan-editor` was provided. Exit with an error if neither is present.
          2.  If `--plan <file>` is used, read the content of the specified file using `Bun.file(options.plan).text()`.
          3.  If `--plan-editor` is used:
              - Import `getInstructionsFromEditor` from `src/rmfilter/instructions.ts`.
              - Call `await getInstructionsFromEditor('rmplan-plan.md')` (use a specific filename) to get the plan text from the user's editor.
              - Handle potential errors (e.g., empty input).
          4.  Store the loaded plan text in a variable `planText`.
        done: true
      - prompt: |
          Implement the prompt generation and temporary file handling.
          1.  Import `planPrompt` from `src/rmplan/prompt.ts`.
          2.  Call `planPrompt(planText)` to get the full planning prompt string.
          3.  Import `os` and `path`.
          4.  Generate a unique temporary file path, e.g., `path.join(os.tmpdir(), \`rmplan-prompt-\${Date.now()}.md\`)`.
          5.  Write the generated planning prompt string to this temporary file using `Bun.write()`. Use a try/finally block to ensure cleanup.
      - prompt: |
          Implement the logic to call `rmfilter`.
          1.  Import `logSpawn` from `src/rmfilter/utils.ts`.
          2.  Find the index of `--` in `process.argv`.
          3.  Slice `process.argv` to get the arguments intended for `rmfilter` (those after `--`).
          4.  Construct the argument list for `rmfilter`: `['rmfilter', ...rmfilterArgs, '--bare', '--instructions', \`@\${tempFilePath}\`]`.
          5.  Use `logSpawn` to execute the `rmfilter` command. Ensure `stdio` is configured appropriately (likely `'inherit'` for `stdout`, `stderr`, `stdin`) so `rmfilter` interacts directly with the user's terminal or pipes.
          6.  Await the completion of the `rmfilter` process using `await proc.exited`. Check the exit code for errors.
          7.  Inside the `finally` block from the previous step, delete the temporary file using `Bun.file(tempFilePath).unlink()`.
      - prompt: |
          Add tests for the `generate` subcommand.
          1.  In `src/rmplan/rmplan.test.ts`, add tests specifically for `generate`.
          2.  Test argument parsing (`--plan`, `--plan-editor`).
          3.  Mock `getInstructionsFromEditor` for the `--plan-editor` test.
          4.  Mock file reading for the `--plan` test.
          5.  Mock `Bun.write` and `Bun.file().unlink()` to verify temp file handling.
          6.  Mock `logSpawn` to assert that `rmfilter` is called with the correct arguments (`--bare`, `--instructions @<tempfile>`, arguments after `--`).

  - title: Implement `extract` Subcommand
    description: Implement the logic for the `extract` subcommand to find, parse, validate, and output YAML plans from input text.
    files:
      - src/rmplan/rmplan.ts
      - src/rmplan/planSchema.ts
    steps:
      - prompt: |
          Define arguments and options for the `extract` subcommand in `src/rmplan/rmplan.ts`.
          1.  Target the `.command('extract')` definition.
          2.  Add an optional argument `[inputFile]` to specify an input file. If not provided, assume input comes from stdin.
          3.  Add an option `-o, --output <outputFile>` for writing the result to a file instead of stdout.
          4.  Update the `.action()` function to accept the `inputFile` argument and `options`.
      - prompt: |
          Implement input reading for the `extract` subcommand.
          1.  Inside the `extract` action:
          2.  Check if `inputFile` argument is provided.
          3.  If yes, read the content using `await Bun.file(inputFile).text()`.
          4.  If no, read from stdin. You can use a helper function like:
              ```typescript
              async function readStdin(): Promise<string> {
                const chunks = [];
                for await (const chunk of Bun.stdin.stream()) {
                  chunks.push(Buffer.from(chunk));
                }
                return Buffer.concat(chunks).toString('utf8');
              }
              const inputText = await readStdin();
              ```
          5.  Store the result in `inputText`.
      - prompt: |
          Implement YAML extraction, parsing, and validation.
          1.  Import `yaml` from the `yaml` package.
          2.  Import `planSchema` from `src/rmplan/planSchema.ts`.
          3.  Develop a strategy to find the YAML block within `inputText`. Start simple:
              - Try parsing the entire `inputText` directly with `yaml.parse()`. If it succeeds, use the result.
              - If that fails, use a regex to find blocks like `\`\`\`yaml\n(.*?)\n\`\`\`` (adjust flags like `s` for multiline). Extract the content and try parsing that. Add more robust extraction if needed later.
          4.  Once a potential YAML object is parsed, validate it using `planSchema.safeParse(parsedObject)`.
          5.  If `safeParse` fails (`!result.success`), print the validation errors (`result.error`) to stderr and exit with a non-zero code.
          6.  If successful, store the validated data (`result.data`) in `validatedPlan`.
      - prompt: |
          Implement output handling for the `extract` subcommand.
          1.  Stringify the `validatedPlan` back into YAML format using `yaml.stringify(validatedPlan)`.
          2.  Check if the `options.output` file path was provided.
          3.  If yes, write the stringified YAML to `options.output` using `Bun.write()`.
          4.  If no, print the stringified YAML to stdout using `console.log()`.
      - prompt: |
          Add tests for the `extract` subcommand.
          1.  In `src/rmplan/rmplan.test.ts`, add tests for `extract`.
          2.  Test reading from a mocked file input.
          3.  Test reading from mocked stdin.
          4.  Test extracting YAML from input with surrounding text (using regex).
          5.  Test successful parsing and validation against `planSchema`.
          6.  Test handling of invalid YAML input.
          7.  Test handling of valid YAML that doesn't match `planSchema`.
          8.  Test outputting to stdout (check `console.log` mock or capture stdout).
          9.  Test outputting to a file (mock `Bun.write`).

  - title: Implement `done` Subcommand
    description: Implement the logic for the `done` subcommand to load a plan, mark steps/tasks as done, and save the changes.
    files:
      - src/rmplan/rmplan.ts
      - src/rmplan/planSchema.ts
    steps:
      - prompt: |
          Define arguments and options for the `done` subcommand in `src/rmplan/rmplan.ts`.
          1.  Target the `.command('done')` definition.
          2.  Add a required argument `<planFile>` for the path to the plan YAML file.
          3.  Add a boolean option `--task` using `.option('--task', 'Mark all steps in the current task as done')`.
          4.  Update the `.action()` function to accept `planFile` and `options`.
      - prompt: |
          Implement file loading, parsing, and validation for the `done` subcommand.
          1.  Import `yaml`.
          2.  Import `planSchema`.
          3.  Inside the `done` action, read the content of `planFile` using `Bun.file(planFile).text()`.
          4.  Parse the content using `yaml.parse()`.
          5.  Validate the parsed object using `planSchema.safeParse()`. Handle errors (print to stderr, exit). Store the valid data in `planData`.
      - prompt: |
          Implement the logic to find and mark the next step/task as done.
          1.  Initialize variables `foundTaskIndex = -1`, `foundStepIndex = -1`.
          2.  Iterate through `planData.tasks` using a `for` loop with index `i`.
          3.  Inside the task loop, iterate through `planData.tasks[i].steps` using index `j`.
          4.  Check if `planData.tasks[i].steps[j].done` is `false`.
          5.  If it's the first unfinished step found (`foundTaskIndex === -1`), store `i` in `foundTaskIndex` and `j` in `foundStepIndex`.
          6.  If the `--task` option is *not* set, `break` both loops immediately after finding the first unfinished step.
          7.  If the `--task` option *is* set, continue the inner loop (steps loop) until it finishes for the `foundTaskIndex`. Then `break` the outer loop (tasks loop). This ensures we process all steps of the target task if needed but stop looking for other tasks.
          8.  After the loops, check if `foundTaskIndex === -1`. If so, print "All steps are already done." and exit.
          9.  If `options.task` is true:
              - Iterate through all steps in `planData.tasks[foundTaskIndex].steps` and set `step.done = true` for each.
          10. Else (`options.task` is false):
              - Set `planData.tasks[foundTaskIndex].steps[foundStepIndex].done = true`.
      - prompt: |
          Implement saving the modified plan back to the file.
          1.  Stringify the modified `planData` object back into YAML using `yaml.stringify()`.
          2.  Write the updated YAML string back to the original `planFile` path using `Bun.write()`.
          3.  Optionally print a confirmation message like "Marked step X in task Y as done." or "Marked task Y as done.".
      - prompt: |
          Add tests for the `done` subcommand.
          1.  In `src/rmplan/rmplan.test.ts`, add tests for `done`.
          2.  Prepare sample plan YAML data (as strings or objects).
          3.  Test loading, parsing, validation failures.
          4.  Test finding the first unfinished step correctly across multiple tasks.
          5.  Test marking only the single next step as done (without `--task`). Verify the resulting object state.
          6.  Test marking all steps within the correct task as done (with `--task`). Verify the object state.
          7.  Test the case where all steps are already done.
          8.  Test that the modified data is written back correctly (mock `Bun.write` and check the content passed to it).

  - title: Implement `next` Subcommand (Core Logic)
    description: "Implement the non-interactive parts of the `next` subcommand: loading the plan, finding the next task/steps, and preparing data for prompt generation."
    files:
      - src/rmplan/rmplan.ts
      - src/rmplan/planSchema.ts
    steps:
      - prompt: |
          Define arguments for the `next` subcommand in `src/rmplan/rmplan.ts`.
          1.  Target the `.command('next')` definition.
          2.  Add a required argument `<planFile>` for the path to the plan YAML file.
          3.  Update the `.action()` function to accept `planFile`.
      - prompt: |
          Implement plan loading, parsing, validation, and finding the next active task.
          1.  Inside the `next` action, load, parse, and validate the `planFile` similarly to the `done` command. Store valid data in `planData`.
          2.  Initialize `activeTask = null`, `activeTaskIndex = -1`.
          3.  Iterate through `planData.tasks` with index `i`.
          4.  For each task, check if *any* step within `task.steps` has `done === false` using `task.steps.some(step => !step.done)`.
          5.  If such a task is found, assign it to `activeTask`, store its index `i` in `activeTaskIndex`, and `break` the loop.
          6.  If after the loop `activeTask` is still `null`, print "No pending steps found in the plan." and exit.
      - prompt: |
          Identify completed and pending steps within the active task.
          1.  Assuming `activeTask` is found:
          2.  Create two arrays: `completedSteps` and `pendingSteps`.
          3.  Iterate through `activeTask.steps`.
          4.  If `step.done` is true, add it to `completedSteps`.
          5.  If `step.done` is false, add it to `pendingSteps`.
      - prompt: |
          Add tests for the `next` subcommand's core logic.
          1.  In `src/rmplan/rmplan.test.ts`, add tests for `next`.
          2.  Test loading, parsing, validation.
          3.  Test finding the correct next task with pending steps.
          4.  Test correctly identifying `completedSteps` and `pendingSteps`.
          5.  Test the scenario where all tasks/steps are already completed.

  - title: Implement `next` Subcommand (Interaction and `rmfilter` Call)
    description: Add user interaction to select steps and implement the final prompt generation and call to `rmfilter`.
    files:
      - src/rmplan/rmplan.ts
      - package.json
    steps:
      - prompt: |
          Add user interaction to select pending steps.
          1.  Add `inquirer` as a dependency: `bun add inquirer @types/inquirer`.
          2.  Import `inquirer` in `src/rmplan/rmplan.ts`.
          3.  Inside the `next` action, after identifying `pendingSteps`:
          4.  If `pendingSteps.length === 0`, print "No pending steps in the current task." and exit (this shouldn't happen if the task was selected correctly, but good practice).
          5.  Use `inquirer.prompt` with a `checkbox` type question:
              ```typescript
              const answers = await inquirer.prompt([
                {
                  type: 'checkbox',
                  name: 'selectedSteps',
                  message: 'Select steps to include in the prompt for the next action:',
                  choices: pendingSteps.map((step, index) => ({
                    name: \`[\${index + 1}] \${step.prompt.split('\\n')[0]}...\`, // Display step index and first line
                    value: step, // Store the whole step object
                    checked: index === 0, // Pre-select the first pending step by default
                  })),
                  validate: (input) => input.length > 0 ? true : 'Please select at least one step.',
                },
              ]);
              const selectedPendingSteps = answers.selectedSteps; // Array of selected step objects
              ```
          6.  Store the result in `selectedPendingSteps`.
      - prompt: |
          Construct the final prompt for the LLM.
          1.  Create a prompt string builder or array.
          2.  Add the overall plan context: `Goal: ${planData.goal}\nDetails: ${planData.details}\n`.
          3.  Add the current task context: `Current Task: ${activeTask.title}\nDescription: ${activeTask.description}\n`.
          4.  Add completed steps summary (optional, could be just the count or first lines):
              ```typescript
              if (completedSteps.length > 0) {
                promptParts.push('Completed Steps in this Task:');
                completedSteps.forEach((step, index) => promptParts.push(`- [DONE] ${step.prompt.split('\\n')[0]}...`));
              }
              ```
          5.  Add the selected pending steps:
              ```typescript
              promptParts.push('\nSelected Next Steps to Implement:');
              selectedPendingSteps.forEach((step, index) => promptParts.push(`- [TODO ${index + 1}] ${step.prompt}`));
              ```
          6.  Join the prompt parts into a single string `llmPrompt`.
      - prompt: |
          Implement temporary file handling and the call to `rmfilter` for the `next` subcommand.
          1.  Write the generated `llmPrompt` to a temporary file (similar to the `generate` command). Use try/finally for cleanup.
          2.  Get the list of files for the current task: `const taskFiles = activeTask.files;`.
          3.  Construct the argument list for `rmfilter`: `['rmfilter', ...taskFiles, '--bare', '--instructions', \`@\${tempFilePath}\`]`.
          4.  Execute `rmfilter` using `logSpawn` with inherited stdio.
          5.  Await completion and check the exit code.
          6.  Clean up the temporary file in the `finally` block.
      - prompt: |
          Add tests for the `next` subcommand's interaction and `rmfilter` call.
          1.  In `src/rmplan/rmplan.test.ts`:
          2.  Mock `inquirer.prompt` to simulate user selecting specific steps.
          3.  Verify that the generated LLM prompt string contains the correct goal, details, task info, completed steps summary, and *only* the selected pending steps.
          4.  Mock `Bun.write` and `Bun.file().unlink()` for temp file checks.
          5.  Mock `logSpawn` and assert that `rmfilter` is called with the correct arguments: the task's files, `--bare`, and `--instructions @<tempfile>`.

