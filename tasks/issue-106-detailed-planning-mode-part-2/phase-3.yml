# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Documentation and Refinement
goal: To ensure the new `add` and `split` commands are well-documented,
  user-friendly, and seamlessly integrated into the `rmplan` tool.
details: This final phase focuses on polishing the newly implemented features.
  It includes updating all relevant documentation, refining command-line help
  messages, and ensuring a smooth user experience.
id: 1l52aj2-3
status: pending
dependencies:
  - 1l52aj2-2
planGeneratedAt: 2025-05-31T20:32:33.556Z
createdAt: 2025-05-31T20:32:33.556Z
updatedAt: 2025-05-31T20:32:33.556Z
project:
  title: Enhance rmplan with `add` and `split` commands for improved plan creation
    and organization.
  goal: The overall goal of this project is to introduce two new commands, `add`
    and `split`, to the `rmplan` CLI tool. The `add` command will facilitate the
    quick creation of new, empty plan files. The `generate` command will be
    enhanced to populate these empty plans. The `split` command will enable
    users to break down large, existing plans into multiple, smaller phase-based
    plan files using an LLM.
  details: This project aims to improve the workflow of creating and managing
    complex project plans with `rmplan`. The `add` command will allow users to
    initialize a plan with a title and optional metadata like dependencies and
    priority. The `generate` command will then be able to take this stub plan
    and use an LLM to fill in the detailed tasks and steps, updating the
    existing file. The `split` command will address the need to break down
    large, already detailed plans. It will leverage an LLM to analyze the tasks
    within a single plan file and intelligently divide them into a sequence of
    new, phase-specific plan files, automatically inferring dependencies between
    these new phases. This enhancement will provide users with more flexibility
    in how they create and structure their plans, catering to both starting new
    plans from scratch and reorganizing existing ones.
tasks:
  - title: Update README.md with `add` and `split` command documentation.
    description: This task involves thoroughly documenting the new `add` and `split`
      commands in the project's `README.md` file. For each command, the
      documentation should include its purpose, all available command-line
      options, clear usage examples, and any relevant notes or best practices.
    files: []
    steps: []
  - title: Review and refine command-line help text and error messages.
    description: This task focuses on improving the user experience directly within
      the CLI. The help text generated by `commander` for the `add` and `split`
      commands (and their options) should be reviewed for clarity, accuracy, and
      completeness. Similarly, any error messages produced by these commands
      should be made informative and guide the user towards resolving the issue.
    files: []
    steps: []
  - title: (Optional) Add examples for `add` and `split` commands.
    description: If deemed beneficial, this task involves creating illustrative
      example files or scenarios. For the `add` command, this might be a simple
      script showing how to create a few linked plan stubs. For the `split`
      command, an example input plan and the corresponding set of output phase
      files could be provided to demonstrate its functionality. These examples
      could be included in the documentation or as part of a test/examples
      directory.
    files: []
    steps: []
rmfilter:
  - src/rmplan
  - --with-imports
