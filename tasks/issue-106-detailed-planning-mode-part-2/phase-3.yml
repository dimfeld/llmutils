# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Documentation and Refinement
goal: To ensure the new `add` and `split` commands are well-documented,
  user-friendly, and seamlessly integrated into the `rmplan` tool.
details: This final phase focuses on polishing the newly implemented features.
  It includes updating all relevant documentation, refining command-line help
  messages, and ensuring a smooth user experience.
id: 26
status: done
dependencies:
  - "25"
planGeneratedAt: 2025-05-31T20:32:33.556Z
promptsGeneratedAt: 2025-06-01T08:09:33.849Z
createdAt: 2025-05-31T20:32:33.556Z
updatedAt: 2025-06-01T08:24:55.147Z
project:
  title: Enhance rmplan with `add` and `split` commands for improved plan creation
    and organization.
  goal: The overall goal of this project is to introduce two new commands, `add`
    and `split`, to the `rmplan` CLI tool. The `add` command will facilitate the
    quick creation of new, empty plan files. The `generate` command will be
    enhanced to populate these empty plans. The `split` command will enable
    users to break down large, existing plans into multiple, smaller phase-based
    plan files using an LLM.
  details: This project aims to improve the workflow of creating and managing
    complex project plans with `rmplan`. The `add` command will allow users to
    initialize a plan with a title and optional metadata like dependencies and
    priority. The `generate` command will then be able to take this stub plan
    and use an LLM to fill in the detailed tasks and steps, updating the
    existing file. The `split` command will address the need to break down
    large, already detailed plans. It will leverage an LLM to analyze the tasks
    within a single plan file and intelligently divide them into a sequence of
    new, phase-specific plan files, automatically inferring dependencies between
    these new phases. This enhancement will provide users with more flexibility
    in how they create and structure their plans, catering to both starting new
    plans from scratch and reorganizing existing ones.
tasks:
  - title: Update README.md with `add` and `split` command documentation.
    description: >
      Add comprehensive documentation for the new `add` and `split` commands to
      the README.md file. The documentation should be added to the appropriate
      section of the README (likely under the rmplan commands section) and
      should include:

      - Clear descriptions of what each command does

      - All available command-line options with explanations

      - Multiple usage examples showing different scenarios

      - Any relevant notes or best practices

      - Integration with the existing documentation structure
    files:
      - README.md
    steps:
      - prompt: >
          Locate the rmplan commands section in README.md and add documentation
          for the `add` command. Include a description explaining that it
          creates new plan stub files, document all options (--edit,
          --depends-on, --priority), and provide usage examples showing basic
          usage, creating with dependencies, and opening in editor.
        done: true
      - prompt: >
          Add documentation for the `split` command in the same section. Explain
          that it uses an LLM to intelligently break down large plan files into
          phase-based plans, preserving all task details while organizing them
          into logical phases with proper dependencies. Include usage examples
          and explain the output structure.
        done: true
      - prompt: >
          Ensure the new documentation follows the existing style and formatting
          conventions used in the README. Add any relevant cross-references to
          other commands or sections where appropriate.
        done: true
  - title: Review and refine command-line help text and error messages.
    description: >
      Review and improve the user-facing text for both the `add` and `split`
      commands. This includes:

      - Command descriptions shown in `rmplan --help`

      - Option descriptions and help text

      - Error messages for validation failures or edge cases

      - Success messages and progress indicators

      The goal is to ensure all text is clear, concise, and helpful for users.
    files:
      - src/rmplan/rmplan.ts
    steps:
      - prompt: >
          Review the command descriptions for `add` and `split` in rmplan.ts.
          Ensure they are concise but informative. The descriptions should
          immediately convey the value and use case for each command.
        done: true
      - prompt: >
          Review all error messages related to these commands, including
          validation errors, file operation failures, and dependency checks.
          Ensure error messages are informative and guide users toward
          resolution. Check that success messages and progress indicators
          provide clear feedback about what's happening.
        done: true
changedFiles:
  - .rmfilter/config/rmplan.yml
  - CLAUDE.md
  - README.md
  - src/rmplan/executors/claude_code.ts
  - src/rmplan/id_utils.test.ts
  - src/rmplan/id_utils.ts
  - src/rmplan/plans.ts
  - src/rmplan/rmplan.ts
rmfilter:
  - src/rmplan
  - src/common
