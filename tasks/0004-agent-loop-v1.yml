---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Add an 'agent' command to rmplan for automated plan execution.
id: 14
uuid: 44a3aaa0-b6d2-41f3-a53e-59e397f1202a
status: done
updatedAt: 2025-10-27T08:39:04.274Z
tasks:
  - title: Refactor 'done' command logic into a reusable function
    done: true
    description: Create actions.ts and move the core logic of finding the next
      pending task and marking steps/tasks as done into `findPendingTask` and
      `markStepDone` functions. Update the 'done' command to use this new
      function.
  - title: Refactor 'next' command logic into a reusable function
    done: true
    description: Move the core logic of preparing the next step (including finding
      files, building the prompt, and optionally calling rmfilter) into a
      `prepareNextStep` function in actions.ts. Add an option to disable
      interactive step selection. Update the 'next' command to use this
      function.
  - title: Add 'agent' command skeleton and loop structure
    done: true
    description: Add the basic 'agent <planFile>' command to rmplan.ts. Implement
      the main loop structure that loads the plan and iterates using
      `findPendingTask` until completion or error.
  - title: Integrate 'prepareNextStep' into the agent command
    done: true
    description: Call the `prepareNextStep` function from within the agent's loop.
      Configure it to use rmfilter and automatically select the first pending
      step. Capture the generated prompt file path.
  - title: Add 'rmrun' execution
    done: true
    description: Define and call a placeholder function `runAndApplyChanges` within
      the agent loop. This function runs the prompt (using rmfilter output) and
      applies changes, returning a success/failure status.
  - title: Integrate 'markStepDone' into the agent command
    done: true
    description: If the placeholder `runAndApplyChanges` succeeds, call
      `markStepDone` to mark the step as complete and commit the changes
      automatically.
  - title: Finalize 'agent' command with loop control and logging
    done: true
    description: Add proper loop termination conditions (plan completion or error),
      refine error handling for file operations and function calls, and ensure
      informative logging for user feedback throughout the process.
---

The agent command will automate the process of executing steps defined in an rmplan YAML file.
It will sequentially:
1. Prepare the next step using logic similar to `rmplan next --rmfilter` (selecting the first pending step automatically).
2. Execute the step using logic similar to an assumed `rmrun` command/function (implementation placeholder).
3. Mark the step as done using logic similar to `rmplan done --commit` if execution succeeds.
4. Repeat until all steps are completed.
This requires refactoring the `next` and `done` command logic into reusable functions placed in a new `actions.ts` file.
