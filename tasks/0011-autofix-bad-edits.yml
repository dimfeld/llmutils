---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Implement an automatic retry mechanism in apply-llm-edits that asks the
  LLM to fix failed edits before falling back to interactive mode.
id: 3
uuid: b6b7f229-2d15-4780-a843-24670e5c7135
status: done
updatedAt: 2025-10-27T08:39:04.222Z
tasks:
  - title: 1 - Refactor Core Edit Application Logic
    done: true
    description: >
      Extract the main edit processing logic from `applyLlmEdits` into a
      reusable internal function. This will facilitate calling the edit
      application process multiple times (initial attempt and retry attempt)
      without duplicating setup code.
  - title: 2 - Format Failures for LLM Prompt
    done: true
    description: >
      Create a function that takes the list of failed edits and generates a
      descriptive string summarizing the failures, suitable for instructing an
      LLM on what needs to be fixed.
  - title: 3 - Parse rmfilter_command Tag
    done: true
    description: >
      Implement functionality to extract the command-line arguments from the
      `<rmfilter_command>` tag potentially present in the LLM output content.
  - title: 4 - Re-run rmfilter Programmatically
    done: true
    description: >
      Create a function to execute the `rmfilter` script with specified
      arguments and capture its output. This is needed if the cached `rmfilter`
      output is deemed stale.
  - title: 5 - Retrieve Original Prompt Context
    done: true
    description: >
      Implement the logic within `applyLlmEdits` to determine the original
      prompt context, either by using a provided prompt, or by parsing the
      `rmfilter_command` tag and potentially re-running `rmfilter`.
  - title: 6 - Define LLM Requester Interface
    done: true
    description: >
      Define a clear interface for how `applyLlmEdits` will request completions
      from an external LLM service. This involves adding a callback function to
      the options.
  - title: 7 - Construct Retry Prompt Structure
    done: true
    description: >
      Create a function that assembles the structured prompt
      (User/Assistant/User messages) needed for the LLM retry request.
  - title: 8 - Implement Retry Loop in applyLlmEdits
    done: true
    description: >
      Integrate all the previous steps into the main `applyLlmEdits` function to
      implement the retry logic.
  - title: 9 - CLI Integration (Optional)
    done: true
    description: >
      Update the CLI command (`cmd.ts`) to potentially support the new retry
      feature, although the core logic is in the library function. This might
      involve adding flags or configuring how the LLM requester is obtained.
      *Note: Full LLM integration in the CLI is complex and might be out of
      scope for this plan.*
---

When applying edits suggested by an LLM (especially diff-based edits), they sometimes fail due to context mismatches or incorrect formatting. Currently, `apply-llm-edits` either throws an error or enters an interactive mode to resolve these failures.

This project aims to add an intermediate step: when edits fail, the tool will automatically construct a new prompt for the LLM. This prompt will include the original request context, the LLM's previous (failed) response, and detailed information about the edit failures. The LLM will be asked to provide a corrected set of edits. If these corrected edits *still* fail, the tool will then proceed to the interactive resolution mode (if enabled) or throw an error.

**Core Steps:**

1.  **Refactor:** Isolate the core edit application logic from the main `applyLlmEdits` function to allow reuse during retries.
2.  **Failure Formatting:** Create a function to format the details of edit failures into a human-readable string suitable for inclusion in an LLM prompt.
3.  **Original Context Retrieval:** Implement logic to retrieve the context of the original LLM request. This involves:
    *   Accepting the original prompt directly if available.
    *   Parsing the `<rmfilter_command>` tag from the LLM's output.
    *   Reading the cached `rmfilter` output (e.g., `repomix-output.xml`).
    *   Comparing the command arguments and potentially re-running `rmfilter` if the cache is stale.
4.  **LLM Interaction:** Define an interface (e.g., a callback function) for `applyLlmEdits` to request a new completion from an external LLM.
5.  **Retry Logic:** Integrate these components into `applyLlmEdits` to construct the retry prompt, call the LLM, and attempt to apply the new edits.
6.  **Fallback:** Ensure the system falls back gracefully to interactive mode or error handling if the retry attempt also fails.
