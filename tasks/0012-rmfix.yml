---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Implement the `rmfix` utility, a command-line tool that runs a specified
  command, captures its output, and if the command fails, uses `rmfilter` to
  assemble context and assist in fixing the issue. The utility will support
  various features like npm script detection, structured test output parsing,
  automated fixing, and interactive failure selection.
id: 21
uuid: cffb5343-93b6-4faa-a4e2-1e4d84661eb1
status: done
updatedAt: 2025-10-27T08:39:04.254Z
tasks:
  - title: 1. Basic CLI Structure and Command Execution
    done: true
    description: Set up the basic command-line interface for `rmfix` using
      `commander`. Implement the initial core logic to execute a given command,
      capture its output (stdout, stderr, exit code), stream the output to the
      console in real-time, and ensure `rmfix` exits with the exit code of the
      executed command. This task also involves setting up the initial file
      structure for the `rmfix` utility.
  - title: 2. NPM Script Detection
    done: true
    description: Enhance the command execution logic to detect if the provided
      command is an npm script defined in `package.json`. If it is, the command
      should be run using the appropriate package manager (`npm run`, `bun run`,
      or `yarn run`, chosen based on lockfile presence or defaulting to `npm
      run`).
  - title: 3. Basic `rmfilter` Integration on Failure
    done: true
    description: If the executed command fails (non-zero exit code), `rmfix` should
      use `rmfilter`'s `generateRmfilterOutput` function to assemble a context
      string. This context will include basic instructions about the failure and
      the command's output. The `rmfilter` arguments passed after `--` or `///`
      on the command line should be forwarded to `generateRmfilterOutput`.
  - title: 4. Filename Extraction and Enhanced `rmfilter` Context
    done: true
    description: Parse the failed command's output (stdout/stderr) to find
      references to source code filenames. These filenames will be added to the
      `rmfilter` arguments, along with the `--with-imports` flag, to provide
      more relevant context for fixing the issue.
  - title: 5. Structured Output Parsing - JSON (Jest/Vitest)
    done: true
    description: Implement parsing for JSON output from test runners like Jest and
      Vitest. Define a standardized structure for test failures. Add a `--format
      <type>` CLI option to `rmfix` and implement auto-detection (JSON first).
      If JSON is successfully parsed and failures are found, use this structured
      data to create more specific instructions for `rmfilter`.
  - title: 6. Test Runner Detection and Reporter Injection
    done: true
    description: Detect if the command to be run is Jest or Vitest. If so, and if
      the user hasn't already specified a JSON reporter, automatically inject
      the appropriate arguments (e.g., `--reporter json` or `--json`) into the
      command *before* it's executed. This increases the likelihood of getting
      parseable JSON output.
---

The `rmfix` utility aims to streamline the debugging process by automating context gathering for failed commands, especially test runs. It integrates with `rmfilter` to leverage its context-building capabilities.

Key features include:
- Running arbitrary commands or npm scripts.
- Capturing and analyzing command output for failures.
- Parsing structured test output (TAP, Jest/Vitest JSON).
- Falling back to regex or LLM-based parsing for unstructured output.
- Detecting test runners (Jest, Vitest) and injecting appropriate reporters for better parsing.
- Integrating with `rmfilter` by:
    - Generating instructions based on command output.
    - Extracting filenames from output to include in `rmfilter` context with `--with-imports`.
    - Passing through additional arguments to `rmfilter`.
- Interactive selection of failures to fix.
- Command-line flags for controlling fix behavior (first failure, specific file, all).
- An `--auto-fix` mode to submit context to an LLM and attempt to apply suggested edits.
- Referencing YAML plan files for additional context.
- Exiting with the underlying command's exit code.

The implementation will be primarily in Node.js using Bun as the runtime. It will involve creating a new set of files under `src/rmfix/` and leveraging existing utilities from `src/common/` and `src/rmfilter/`.
