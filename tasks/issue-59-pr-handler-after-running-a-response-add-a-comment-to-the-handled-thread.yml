# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Implement a feature in the rmpr tool to automatically add a reply to
  GitHub Pull Request review threads that have been addressed by a commit. The
  reply should include a reference to the commit SHA. If posting the reply fails
  (e.g., due to token permissions), the error should be logged, and the process
  should continue.
details: >
  The project involves enhancing the `rmpr` (Review My Pull Request)
  functionality. When `rmpr` processes selected review comments and commits
  changes to address them, it should then iterate over each addressed review
  thread and post a new comment. This comment will inform participants that the
  issue was handled and provide a link to the specific commit.


  This will be achieved by:

  1.  Adding a new function to interact with the GitHub API to post replies to
  review threads. This function must gracefully handle API errors by logging
  them and indicating failure without halting the overall `rmpr` process.

  2.  Adding a utility function to retrieve the current Git commit SHA.

  3.  Integrating this new functionality into the main `rmpr` workflow in
  `src/rmpr/main.ts`. After changes are successfully committed, the tool will
  fetch the latest commit SHA and use it to post confirmation comments to the
  relevant PR threads.


  The changes will primarily affect `src/rmpr/main.ts`,
  `src/common/github/pull_requests.ts`, and `src/rmpr/git_utils.ts`.
tasks:
  - title: 1. Add GitHub API Function to Reply to Review Thread
    description: >
      Create a new function in `src/common/github/pull_requests.ts` to add a
      reply comment to a specified pull request review thread. This function
      will use the Octokit library to make a GraphQL request to GitHub. It needs
      to handle API errors gracefully by logging them and returning a boolean
      indicating success or failure.
    files:
      - src/common/github/pull_requests.ts
      - src/logging.ts
    steps:
      - prompt: >
          In `src/common/github/pull_requests.ts`, please add a new asynchronous
          function called `addReplyToReviewThread`.


          This function should:

          1.  Accept the following parameters:
              - `owner: string` (GitHub repository owner)
              - `repo: string` (GitHub repository name)
              - `pullRequestReviewThreadId: string` (The ID of the review thread to reply to)
              - `body: string` (The content of the reply comment)
          2.  Return a `Promise<boolean>` which resolves to `true` if the
          comment was added successfully, and `false` otherwise.

          3.  Internally, it should:
              - Ensure `process.env.GITHUB_TOKEN` is available, similar to `fetchOpenPullRequests`. If not, log an error using `error()` from `src/logging.ts` and return `false`.
              - Initialize an `Octokit` instance with the `GITHUB_TOKEN`.
              - Define a GraphQL mutation string for `addPullRequestReviewThreadComment`. The mutation should take `$threadId: ID!` and `$body: String!` as input variables and add a comment to the thread specified by `pullRequestReviewThreadId`.
                Example mutation structure:
                ```graphql
                mutation AddReplyToThread($threadId: ID!, $body: String!) {
                  addPullRequestReviewThreadComment(input: {pullRequestReviewThreadId: $threadId, body: $body}) {
                    comment {
                      id # We can request some fields, e.g., id, to confirm success
                    }
                  }
                }
                ```
              - Execute the GraphQL mutation using `octokit.graphql()` with the provided `pullRequestReviewThreadId` and `body`.
              - If the API call is successful, log a debug message using `debugLog()` from `src/logging.ts` (e.g., "Successfully added reply to thread {pullRequestReviewThreadId}") and return `true`.
              - If the API call fails (e.g., network error, authentication error, GitHub API error), catch the exception. Log the error details using `warn()` from `src/logging.ts` (e.g., "Failed to add reply to thread {pullRequestReviewThreadId}: {error_message}") and return `false`. Do not let the error propagate.

          Make sure to import `Octokit` from `octokit`, and `debugLog`, `error`,
          `warn` from `../../logging.ts`.
        done: true
      - prompt: >
          Now, let's add tests for the `addReplyToReviewThread` function in
          `src/common/github/pull_requests.ts`. Since this file does not have an
          existing test file, create `src/common/github/pull_requests.test.ts`.


          The tests should use `bun:test`.


          You will need to mock the `Octokit` class and its `graphql` method.


          Create tests for the following scenarios:

          1.  **Successful reply:**
              - `octokit.graphql` resolves successfully.
              - Assert that `addReplyToReviewThread` returns `true`.
              - Assert that `octokit.graphql` was called with the correct query and variables.
              - Assert that `debugLog` was called.
          2.  **Failed reply (API error):**
              - `octokit.graphql` throws an error.
              - Assert that `addReplyToReviewThread` returns `false`.
              - Assert that `warn` (from `src/logging.ts`) was called with an appropriate error message.
          3.  **GITHUB_TOKEN not set:**
              - Temporarily unset `process.env.GITHUB_TOKEN` for this test case (and restore it afterwards).
              - Assert that `addReplyToReviewThread` returns `false`.
              - Assert that `error` (from `src/logging.ts`) was called.

          Remember to mock `src/logging.ts` to spy on `debugLog`, `warn`, and
          `error` calls.


          Example of mocking Octokit:

          ```typescript

          import { Octokit } from 'octokit';

          // ...

          mock.module('octokit', () => {
            return {
              Octokit: mock(function () { // Use a regular function for constructor mock
                return {
                  graphql: mock(async (query: string, variables: any) => {
                    // Mock implementation
                    if (variables.threadId === 'fail_id') {
                      throw new Error('API Error');
                    }
                    return { addPullRequestReviewThreadComment: { comment: { id: 'new_comment_id' } } };
                  }),
                };
              }),
            };
          });

          ```

          Make sure to adapt the mock for your specific needs, potentially
          checking `variables.body` or `variables.pullRequestReviewThreadId`.
        done: true
  - title: 2. Add Git Utility to Get Current Commit SHA
    description: >
      Create a utility function in `src/rmpr/git_utils.ts` to retrieve the SHA
      of the current Git commit (HEAD). This function will use `logSpawn` from
      `src/rmfilter/utils.ts` to execute the `git rev-parse HEAD` command.
    files:
      - src/rmpr/git_utils.ts
      - src/rmfilter/utils.ts
      - src/logging.ts
    steps:
      - prompt: >
          In `src/rmpr/git_utils.ts`, please add a new asynchronous function
          called `getCurrentCommitSha`.


          This function should:

          1.  Take no arguments.

          2.  Return a `Promise<string | null>`. It should resolve to the commit
          SHA string if successful, or `null` if an error occurs or the command
          fails.

          3.  Internally, it should:
              - Use `logSpawn` (imported from `../rmfilter/utils.js`) to execute the command `['git', 'rev-parse', 'HEAD']`.
              - Configure `logSpawn` options for `stdout: 'pipe'` and `stderr: 'pipe'`.
              - Await the process exit code and capture stdout/stderr.
              - If the exit code is `0`:
                  - Trim whitespace from the stdout to get the SHA.
                  - Return the SHA string.
              - If the exit code is not `0`:
                  - Log a debug message using `debugLog()` (imported from `../logging.js`) indicating the failure, including the exit code and stderr content (e.g., "Failed to get current commit SHA. Exit code: {exitCode}, stderr: {stderr_output}").
                  - Return `null`.
              - If any other exception occurs during the process, catch it:
                  - Log a debug message using `debugLog()` with the error (e.g., "Error getting current commit SHA: {error_object}").
                  - Return `null`.

          Ensure you import `logSpawn` from `../rmfilter/utils.js` and
          `debugLog` from `../logging.js`.
        done: true
      - prompt: >
          Now, let's add tests for the `getCurrentCommitSha` function in
          `src/rmpr/git_utils.test.ts`.

          You should extend the existing test setup which already creates a
          temporary Git repository.


          Add the following test cases within the `describe('Git Utilities',
          ...)` block:

          1.  **Successful SHA retrieval:**
              - After some commits have been made (the `beforeAll` block already does this).
              - Call `getCurrentCommitSha()`.
              - Assert that the returned SHA is a non-empty string (e.g., matches a typical SHA pattern like /^[0-9a-f]{40}$/).
              - Assert that the returned SHA matches the SHA of `HEAD` in your test repo (e.g., compare with `(await You are an AI assistant specialized in converting structured Markdown text into YAML format. Your task is to convert the provided Markdown input into YAML, strictly adhering to the specified schema.

          **Input Markdown:**


          Here is the text that needs to be converted to valid YAML:


          <input_text>

          git rev-parse HEAD`.text()).trim()`).

          2.  **Git command failure (simulated):**
              - This is harder to test directly without deeper mocking of `logSpawn` or `You are an AI assistant specialized in converting structured Markdown text into YAML format. Your task is to convert the provided Markdown input into YAML, strictly adhering to the specified schema.

          **Input Markdown:**


          Here is the text that needs to be converted to valid YAML:


          <input_text>

          .
              - For now, let's focus on a scenario where it might fail: if not in a git repository.
              - Change the current working directory to a temporary non-Git directory (similar to the `getCurrentGitBranch` test for "not in a Git repository").
              - Call `getCurrentCommitSha()`.
              - Assert that it returns `null`.
              - Assert that `debugLog` (mocked) was called with a failure message.
              - Remember to change back to `tmpRepoPath` and clean up the temporary non-Git directory.

          You will need to mock `src/logging.ts` to spy on `debugLog`.

          The existing test file `src/rmpr/git_utils.test.ts` already uses `You
          are an AI assistant specialized in converting structured Markdown text
          into YAML format. Your task is to convert the provided Markdown input
          into YAML, strictly adhering to the specified schema.


          **Input Markdown:**


          Here is the text that needs to be converted to valid YAML:


          <input_text>

          ` from `bun` for git commands and sets up a temporary repository.
          Leverage this.
        done: true
  - title: 3. Integrate Commenting into rmpr Main Workflow
    description: >
      Modify `src/rmpr/main.ts` to use the newly created functions. After
      successfully committing changes (if `options.commit` is true), the tool
      should iterate through the `selectedComments`, retrieve the current commit
      SHA, and post a reply to each corresponding review thread.
    files:
      - src/rmpr/main.ts
      - src/common/github/pull_requests.ts
      - src/rmpr/git_utils.ts
      - src/logging.ts
      - src/common/github/identifiers.ts
      - src/rmfilter/utils.ts
    steps:
      - prompt: >
          In `src/rmpr/main.ts`, we need to integrate the functionality to post
          replies to review threads after changes are committed.


          Perform the following modifications within the `handleRmprCommand`
          function:


          1.  **Import necessary functions:**
              - Import `addReplyToReviewThread` from `../common/github/pull_requests.js`.
              - Import `getCurrentCommitSha` from `./git_utils.js`.
              - Ensure `log`, `warn`, `debugLog` are imported from `../logging.js`.
              - Ensure `resolvedPrIdentifier` (which contains `owner`, `repo`, `number`) is available in the scope where you'll add the new logic.

          2.  **Locate the insertion point:** Find the `if (options.commit)`
          block. The new logic should be placed *inside* this block,
          specifically *after* the `await commitAll(commitMessage)` call, and
          only if `exitCode === 0` (meaning the commit was successful).


          3.  **Implement the commenting logic:**
              - Inside the successful commit block:
                  a.  Call `await getCurrentCommitSha()`.
                  b.  If the returned `commitSha` is `null` or empty:
                      - Log a warning using `warn()`: "Could not retrieve commit SHA. Skipping posting replies to PR threads."
                      - Proceed without posting comments.
                  c.  If `commitSha` is available:
                      - Log a message using `log()`: "Posting replies to handled review threads..."
                      - Get `owner` and `repo` from `resolvedPrIdentifier`.
                      - Construct the base commit URL: `https://github.com/${owner}/${repo}/commit/${commitSha}`.
                      - Iterate through the `selectedComments` array (which is already populated earlier in the function). For each `detailedComment` in `selectedComments`:
                          - Get the thread ID: `detailedComment.thread.id`.
                          - Construct the reply message. Example: `Addressed in commit [${commitSha.slice(0, 0)}](${commitUrl}).`
                          - Call `await addReplyToReviewThread(owner, repo, detailedComment.thread.id, replyMessage)`.
                          - If `addReplyToReviewThread` returns `true`, log a message using `log()`: `Successfully posted reply to thread ${detailedComment.thread.id} for comment on ${detailedComment.thread.path}:${detailedComment.thread.originalLine}`.
                          - If it returns `false`, `warn()` will have been called by `addReplyToReviewThread` itself, so no additional warning is strictly needed here, but you can add a `debugLog` if desired.

          Consider the overall flow: this new commenting step should only occur
          if `options.commit` is true AND the commit operation itself was
          successful.
        done: true
id: 1j9mdaq
status: done
