---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Implement `rmplan workspace add` Command and Plan Association
goal: To deliver a fully functional `rmplan workspace add` command that allows
  manual creation of workspaces, with optional linking to a plan file and
  appropriate status updates for that plan.
id: 27
uuid: 2ff4a6a0-0c14-4801-9377-f4f07c83cd7e
status: done
dependencies: []
planGeneratedAt: 2025-06-01T09:05:05.132Z
promptsGeneratedAt: 2025-06-01T09:14:07.116Z
createdAt: 2025-06-01T09:05:05.132Z
updatedAt: 2025-10-27T08:39:04.261Z
project:
  title: Add `rmplan workspace add` Command
  goal: The project aims to introduce a new CLI command, `rmplan workspace add`,
    enabling users to manually create and initialize a new workspace. This
    command will optionally allow associating the new workspace with a specific
    plan, updating the plan's status to `in_progress` in both the current
    context and the newly created workspace.
  details: >
    Currently, workspaces are primarily created implicitly as part of the
    `rmplan run` (or `agent`) command. This feature will provide an explicit
    mechanism for workspace creation, offering more granular control.


    The command will:

    1.  Accept an optional plan identifier (ID or file path).

    2.  Accept an optional workspace ID. If not provided, one will be generated.

    3.  Utilize the existing `createWorkspace` function from
    `src/rmplan/workspace/workspace_manager.ts`.

    4.  If a plan is specified:
        *   The plan file will be resolved.
        *   Its status will be set to `in_progress` in the current context (e.g., the source repository).
        *   The plan file will be copied to the new workspace during its creation.
        *   The status of the plan file within the new workspace will also be `in_progress`.
    5.  If no plan is specified, a new workspace will be created without an
    associated plan.

    6.  Relevant types like `WorkspaceInfo` will be updated to reflect that a
    plan association is optional.


    This feature will enhance flexibility in managing workspaces, particularly
    for scenarios where a user wants to set up a workspace environment before
    running an agent or for a task not yet defined by a formal plan file.
tasks:
  - title: Define `workspace add` CLI command structure
    done: true
    description: This task involves adding the `workspace add` subcommand to the
      main `rmplan` CLI program defined in `src/rmplan/rmplan.ts`. The command
      should accept an optional positional argument for the plan identifier
      (which can be a plan ID or a file path) and an optional `--id
      <workspaceId>` option for specifying a custom workspace ID.
  - title: Implement helper function to update plan status
    done: true
    description: Create a new utility function, tentatively named `setPlanStatus`,
      likely within `src/rmplan/plans.ts`. This function will take a plan file
      path and a new status (e.g., 'pending', 'in_progress', 'done') as input.
      It will be responsible for reading the specified YAML plan file, updating
      its `status` and `updatedAt` fields, and then writing the modified plan
      back to the file system. This function will not handle git commits itself.
  - title: Adapt `WorkspaceInfo` and related types for optional plan
    done: true
    description: Modify the `WorkspaceInfo` interface in
      `src/rmplan/workspace/workspace_tracker.ts` and the `Workspace` interface
      in `src/rmplan/workspace/workspace_manager.ts`. The `originalPlanFilePath`
      field in these interfaces should be made optional to reflect that a
      workspace might be created without an associated plan. The `taskId` field
      in these types will represent the workspace ID.
  - title: Enhance `createWorkspace` for optional plan file
    done: true
    description: >
      Update the `createWorkspace` function in
      `src/rmplan/workspace/workspace_manager.ts`.

      The `originalPlanFilePath` argument will now be `string | undefined`.

      The function will:

      - If a plan is provided, copy it into the new workspace.

      - Use the `taskId` (which is the workspace ID) for branch naming with the
      prefix `llmutils-ws/`.

      - Handle environment variables for post-clone commands gracefully if no
      plan is specified.

      - Adjust the call to `recordWorkspace` for an optional
      `originalPlanFilePath`.
  - title: Implement core logic for `workspace add` command handler
    done: true
    description: Develop the action handler for the `rmplan rmplan workspace add`
      command. This logic will integrate previous tasks to create workspaces,
      optionally link plans, and update plan statuses.
  - title: Add comprehensive tests
    done: true
    description: Write unit and integration tests to ensure the reliability of the
      new functionality. Test cases should cover various scenarios including
      plan-less and plan-associated workspace creation, status updates, and ID
      handling.
  - title: Update documentation
    done: true
    description: Update the project's `README.md` file and any other relevant
      documentation to include details about the new `rmplan workspace add`
      command. This should cover its purpose, syntax, options, and examples of
      usage.
changedFiles:
  - README.md
  - src/rmplan/plans.test.ts
  - src/rmplan/plans.ts
  - src/rmplan/rmplan.test.ts
  - src/rmplan/rmplan.ts
  - src/rmplan/workspace/workspace_add.test.ts
  - src/rmplan/workspace/workspace_manager.test.ts
  - src/rmplan/workspace/workspace_manager.ts
  - src/rmplan/workspace/workspace_tracker.ts
  - src/rmplan/workspace_add_command.test.ts
rmfilter:
  - src/rmplan
  - src/common
---

This phase focuses on adding the new command to the CLI, implementing the core logic for workspace creation, and handling the optional association with a plan. This includes updating the plan's status in both the source location and the new workspace. Existing workspace management and plan utilities will be leveraged and extended.
