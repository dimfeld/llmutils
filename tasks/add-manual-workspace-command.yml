# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Implement `rmplan workspace add` Command and Plan Association
goal: To deliver a fully functional `rmplan workspace add` command that allows
  manual creation of workspaces, with optional linking to a plan file and
  appropriate status updates for that plan.
details: This phase focuses on adding the new command to the CLI, implementing
  the core logic for workspace creation, and handling the optional association
  with a plan. This includes updating the plan's status in both the source
  location and the new workspace. Existing workspace management and plan
  utilities will be leveraged and extended.
id: 1m3whpf-1
status: pending
dependencies: []
planGeneratedAt: 2025-06-01T09:05:05.132Z
createdAt: 2025-06-01T09:05:05.132Z
updatedAt: 2025-06-01T09:05:05.132Z
project:
  title: Add `rmplan workspace add` Command
  goal: The project aims to introduce a new CLI command, `rmplan workspace add`,
    enabling users to manually create and initialize a new workspace. This
    command will optionally allow associating the new workspace with a specific
    plan, updating the plan's status to `in_progress` in both the current
    context and the newly created workspace.
  details: >
    Currently, workspaces are primarily created implicitly as part of the
    `rmplan run` (or `agent`) command. This feature will provide an explicit
    mechanism for workspace creation, offering more granular control.


    The command will:

    1.  Accept an optional plan identifier (ID or file path).

    2.  Accept an optional workspace ID. If not provided, one will be generated.

    3.  Utilize the existing `createWorkspace` function from
    `src/rmplan/workspace/workspace_manager.ts`.

    4.  If a plan is specified:
        *   The plan file will be resolved.
        *   Its status will be set to `in_progress` in the current context (e.g., the source repository).
        *   The plan file will be copied to the new workspace during its creation.
        *   The status of the plan file within the new workspace will also be `in_progress`.
    5.  If no plan is specified, a new workspace will be created without an
    associated plan.

    6.  Relevant types like `WorkspaceInfo` will be updated to reflect that a
    plan association is optional.


    This feature will enhance flexibility in managing workspaces, particularly
    for scenarios where a user wants to set up a workspace environment before
    running an agent or for a task not yet defined by a formal plan file.
tasks:
  - title: Define `workspace add` CLI command structure
    description: This task involves adding the `workspace add` subcommand to the
      main `rmplan` CLI program defined in `src/rmplan/rmplan.ts`. The command
      should accept an optional positional argument for the plan identifier
      (which can be a plan ID or a file path) and an optional `--id
      <workspaceId>` option for specifying a custom workspace ID.
    files: []
    steps: []
  - title: Implement helper function to update plan status
    description: Create a new utility function, tentatively named `setPlanStatus`,
      likely within `src/rmplan/plans.ts` or `src/rmplan/actions.ts`. This
      function will take a plan file path and a new status (e.g., 'pending',
      'in_progress', 'done') as input. It will be responsible for reading the
      specified YAML plan file, updating its `status` and `updatedAt` fields,
      and then writing the modified plan back to the file system. This function
      will not handle git commits itself.
    files: []
    steps: []
  - title: Adapt `WorkspaceInfo` and related types for optional plan
    description: Modify the `WorkspaceInfo` interface in
      `src/rmplan/workspace/workspace_tracker.ts` and the `Workspace` interface
      in `src/rmplan/workspace/workspace_manager.ts`. The `originalPlanFilePath`
      field in these interfaces should be made optional to reflect that a
      workspace might be created without an associated plan. If the `branch`
      field in `WorkspaceInfo` is derived from plan details (like a task ID from
      the plan), it may also need to be made optional or its derivation logic
      adjusted for plan-less workspaces.
    files: []
    steps: []
  - title: Enhance `createWorkspace` for optional plan file
    description: >
      Update the `createWorkspace` function in
      `src/rmplan/workspace/workspace_manager.ts` to correctly handle scenarios
      where the `originalPlanFilePath` argument is `undefined`. This includes:

      - Skipping the plan file copying step if no plan path is provided.

      - Adjusting the call to `recordWorkspace` to pass an undefined
      `originalPlanFilePath`.

      - Ensuring that environment variables like `LLMUTILS_PLAN_FILE_PATH` (for
      post-clone commands) are handled gracefully if no plan is specified.

      The `taskId` argument to `createWorkspace` will be the workspace ID
      (user-provided or generated), and this will be used for branch naming
      (e.g., `llmutils-ws/<workspaceId>`).
    files: []
    steps: []
  - title: Implement core logic for `workspace add` command handler
    description: >
      Develop the action handler for the `rmplan workspace add` command. This
      logic will:

      1.  Load the `RmplanConfig`.

      2.  Determine the main repository root (current Git root).

      3.  Generate a unique workspace ID using `generateProjectId` if one is not
      provided via the `--id` option.

      4.  If a `planIdentifier` is provided:
          a.  Resolve `planIdentifier` to an `originalPlanPath` using `resolvePlanFile`.
          b.  Call the `setPlanStatus` function (from Task 2) to mark the plan at `originalPlanPath` as `in_progress`.
          c.  Invoke `createWorkspace` with the `mainRepoRoot`, generated/provided `workspaceId`, `originalPlanPath`, and `config`.
          d.  If `createWorkspace` is successful, determine the path of the copied plan file within the newly created workspace.
          e.  Call `setPlanStatus` again to mark this copied plan file (in the new workspace) as `in_progress`.
      5.  If no `planIdentifier` is provided:
          a.  Invoke `createWorkspace` with `originalPlanFilePath` as `undefined`.
      6.  Output appropriate success or error messages to the user.
    files: []
    steps: []
  - title: Add comprehensive tests
    description: >
      Write unit and integration tests to ensure the reliability of the new
      functionality. Test cases should cover:

      - Creating a workspace without specifying a plan.

      - Creating a workspace with a plan identifier (both file path and plan
      ID).

      - Verifying that plan statuses are correctly updated in the original
      location and in the new workspace when a plan is specified.

      - Creating a workspace with a user-provided workspace ID.

      - Creating a workspace without a user-provided workspace ID (testing ID
      generation).

      - Testing the `setPlanStatus` helper function independently.

      - Edge cases, such as non-existent plan identifiers.
    files: []
    steps: []
  - title: Update documentation
    description: Update the project's `README.md` file and any other relevant
      documentation to include details about the new `rmplan workspace add`
      command. This should cover its purpose, syntax, options, and examples of
      usage, including how to specify plans and workspace IDs.
    files: []
    steps: []
rmfilter:
  - src/rmplan
  - src/common
