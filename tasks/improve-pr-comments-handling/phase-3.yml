# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Documentation and Refinement
goal: To update all relevant project documentation to reflect the new hybrid
  comment mode and the changes to line number handling, and to review and refine
  the prompts for optimal performance.
details: >
  With the core functionality implemented, this phase focuses on ensuring the
  changes are well-documented and the user-facing aspects, particularly LLM
  prompts, are polished.
id: 30
status: pending
priority: low
issue:
  - https://github.com/dimfeld/llmutils/issues/112
dependencies:
  - "29"
planGeneratedAt: 2025-06-02T19:27:55.318Z
createdAt: 2025-06-02T18:37:07.724Z
updatedAt: 2025-06-02T19:27:55.318Z
project:
  title: Enhanced PR Comment Processing with Hybrid Context Mode and Robust Line
    Handling
  goal: To improve the handling of Pull Request (PR) review comments by
    introducing a new "hybrid context" mode that combines the benefits of inline
    AI comments and separate diff contexts, and by refactoring the system to use
    current diff line numbers consistently, eliminating reliance on
    `originalLine` and `originalStartLine`.
  details: >
    This project aims to enhance the `rmpr` tool's capability to assist
    developers in addressing PR feedback.

    Currently, `rmpr` offers two main modes for presenting review comments to an
    AI:

    1.  **Inline Comments Mode**: Embeds AI-readable comments directly into the
    full source code files. This is good for showing the AI *where* in the
    current file a change is needed.

    2.  **Separate Context Mode**: Presents each review comment alongside its
    corresponding diff hunk. This gives the AI the "before" and "after" context
    of the change being discussed.


    The first major goal is to create a new **Hybrid Context Mode**. This mode
    will:

    *   Insert AI-style comments into the full file content, similar to the
    inline mode.

    *   Simultaneously provide the original diff hunk associated with each
    comment, giving the AI both the precise location in the current file and the
    specific diff context the reviewer was seeing.


    The second major goal is to improve diff line handling as outlined in
    `docs/github-diffs.md` and the project requirements:

    *   **Eliminate `originalLine` and `originalStartLine`**: The system must
    stop using `thread.originalLine` and `thread.originalStartLine` from
    GitHub's review comment data. All line positioning must rely on
    `thread.line` and `thread.startLine` (which refer to the current state of
    the diff) or, if those are unavailable (e.g., for outdated comments), on
    matching the `diffHunk` content against the current file.

    *   **Proper `diffSide: 'LEFT'` Handling**: Ensure line numbers are
    correctly interpreted when `thread.diffSide` is `LEFT` (i.e., the comment
    refers to the "old" or "removed" side of the diff).


    These changes will make the AI's understanding of review comments more
    robust and accurate, leading to better-automated code modifications.
tasks:
  - title: Update `README.md` and Other Relevant Documentation
    description: >
      All project documentation, including the main `README.md` and any specific
      guides related to `rmpr` or comment handling (like `docs/github-diffs.md`
      if it needs updates to reflect the \"stop using originalLine\" change),
      will be updated. The documentation will describe the new
      \"hybrid-context\" mode, its benefits, and how to use it. It will also
      clearly explain the significant changes to diff line handling,
      particularly the complete removal of `originalLine` and
      `originalStartLine` usage and the implications for how comments
      (especially outdated ones) are processed.
    files: []
    steps: []
  - title: Review and Refine Prompts for the Hybrid Mode
    description: >
      The LLM prompt generated by `createHybridContextPrompt` will be critically
      reviewed for clarity, conciseness, and effectiveness. This may involve
      iterative testing with an LLM to observe its behavior and refine the
      instructions to achieve the desired outcomes more reliably. The goal is to
      ensure the AI can make optimal use of both the inline comments and the
      diff contexts.
    files: []
    steps: []
  - title: Evaluate and Document Handling of Unplaceable Comments
    description: >
      Based on the implementation in Phase 1 and 2, document how comments that
      cannot be reliably placed inline (e.g., file-level comments, or outdated
      comments where `diffHunk` matching fails to find a confident location
      without `originalLine`) are handled in the new hybrid mode and existing
      modes. This includes how they are presented to the LLM, if at all.
    files: []
    steps: []
rmfilter:
  - src/rmpr
  - src/common/github
  - --with-imports
  - docs/github-diffs.md
