---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Implement Front Matter Support and Ensure Backward Compatibility
goal: Modify the core plan file reading and writing functions to support the new
  front matter format, ensuring that existing functionalities are not broken and
  that older plan files remain compatible.
id: 58
uuid: 7aa02477-e2e0-4fcf-a200-2f560b7a393b
status: done
priority: high
dependencies: []
issue:
  - https://github.com/dimfeld/llmutils/issues/132
planGeneratedAt: 2025-06-08T22:44:30.655Z
promptsGeneratedAt: 2025-06-08T22:49:16.234Z
createdAt: 2025-06-08T22:37:44.631Z
updatedAt: 2025-10-27T08:39:04.197Z
project:
  title: Revamp plan format to have plan as front matter and details as markdown
    content afterwards
  goal: "Implement: Revamp plan format to have plan as front matter and details as
    markdown content afterwards"
  details: >-
    Should look like this:


    ```markdown

    ---

    id: 1

    title: a plan

    # And other keys here

    ---


    And then the details go here

    ```


    Update readPlanFile and writePlanFile to transparently parse this and move
    the body text in and out of the `details` field.


    If you read a plan that still has a `details` field in the YAML itself, then
    combine that with any body text.
tasks:
  - title: Update `readPlanFile` to parse YAML front matter and a Markdown body
    done: true
    description: Modify the `readPlanFile` function in `src/rmplan/plans.ts` to
      detect and parse files using the new format. It should correctly separate
      the YAML front matter from the subsequent Markdown content. The Markdown
      content will be loaded into the `details` field of the returned
      `PlanSchema` object. Files without front matter should be treated as pure
      YAML to support the old format.
  - title: Update `writePlanFile` to save plans in the new front matter format
    done: true
    description: Modify the `writePlanFile` function in `src/rmplan/plans.ts`. This
      function will now take a `PlanSchema` object, extract the `details` string
      to be used as the Markdown body, and serialize the remaining fields into a
      YAML front matter block. This ensures that any plan saved by the system
      will conform to the new, more readable format.
  - title: Ensure `readPlanFile` is backward compatible with old plan formats
    done: true
    description: Enhance `readPlanFile` to gracefully handle older plan files. If a
      file is read that contains a `details` field within its YAML content
      (either as a legacy pure-YAML file or within the front matter of a
      new-format file), its value must be combined with any Markdown body text
      present. This prevents data loss and ensures a seamless transition.
  - title: Create comprehensive tests for plan file input and output
    done: true
    description: Add and update tests in `src/rmplan/plans.test.ts` to thoroughly
      validate the changes to `readPlanFile` and `writePlanFile`. The tests must
      cover reading and writing the new format, reading the old pure-YAML
      format, and the specific backward-compatibility case where `details`
      exists in both the front matter and the Markdown body. All tests will use
      real file operations in a temporary directory.
changedFiles:
  - src/rmplan/plans.test.ts
  - src/rmplan/plans.ts
rmfilter:
  - src/rmplan/plans.ts
  - --with-imports
---

This phase focuses on the implementation within `src/rmplan/plans.ts` and its corresponding test file, `src/rmplan/plans.test.ts`. We will first update the reading logic to handle the new format, then the writing logic to produce it. A crucial part of this phase is ensuring full backward compatibility for a smooth transition. Each step will be accompanied by dedicated tests to validate its correctness.
