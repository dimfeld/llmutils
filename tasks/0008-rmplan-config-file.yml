# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Enhance `rmplan` to support loading configuration from a YAML file,
  enabling customizable behavior, starting with post-apply commands for the
  agent.
details: >
  The `rmplan` tool currently operates without external configuration. This
  feature introduces the ability to read settings from a YAML file to customize
  its operation.


  **Configuration File Location:**

  1. Default: `.rmfilter/rmplan.yml` in the Git repository root.

  2. Override: Specified via a new `-c, --config <path>` command-line option.

  3. Absence: If neither the default nor a specified file exists, `rmplan`
  should proceed with default behavior without error.


  **Configuration Schema (Initial):**

  The configuration will be validated using Zod. Initially, it will support
  `postApplyCommands`:

  ```yaml

  # Example .rmfilter/rmplan.yml

  postApplyCommands:
    - title: Format Code # User-friendly title for logging
      command: bun fmt # The command to execute
      # workingDirectory: sub/directory # Optional, defaults to repo root
      # env: # Optional environment variables
      #   MY_VAR: value
      # allowFailure: true # Optional, defaults to false
    - title: Run Linters
      command: bun lint --fix
      allowFailure: false # Explicitly false (default)
  ```


  **Implementation Strategy:**

  1. Define the Zod schema for the configuration.

  2. Implement logic to find and load the configuration file (handling default
  path, override path, and non-existence).

  3. Add the `--config` option to the main `rmplan` command.

  4. Integrate config loading into the `rmplan` startup sequence.

  5. Modify the `agent` command to execute the `postApplyCommands` after
  successfully applying changes via `runAndApplyChanges` but before marking the
  step as done.

  6. Ensure robust error handling (e.g., invalid YAML, schema validation errors,
  command execution failures based on `allowFailure`).
tasks:
  - title: Define Configuration Schema
    description: Define the structure and validation rules for the `rmplan.yml`
      configuration file using Zod. This includes the initial
      `postApplyCommands` section with its nested properties.
    files:
      - src/rmplan/configSchema.ts (New File)
      - src/rmfilter/utils.ts (For `getGitRoot`)
    steps:
      - prompt: >
          Create a new file `src/rmplan/configSchema.ts`.


          In this file:

          1. Import `z` from 'zod'.

          2. Define a Zod schema named `postApplyCommandSchema`. This object
          schema should represent a single command within the
          `postApplyCommands` list. It needs the following fields:
              - `title`: A required string (`z.string()`).
              - `command`: A required string (`z.string()`).
              - `workingDirectory`: An optional string (`z.string().optional()`).
              - `env`: An optional record of string key-value pairs (`z.record(z.string()).optional()`).
              - `allowFailure`: An optional boolean, defaulting to `false` (`z.boolean().optional().default(false)`).
          3. Define the main configuration schema named `rmplanConfigSchema`.
          This object schema should have one field:
              - `postApplyCommands`: An optional array of `postApplyCommandSchema` objects (`z.array(postApplyCommandSchema).optional()`).
          4. Export the `rmplanConfigSchema` and also export the inferred
          TypeScript type `RmplanConfig` using `z.infer<typeof
          rmplanConfigSchema>`.

          5. Export the `postApplyCommandSchema` and its inferred type
          `PostApplyCommand` as well, as they might be useful separately.
        done: true
      - prompt: >
          Update `src/rmplan/configSchema.ts`.


          Add a function `getDefaultConfig()` that returns a default
          `RmplanConfig` object with `postApplyCommands` being an empty array or
          undefined. This will be used when no config file is found. Ensure the
          returned object conforms to the `RmplanConfig` type.
        done: true
  - title: Implement Configuration Loading Logic
    description: Create functions to locate, read, parse, and validate the
      configuration file based on the defined schema. Handle default paths,
      command-line overrides, and file non-existence gracefully.
    files:
      - src/rmplan/configLoader.ts (New File)
      - src/rmplan/configSchema.ts
      - src/rmfilter/utils.ts (For `getGitRoot`)
      - node:path
      - node:fs/promises (or Bun equivalents)
      - yaml
    steps:
      - prompt: >
          Create a new file `src/rmplan/configLoader.ts`.


          In this file:

          1. Import necessary modules: `path`, `yaml`, `getGitRoot` from
          `../rmfilter/utils.js`, `rmplanConfigSchema`, `RmplanConfig`,
          `getDefaultConfig` from './configSchema.js', and Bun file system APIs
          (`Bun.file`, `exists`).

          2. Create an asynchronous function `findConfigPath(overridePath?:
          string): Promise<string | null>`.
              - This function should first check if `overridePath` is provided. If yes, resolve it and check if it exists. Return the absolute path if it exists, otherwise throw an error indicating the specified config file was not found.
              - If `overridePath` is not provided, find the Git repository root using `getGitRoot()`.
              - Construct the default path: `path.join(gitRoot, '.rmfilter', 'rmplan.yml')`.
              - Check if the default file exists using `Bun.file(defaultPath).exists()`.
              - If it exists, return the absolute default path.
              - If it doesn't exist, return `null`.
              - Handle potential errors during `getGitRoot()` or file system checks appropriately (e.g., log a warning if git root isn't found and return null).
        done: true
      - prompt: >
          Update `src/rmplan/configLoader.ts`.


          1. Create an asynchronous function `loadConfig(configPath: string |
          null): Promise<RmplanConfig>`.

          2. If `configPath` is `null`, log a message indicating that no config
          file was found and defaults are being used, then return the result of
          `getDefaultConfig()`.

          3. If `configPath` is provided:
              - Log a message indicating which config file is being loaded.
              - Read the file content using `Bun.file(configPath).text()`.
              - Parse the YAML content using `yaml.parse()`. Handle potential YAML parsing errors gracefully (log error, return default config).
              - Validate the parsed object against `rmplanConfigSchema` using `safeParse`.
              - If validation fails:
                  - Log an error message detailing the validation errors (use `result.error.issues`).
                  - Throw an error or return the default config? Let's throw an error here to make configuration issues explicit. Indicate the file path in the error message.
              - If validation succeeds, return the validated data (`result.data`). Ensure the return type matches `RmplanConfig`.
        done: true
      - prompt: >
          Update `src/rmplan/configLoader.ts`.


          Create a top-level asynchronous function
          `loadEffectiveConfig(overridePath?: string): Promise<RmplanConfig>`.

          1. This function orchestrates the process:
              - Call `findConfigPath(overridePath)` to get the path to the config file.
              - Pass the result to `loadConfig()` to get the configuration object.
              - Return the resulting `RmplanConfig` object.
              - Add comprehensive try/catch blocks to handle errors from `findConfigPath` (e.g., specified file not found) and `loadConfig` (e.g., parsing/validation errors) and log user-friendly error messages before re-throwing or exiting if appropriate.
        done: true
  - title: Add Command-Line Option
    description: Add the `-c, --config` option to the main `rmplan` command using
      `commander` to allow users to specify a custom configuration file path.
    files:
      - src/rmplan/rmplan.ts
    steps:
      - prompt: >
          Modify `src/rmplan/rmplan.ts`.


          1. Import the `Command` object from `commander`.

          2. Locate the main `program` definition (`const program = new
          Command();`).

          3. Before defining any subcommands (`.command(...)`), add a global
          option to the `program`:
             ```javascript
             program
               .option('-c, --config <path>', 'Specify path to the rmplan configuration file (default: .rmfilter/rmplan.yml)');
             // ... existing program setup ...
             ```
          4. Ensure this option is processed *before* subcommand actions are
          invoked. We will use the parsed options in the next task. Note that
          Commander typically parses options before executing command actions.
        done: true
  - title: Integrate Configuration Loading
    description: Modify the `rmplan.ts` script to call the configuration loading
      logic early in the execution flow and make the loaded configuration
      available to the command actions, particularly the `agent` command.
    files:
      - src/rmplan/rmplan.ts
      - src/rmplan/configLoader.ts
      - src/rmplan/configSchema.ts
    steps:
      - prompt: >
          Modify `src/rmplan/rmplan.ts`.


          1. Import `loadEffectiveConfig` from `./configLoader.js` and
          `RmplanConfig` from `./configSchema.js`.

          2. Modify the main execution flow. Immediately after
          `program.parse(process.argv);`, but *before* any command-specific
          logic might run (or perhaps structure it so config is loaded *before*
          `.parse` triggers actions), we need to load the config. A good way is
          to use a main async function wrapper.


          Refactor the script structure like this:


          ```typescript

          import { Command } from 'commander';

          // ... other imports ...

          import { loadEffectiveConfig } from './configLoader.js';

          import type { RmplanConfig } from './configSchema.js';


          async function main() {
            const program = new Command();
            program.name('rmplan').description('...'); // Keep description

            // Add the global --config option HERE
            program.option('-c, --config <path>', 'Specify path to the rmplan configuration file (default: .rmfilter/rmplan.yml)');

            // Define all commands (generate, extract, done, next, agent) using program.command(...) as before.
            // IMPORTANT: Do NOT await anything inside the action handlers yet related to config.

            // Parse arguments first to get options like --config
            program.parse(process.argv);

            // Get the globally parsed options
            const options = program.opts(); // Contains { config: 'path/if/provided' }

            // Load the configuration *after* parsing args, using the --config option if present
            let config: RmplanConfig;
            try {
              config = await loadEffectiveConfig(options.config); // Pass the override path
              // Optional: Log the loaded config for debugging if not quiet
              // console.log('Loaded configuration:', config);
            } catch (error) {
              console.error(`Error loading configuration: ${error instanceof Error ? error.message : String(error)}`);
              process.exit(1);
            }

            // Now, potentially re-configure command actions to accept the loaded `config`
            // Or, make `config` available in the scope where actions are defined.
            // A simple approach for now: modify the agent command action to accept 'config'.

            // --- Modify the agent command definition ---
            program
              .command('agent <planFile>')
              .description('Automatically execute steps in a plan YAML file')
              // ... other agent options ...
              .action(async (planFile, agentOptions) => { // Keep agentOptions
                // --- The existing agent logic goes here ---
                // It now has access to the `config` variable loaded above.
                console.log('Starting agent with config:', config); // Example access
                // ... rest of the agent logic ...

                // We will modify the loop in the next task to USE the config.
              });

            // Re-parse or adjust flow if necessary. Commander's `.action` handlers are typically set up before `.parse` is called.
            // The above structure loads config *after* initial parse, then potentially re-wires or accesses the config within actions.
            // Let's refine: Define actions *before* parse, but make `config` available.

            // --- Alternative Structure (Preferred) ---
            let config: RmplanConfig; // Declare config variable in higher scope

            const program = new Command();
            program.name('rmplan').description('...');
            program.option('-c, --config <path>', 'Specify path to the rmplan configuration file (default: .rmfilter/rmplan.yml)');

            // Define commands *before* parse
            program
              .command('agent <planFile>')
              .description('...')
              // ... other options ...
              .action(async (planFile, agentOptions) => {
                // Action now has access to the `config` variable from the outer scope
                // Make sure `config` is loaded before this action runs.
                if (!config) {
                   console.error("Configuration was not loaded before agent action.");
                   process.exit(1);
                }
                console.log('Agent action executing with config:', config);
                // ... existing agent implementation ...
                // Modify the loop in the next task.
              });

            // ... other command definitions ...

            // Parse arguments to populate options
            program.parse(process.argv);
            const options = program.opts();

            // Load config *after* parsing, before any action needs it.
            try {
              config = await loadEffectiveConfig(options.config);
              // Optional: Log loaded config
            } catch (error) {
              console.error(`Error loading configuration: ${error instanceof Error ? error.message : String(error)}`);
              process.exit(1);
            }

            // Now, when the .action for 'agent' (or others) is eventually executed by Commander
            // based on the parsed arguments, the `config` variable will be populated.
          }


          main().catch(err => {
            console.error("Unhandled error in main:", err);
            process.exit(1);
          });

          ```

          *Self-correction:* The preferred structure loads config *after*
          parsing arguments (to get the `--config` value) but *before* any
          command action that needs the config is actually run by Commander. The
          config variable needs to be accessible in the scope where the action
          handlers are defined.
        done: true
  - title: Implement Post-Apply Command Execution
    description: Modify the `agent` command loop to execute the configured
      `postApplyCommands` after changes are successfully applied by
      `runAndApplyChanges`. Handle command execution details like working
      directory, environment variables, and the `allowFailure` flag.
    files:
      - src/rmplan/rmplan.ts
      - src/rmplan/actions.ts
      - src/rmfilter/utils.ts (For `logSpawn`, `getGitRoot`)
      - src/rmplan/configSchema.ts (For types)
    steps:
      - prompt: >
          Modify `src/rmplan/actions.ts`.


          1. Import `logSpawn`, `getGitRoot` from `../rmfilter/utils.js`.

          2. Import `PostApplyCommand` from './configSchema.js'.

          3. Import `path` from 'node:path'.

          4. Create a new asynchronous function
          `executePostApplyCommand(commandConfig: PostApplyCommand):
          Promise<boolean>` responsible for running a single post-apply command.
              - Get the git repository root using `getGitRoot()`. If it fails, log an error and return `false` (indicating failure).
              - Determine the working directory (`cwd`): Use `commandConfig.workingDirectory` if provided (resolve it relative to the git root), otherwise use the git root itself.
              - Prepare environment variables: Start with `process.env`, then merge/override with `commandConfig.env` if provided.
              - Log the command being executed using its `title`.
              - Use `logSpawn` to execute `commandConfig.command`. Note: `logSpawn` expects an array like `['command', 'arg1', 'arg2']`. We need to parse `commandConfig.command` string into a command and arguments array. A simple approach for now is to use `sh -c` on Unix-like systems or `cmd /c` on Windows, passing the whole string. Or, more robustly, use a library like `string-argv` or handle simple space splitting. Let's use `sh -c` for simplicity first.
              - Pass the calculated `cwd` and `env` to `logSpawn`'s options.
              - Capture the exit code from `logSpawn`.
              - If the exit code is non-zero:
                  - Log an error message indicating the command failed (include the title).
                  - If `commandConfig.allowFailure` is `true`, log a warning that failure is ignored and return `true` (indicating successful handling despite command failure).
                  - If `commandConfig.allowFailure` is `false`, return `false` (indicating failure that should stop the process).
              - If the exit code is zero, return `true` (indicating success).
        done: true
      - prompt: >
          Modify `src/rmplan/rmplan.ts`.


          1. Import `executePostApplyCommand` from './actions.js'.

          2. Locate the `agent` command's action handler and its main `while`
          loop.

          3. Find the section *after* `runAndApplyChanges` succeeds (`if
          (applySucceeded)` block) and *before* or *after* `markStepDone` is
          called. Let's place it *after* `runAndApplyChanges` but *before*
          `markStepDone`, so formatting/linting happens before the commit.

          4. Inside the `if (applySucceeded)` block:
              - Check if `config.postApplyCommands` exists and has items.
              - If yes, add a logging statement like `console.log('\n## Running Post-Apply Commands\n');`.
              - Iterate through each `commandConfig` in `config.postApplyCommands`.
              - For each command:
                  - Call `await executePostApplyCommand(commandConfig)`.
                  - Check the boolean result. If it's `false` (meaning the command failed and `allowFailure` was false):
                      - Log an error indicating the agent is stopping due to post-apply command failure.
                      - Set the `hasError` flag to `true`.
                      - `break` out of the post-apply command loop.
              - After the loop, check the `hasError` flag again. If it's true, `break` out of the main `while (stepCount < maxSteps)` loop to stop the agent.
          5. Ensure the `config` variable (loaded in the previous task) is
          accessible within this scope.


          Example snippet placement within the agent's `while` loop:


          ```typescript
             // ... inside while loop ...

             console.log('\n## Execution\n');
             const applySucceeded = await runAndApplyChanges(rmfilterOutputPath).catch((err: Error) => {
               console.error('Failed to execute step:', err);
               hasError = true;
               return false;
             });

             if (!applySucceeded) {
               console.error('Step execution failed, stopping agent.');
               hasError = true;
               break; // Exit while loop
             }

             // ---> NEW: Execute Post-Apply Commands <---
             if (config.postApplyCommands && config.postApplyCommands.length > 0) {
                 console.log('\n## Running Post-Apply Commands\n');
                 for (const commandConfig of config.postApplyCommands) {
                     const commandSucceeded = await executePostApplyCommand(commandConfig);
                     if (!commandSucceeded) {
                         // Error logging is handled within executePostApplyCommand
                         console.error(`Agent stopping because required command "${commandConfig.title}" failed.`);
                         hasError = true;
                         break; // Exit post-apply command loop
                     }
                 }
                 if (hasError) {
                     break; // Exit main agent while loop
                 }
             }
             // ---> END NEW SECTION <---


             // Mark step done (only if apply and post-apply commands succeeded)
             let markResult;
             try {
               console.log('## Marking done\n');
               // ... existing markStepDone logic ...
             } catch (err) {
                 // ... existing error handling ...
                 hasError = true;
                 break; // Exit while loop
             } finally {
                 // ... existing finally block ...
             }

             // ... rest of the loop ...
          ```
        done: true
id: 1j9md80
status: done
