---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Implement the `research` command
goal: To implement the core functionality of the `rmplan research` command,
  including prompt generation, clipboard interaction, file-based context using
  `rmfilter`, and updating the plan with research results.
id: 51
uuid: bc7462b8-6506-4b64-8568-e632f230b8a3
status: done
priority: medium
dependencies: []
planGeneratedAt: 2025-06-08T09:15:22.393Z
promptsGeneratedAt: 2025-06-08T09:23:48.459Z
createdAt: 2025-06-07T02:07:53.027Z
updatedAt: 2025-10-27T08:39:04.203Z
project:
  title: research command
  goal: ""
  details: >
    The `rmplan` command should support a `research [planArg]` option that
    creates a prompt encouraging the model to do research related

    to the goal and details in the plan, and copies it to the clipboard.


    This command should have an --rmfilter option which, if there are any
    rmfilter arguments in the plan, use rmfilter to generate the prompt and
    include these files. Also allow adding

    them on the command line with the `--` CLI argument separator that other
    commands use.


    When the user pastes their content back in, append it to the end of the plan
    details.
tasks:
  - title: Define the `research` command structure in `rmplan.ts`
    done: true
    description: Add the new `research [planArg]` command to the main `rmplan.ts`
      file using `commander`. This includes defining the command, its
      description, the `--rmfilter` option, and setting up the action handler to
      call a new function in a new `commands/research.ts` file. This task only
      sets up the CLI definition and the call to the handler.
  - title: Create the research command handler and core action logic
    done: true
    description: Create a new file `src/rmplan/commands/research.ts` with a
      `handleResearchCommand` function. This handler will resolve the plan file
      and call a new core action function in `actions.ts`. The new action
      function will read the plan, generate a basic research prompt, and copy it
      to the clipboard.
  - title: Implement the research prompt generation
    done: true
    description: In `src/rmplan/prompt.ts`, create a new function
      `generateResearchPrompt` that takes the plan's goal and details and
      constructs a prompt instructing an LLM to perform research, find relevant
      information, and synthesize it.
  - title: Implement the paste-back and plan update functionality
    done: true
    description: Extend the core action in `actions.ts`. After copying the prompt,
      use `waitForEnter(true)` to wait for the user to paste their research.
      Append this pasted content to the `details` field of the plan and save the
      updated plan file using `writePlanFile`.
  - title: Add support for `--rmfilter` and command-line file arguments
    done: true
    description: Enhance the core action in `actions.ts` to handle the `--rmfilter`
      option. It should combine `rmfilter` arguments from the plan's `rmfilter`
      field and any arguments passed after `--` on the command line. If these
      arguments exist, it should use `logSpawn` to run `rmfilter` to generate
      the final prompt.
  - title: Add tests for the new `research` command
    done: true
    description: "Create a new test file `src/rmplan/commands/research.test.ts`.
      Write tests to cover the new functionality, including: resolving the plan,
      generating the correct prompt, handling the `--rmfilter` option, and
      correctly appending the pasted research to the plan details. Use a
      temporary directory for file operations."
  - title: Update user documentation
    done: true
    description: Add a section for the new `rmplan research` command in the
      project's `README.md` or other relevant documentation files, explaining
      its purpose, usage, and options.
changedFiles:
  - README.md
  - src/rmplan/actions.ts
  - src/rmplan/commands/research.test.ts
  - src/rmplan/commands/research.ts
  - src/rmplan/prompt.ts
  - src/rmplan/rmplan.ts
rmfilter:
  - src/rmplan
---

This phase will introduce the `research` command, its associated logic, and tests. It will cover everything from parsing the command-line arguments to generating the research prompt, handling optional file context with `rmfilter`, and saving the research back to the plan file.
