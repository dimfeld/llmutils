goal: Implement a feature to automatically create a new workspace (Git clone or
  worktree) for running an `rmplan` agent, based on repository-level
  configuration. This includes managing the workspace lifecycle, customizing its
  location, and tracking its association with a specific task.
details: >
  The project involves several key areas:

  1.  **Configuration:** Enhancing the `rmplan.yml` schema to define how new
  workspaces should be created. This includes options for using a custom script
  or having `llmutils` manage the cloning and setup process.

  2.  **Workspace Management:** A new `WorkspaceManager` service will
  encapsulate the logic for creating workspaces. This service will handle both
  script-based and `llmutils`-managed creation, including cloning, branch
  creation, and running initialization commands.

  3.  **Tracking:** A system for recording which task a workspace was created
  for, likely using a global JSON file (`~/.llmutils/workspaces.json`).

  4.  **Agent Integration:** Modifying the `rmplan agent` command to utilize the
  `WorkspaceManager`. The agent will operate within the newly created workspace,
  ensuring that all file operations and Git commands are contextually correct.

  5.  **Customization:** Allowing users to specify the location for new clones
  and define repository-specific initialization steps.


  The implementation will be broken down into iterative tasks, focusing on
  building the core components first (configuration, workspace manager basics)
  and then integrating them into the existing `rmplan agent` workflow.
tasks:
  - title: 1. Define and Load Workspace Creation Configuration
    description: Update the `rmplan.yml` configuration schema to include options for
      workspace creation. Implement the loading and validation of this new
      configuration.
    files:
      - src/rmplan/configSchema.ts
      - src/rmplan/configLoader.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          Modify `src/rmplan/configSchema.ts`.


          1.  Define a new Zod schema `workspaceCreationMethodSchema` as a Zod
          enum with values `'script'` and `'llmutils'`.

          2.  Define a new Zod schema `workspaceCreationConfigSchema`. This
          schema should be an object with the following fields:
              *   `method`: `workspaceCreationMethodSchema`. Optional. If not provided, workspace creation is disabled.
              *   `scriptPath`: `z.string().optional()`. Path to a script for workspace creation. Required if `method` is `'script'`.
              *   `repositoryUrl`: `z.string().optional()`. URL of the repository to clone. If `method` is `'llmutils'` and this is not provided, it should be inferred from the current repository's remote origin.
              *   `cloneLocation`: `z.string().optional()`. Directory where clones should be created. Defaults to `~/.llmutils/workspaces/`. Can be an absolute path or relative to the main repository root.
              *   `postCloneCommands`: `z.array(postApplyCommandSchema).optional()`. An array of commands to run after a clone is created and a new branch is checked out (only applicable if `method` is `'llmutils'`).
          3.  Add `workspaceCreation`:
          `workspaceCreationConfigSchema.optional()` to the
          `rmplanConfigSchema`.

          4.  Update `getDefaultConfig()` to include a default undefined
          `workspaceCreation` field.

          5.  Ensure necessary Zod types are exported.
        done: false
      - prompt: >
          Update `src/rmplan/configLoader.ts` and add tests.


          1.  The `loadConfig` function should correctly parse and validate the
          new `workspaceCreation` configuration according to the updated
          `rmplanConfigSchema`. No specific changes might be needed if
          `rmplanConfigSchema.safeParse(parsedYaml)` already handles nested
          optional objects correctly, but verify this.

          2.  Create a new test file `src/rmplan/configLoader.test.ts`.

          3.  Add tests for `loadConfig` specifically for the
          `workspaceCreation` part of the schema:
              *   Test loading a config with `workspaceCreation` undefined.
              *   Test loading a valid `workspaceCreation` config with `method: 'script'`, including `scriptPath`.
              *   Test loading a valid `workspaceCreation` config with `method: 'llmutils'`, including `repositoryUrl`, `cloneLocation`, and `postCloneCommands`.
              *   Test loading a config where `workspaceCreation.method` is 'script' but `scriptPath` is missing (should fail validation or be handled by Zod's refinement if added).
              *   Test loading an empty YAML file (should result in default config).
              *   Test loading a YAML file with an empty `workspaceCreation: {}` (should be valid and result in `workspaceCreation` object with all optional fields undefined).

          Remember to use `Bun.file(configPath).text()` for reading files and
          `yaml.load()` for parsing.

          Mock `getGitRoot` if necessary for tests that might implicitly call it
          via `findConfigPath`.

          For schema validation failures, `loadConfig` is expected to throw an
          error. For file read/parse errors, it returns default config.
        done: false
  - title: 2. WorkspaceManager Structure and Script-Based Creation
    description: Create the `WorkspaceManager` class and implement the script-based
      method for workspace creation.
    files:
      - src/rmplan/workspace_manager.ts
      - src/rmfilter/utils.ts
      - src/rmplan/configSchema.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          Create a new file `src/rmplan/workspace_manager.ts`.


          1.  Import necessary modules: `path`, `fs/promises` for directory
          creation, `os` for home directory, `spawnAndLogOutput` and
          `getGitRoot` from `src/rmfilter/utils.ts`, and `RmplanConfig`,
          `WorkspaceCreationConfig` from `src/rmplan/configSchema.ts`.

          2.  Define an interface `Workspace` with properties:
              *   `path`: string (absolute path to the workspace)
              *   `originalPlanFilePath`: string (absolute path to the original plan file)
              *   `taskId`: string
          3.  Create a class `WorkspaceManager`.

          4.  Add a constructor that takes `mainRepoRoot: string` (the git root
          of the main repository).

          5.  Define a public async method `createWorkspace(taskId: string,
          originalPlanFilePath: string, config: RmplanConfig): Promise<Workspace
          | null>`.
              *   This method will be the main entry point.
              *   It should first check `config.workspaceCreation`. If not defined or `method` is not set, it should log a message and return `null`.
              *   Based on `config.workspaceCreation.method`, it will call internal methods for script or llmutils-based creation.
          6.  Define a private async method `_createWithScript(taskId: string,
          originalPlanFilePath: string, workspaceConfig:
          WorkspaceCreationConfigRequired): Promise<Workspace | null>` where
          `WorkspaceCreationConfigRequired` is `WorkspaceCreationConfig` with
          `scriptPath` being non-optional.
              *   Log that script-based creation is starting.
              *   Resolve `workspaceConfig.scriptPath`: if relative, it's relative to `this.mainRepoRoot`.
              *   Ensure the script is executable.
              *   Execute the script using `spawnAndLogOutput`. Pass `taskId` and `originalPlanFilePath` as environment variables (e.g., `LLMUTILS_TASK_ID`, `LLMUTILS_PLAN_FILE_PATH`) to the script. The CWD for the script should be `this.mainRepoRoot`.
              *   The script is expected to print the absolute path of the created workspace to its standard output.
              *   If the script fails (non-zero exit code) or doesn't output a path, log an error and return `null`.
              *   If successful, trim the stdout to get the `workspacePath`. Verify the path exists and is a directory.
              *   Return a `Workspace` object.
          7.  For now, if `method` is `llmutils`, log "LLMUtils-based workspace
          creation not yet implemented" and return `null`.
        done: false
      - prompt: >
          Create a test file `src/rmplan/workspace_manager.test.ts`.


          1.  Import `WorkspaceManager` and necessary mocking utilities from
          `bun:test`.

          2.  Import `fs/promises` for temporary directory management and
          `path`.

          3.  Setup a temporary directory for `mainRepoRoot` in `beforeEach` and
          clean up in `afterEach`.

          4.  Write tests for the script-based workspace creation
          (`_createWithScript` indirectly via `createWorkspace`):
              *   Test case: Script executes successfully and outputs a valid workspace path.
                  *   Mock `spawnAndLogOutput` to simulate successful script execution (exitCode 0, stdout contains a path).
                  *   Ensure `WorkspaceManager` resolves the script path correctly (relative to `mainRepoRoot`).
                  *   Verify that `createWorkspace` returns the correct `Workspace` object.
                  *   Mock `fs/promises.stat` or ensure the mocked path "exists" if `WorkspaceManager` checks it.
              *   Test case: Script fails (non-zero exit code).
                  *   Mock `spawnAndLogOutput` to simulate script failure.
                  *   Verify `createWorkspace` returns `null` and logs an error.
              *   Test case: Script executes but outputs nothing or an invalid path.
                  *   Mock `spawnAndLogOutput` for success but with empty/invalid stdout.
                  *   Verify `createWorkspace` returns `null` and logs an error.
              *   Test case: `workspaceCreation` config is missing or method is not set.
                  *   Verify `createWorkspace` returns `null` and logs appropriately.
              *   Test case: `method` is 'script' but `scriptPath` is missing in config.
                  *   Verify `createWorkspace` handles this (e.g., returns `null`, logs error). This depends on how strictly `WorkspaceCreationConfig` is typed for `scriptPath` when method is 'script'. Assume it will be an error or null return.
        done: false
  - title: 3. `llmutils`-Based Workspace Creation (Clone & Branch)
    description: Implement the repository cloning and branch creation logic for the
      `llmutils` workspace creation method in `WorkspaceManager`.
    files:
      - src/rmplan/workspace_manager.ts
      - src/rmfilter/utils.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          Modify `src/rmplan/workspace_manager.ts`.


          1.  Import `$` from `bun`.

          2.  Define a private async method `_createWithLlmUtils(taskId: string,
          originalPlanFilePath: string, workspaceConfig:
          WorkspaceCreationConfig): Promise<Workspace | null>`.

          3.  Implement repository URL inference:
              *   If `workspaceConfig.repositoryUrl` is provided, use it.
              *   Otherwise, attempt to get the URL of the 'origin' remote of `this.mainRepoRoot` using `git remote get-url origin`. If this fails, log an error and return `null`.
          4.  Determine clone location:
              *   Use `workspaceConfig.cloneLocation` if provided. If relative, resolve it against `this.mainRepoRoot`.
              *   If not provided, default to `path.join(os.homedir(), '.llmutils', 'workspaces')`.
              *   Ensure the base clone directory exists (e.g., `~/.llmutils/workspaces/`), creating it if necessary using `fs.mkdir(..., { recursive: true })`.
          5.  Construct the target directory name for the clone. For example, if
          the repo URL is `https://github.com/user/myrepo.git`, the name could
          be `myrepo`. The final clone path would be
          `cloneLocationBase/<repo_name>-<taskId>`.

          6.  Clone the repository:
              *   Use `await $ git clone <repositoryUrl> <targetClonePath>`. Use `spawnAndLogOutput` for better control over logging and error handling if preferred, or stick to `$` for simplicity if it handles errors adequately.
              *   If cloning fails, log an error and return `null`.
          7.  Create and checkout a new branch:
              *   The branch name should be unique, e.g., `llmutils-task/${taskId}`.
              *   Use `await $ git -C <targetClonePath> checkout -b <branchName>`.
              *   If branch creation fails, log an error (and potentially clean up the clone) and return `null`.
          8.  If all steps succeed, return a `Workspace` object with the
          `targetClonePath`.

          9.  Update the main `createWorkspace` method to call
          `_createWithLlmUtils` when `method` is `'llmutils'`.
        done: false
      - prompt: >
          Update tests in `src/rmplan/workspace_manager.test.ts`.


          1.  Add tests for `llmutils`-based workspace creation:
              *   Setup: In `beforeEach` or a dedicated test setup, create a bare git repository in a temporary location to act as the "remote" for cloning. Add a commit to it.
              *   Test case: Successful clone and branch creation with explicit `repositoryUrl` and `cloneLocation`.
                  *   Mock `$` or `spawnAndLogOutput` for `git clone` and `git checkout -b` to verify commands and simulate success.
                  *   Verify the returned `Workspace` object has the correct path.
                  *   Verify that the target clone directory would be correctly determined.
              *   Test case: Successful clone with inferred `repositoryUrl`.
                  *   Set up `this.mainRepoRoot` as a git repo with an 'origin' remote. Mock `git remote get-url origin` to return a test URL.
                  *   Verify `_createWithLlmUtils` uses this inferred URL.
              *   Test case: Default `cloneLocation` is used.
                  *   Don't provide `cloneLocation` in config.
                  *   Verify the path is constructed under `~/.llmutils/workspaces/`. Mock `os.homedir()` and `fs.mkdir()`.
              *   Test case: Cloning fails.
                  *   Mock `git clone` to simulate failure.
                  *   Verify `null` is returned and an error is logged.
              *   Test case: Branch creation fails.
                  *   Mock `git clone` to succeed, but `git checkout -b` to fail.
                  *   Verify `null` is returned and an error is logged.
              *   Test case: `repositoryUrl` cannot be inferred and is not provided.
                  *   Mock `git remote get-url origin` to fail or return empty.
                  *   Verify `null` is returned and an error is logged.
        done: false
  - title: 4. Post-Clone Command Execution
    description: Implement the execution of `postCloneCommands` after a workspace is
      successfully created using the `llmutils` method.
    files:
      - src/rmplan/workspace_manager.ts
      - src/rmplan/actions.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          Modify `src/rmplan/workspace_manager.ts`.


          1.  Import `executePostApplyCommand` from `src/rmplan/actions.ts`.

          2.  In the `_createWithLlmUtils` method, after successfully creating
          the branch:
              *   Check if `workspaceConfig.postCloneCommands` exists and has commands.
              *   If yes, iterate through each `commandConfig` in `workspaceConfig.postCloneCommands`.
              *   For each command:
                  *   Log that you are running a post-clone command.
                  *   The `workingDirectory` for these commands, if relative in their config, should be resolved relative to the newly created `targetClonePath` (the workspace root). If absolute, use as is. If undefined, it defaults to `targetClonePath`.
                  *   Call `executePostApplyCommand`. You might need to adjust `executePostApplyCommand` or create a similar helper if `executePostApplyCommand` makes assumptions about `gitRoot` that are not suitable here (it expects to be in the main repo usually).
                      *   The `executePostApplyCommand` function in `actions.ts` determines `gitRoot` itself. For post-clone commands, the "git root" IS the `targetClonePath`. The `commandConfig.workingDirectory` in `postCloneCommands` should be interpreted relative to this `targetClonePath`.
                      *   Modify `executePostApplyCommand` in `src/rmplan/actions.ts`:
                          *   Add an optional `overrideGitRoot?: string` parameter.
                          *   If `overrideGitRoot` is provided, use it instead of calling `await getGitRoot()`.
                          *   The `cwd` for the command should be `commandConfig.workingDirectory ? path.resolve(effectiveGitRoot, commandConfig.workingDirectory) : effectiveGitRoot;` where `effectiveGitRoot` is `overrideGitRoot` or the result of `getGitRoot()`.
                  *   When calling `executePostApplyCommand` from `_createWithLlmUtils`, pass `targetClonePath` as `overrideGitRoot`.
              *   If any `postCloneCommand` fails and `allowFailure` is not true for that command:
                  *   Log an error.
                  *   Attempt to clean up the partially created workspace (e.g., delete the cloned directory).
                  *   Return `null`.
        done: false
      - prompt: >
          Update tests in `src/rmplan/workspace_manager.test.ts`.


          1.  Add tests for `postCloneCommands` execution in
          `_createWithLlmUtils`:
              *   Test case: Successfully executes multiple post-clone commands.
                  *   Provide `postCloneCommands` in the config.
                  *   Mock `executePostApplyCommand` to verify it's called correctly for each command with the appropriate `commandConfig` and `overrideGitRoot` (the new workspace path).
                  *   Ensure relative `workingDirectory` in `commandConfig` is resolved correctly against the new workspace path.
              *   Test case: A post-clone command fails, and `allowFailure` is false.
                  *   Mock `executePostApplyCommand` to return `false` for one command.
                  *   Verify that `_createWithLlmUtils` returns `null`.
                  *   Verify an attempt to delete the cloned directory is made (mock `fs.rm`).
              *   Test case: A post-clone command fails, but `allowFailure` is true.
                  *   Mock `executePostApplyCommand` to return `false` but `commandConfig.allowFailure` is true.
                  *   Verify that `_createWithLlmUtils` continues and returns a `Workspace` object.
              *   Test case: No `postCloneCommands` are provided.
                  *   Verify `executePostApplyCommand` is not called.
        done: false
      - prompt: >
          Update tests for `src/rmplan/actions.ts` (`executePostApplyCommand`).


          1.  Add a new test suite or update existing tests for
          `executePostApplyCommand`.

          2.  Test the new `overrideGitRoot` parameter:
              *   When `overrideGitRoot` is provided, ensure `getGitRoot()` is NOT called.
              *   Ensure `cwd` for the command is correctly resolved using `overrideGitRoot` if `commandConfig.workingDirectory` is relative or undefined.
              *   When `overrideGitRoot` is NOT provided, ensure `getGitRoot()` IS called and `cwd` is resolved using its result.
        done: false
  - title: 5. Workspace Tracking
    description: Implement a system to track created workspaces and their
      association with tasks using a global JSON file.
    files:
      - src/rmplan/workspace_tracker.ts
      - src/rmplan/workspace_manager.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          Create a new file `src/rmplan/workspace_tracker.ts`.


          1.  Import `path`, `os`, `fs/promises`.

          2.  Define an interface `WorkspaceInfo` with properties:
              *   `taskId`: string
              *   `originalPlanFilePath`: string (absolute path to the plan file in the main repo)
              *   `repositoryUrl`: string
              *   `workspacePath`: string (absolute path to the cloned workspace)
              *   `branch`: string
              *   `createdAt`: string (ISO date string)
          3.  Define `TRACKING_FILE_PATH = path.join(os.homedir(), '.llmutils',
          'workspaces.json')`.

          4.  Define an async function `readTrackingData():
          Promise<Record<string, WorkspaceInfo>>`.
              *   It should read `TRACKING_FILE_PATH`.
              *   If the file doesn't exist, return an empty object.
              *   If file exists, parse JSON. If parsing fails, log an error and return an empty object.
          5.  Define an async function `writeTrackingData(data: Record<string,
          WorkspaceInfo>): Promise<void>`.
              *   Ensure the directory `path.dirname(TRACKING_FILE_PATH)` exists.
              *   Write the `data` object to `TRACKING_FILE_PATH` as a JSON string (pretty-printed).
          6.  Define an async function `recordWorkspace(workspaceInfo:
          WorkspaceInfo): Promise<void>`.
              *   Read current tracking data.
              *   Add/update the entry for `workspaceInfo.workspacePath` with `workspaceInfo`.
              *   Write updated tracking data.
          7.  Define an async function `getWorkspaceMetadata(workspacePath:
          string): Promise<WorkspaceInfo | null>`.
              *   Read tracking data.
              *   Return the entry for `workspacePath` if it exists, otherwise `null`.
          8.  Define an async function `findWorkspacesByTaskId(taskId: string):
          Promise<WorkspaceInfo[]>`.
              *   Read tracking data.
              *   Return an array of `WorkspaceInfo` objects where `taskId` matches.
        done: false
      - prompt: >
          Modify `src/rmplan/workspace_manager.ts`.


          1.  Import `recordWorkspace` and `WorkspaceInfo` from
          `./workspace_tracker.ts`.

          2.  In both `_createWithScript` and `_createWithLlmUtils`, before
          returning the successful `Workspace` object:
              *   Construct a `WorkspaceInfo` object.
                  *   For `_createWithScript`, `repositoryUrl` and `branch` might be unknown unless the script provides them or we make assumptions. For now, they can be empty strings or marked as "script-managed".
                  *   For `_createWithLlmUtils`, you have `repositoryUrl` and the `branchName`.
              *   Call `await recordWorkspace(workspaceInfo)`.
              *   If `recordWorkspace` throws an error, log it, but consider if the overall workspace creation should fail or just proceed with a warning about tracking. For now, let's log a warning and proceed.
        done: false
      - prompt: >
          Create a test file `src/rmplan/workspace_tracker.test.ts`.


          1.  Import all functions from `workspace_tracker.ts`.

          2.  Mock `os.homedir()` to return a temporary path for
          `TRACKING_FILE_PATH` within tests.

          3.  Use `fs/promises` to manage the mock tracking file in
          `beforeEach`/`afterEach`.

          4.  Test `readTrackingData`:
              *   File doesn't exist: returns empty object.
              *   File exists with valid JSON: returns parsed data.
              *   File exists with invalid JSON: returns empty object and logs error (spy on `console.error` or your logging function).
          5.  Test `writeTrackingData`:
              *   Writes data correctly, creates directory if needed.
          6.  Test `recordWorkspace`:
              *   Adds a new workspace.
              *   Updates an existing workspace.
          7.  Test `getWorkspaceMetadata`:
              *   Returns correct info if path exists.
              *   Returns `null` if path doesn't exist.
          8.  Test `findWorkspacesByTaskId`:
              *   Returns correct workspaces for a taskId.
              *   Returns empty array if no workspaces match.
        done: false
  - title: 6. Integrate Workspace Creation into `rmplan agent`
    description: Modify the `rmplan agent` command to use the `WorkspaceManager` to
      create and operate within a new workspace when specific options are
      provided.
    files:
      - src/rmplan/agent.ts
      - src/rmplan/rmplan.ts
      - src/rmplan/workspace_manager.ts
      - src/rmfilter/utils.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          Modify `src/rmplan/rmplan.ts`.


          1.  In the `rmplan agent` command definition:
              *   Add a new option: `--workspace-task-id <id>`, description: "ID for the task, used for workspace naming and tracking. If provided, a new workspace will be created."
        done: false
      - prompt: >
          Modify `src/rmplan/agent.ts`.


          1.  Import `WorkspaceManager` from `./workspace_manager.ts`.

          2.  Import `os` and `fs/promises`.

          3.  At the beginning of the `rmplanAgent` function:
              *   Store the original current working directory: `const originalCwd = process.cwd();`.
              *   Initialize `let currentPlanFile = planFile;` (absolute path).
              *   Initialize `let currentBaseDir = await getGitRoot();` (this will be the main repo root initially).
              *   If `options.workspaceTaskId` is provided:
                  *   Log that workspace creation is initiated for the given task ID.
                  *   Create an instance of `WorkspaceManager` with `currentBaseDir` (main repo root).
                  *   Call `await workspaceManager.createWorkspace(options.workspaceTaskId, path.resolve(originalCwd, planFile), config)`.
                  *   If `createWorkspace` returns `null` (creation failed), log an error and exit.
                  *   Let the created workspace object be `newWorkspace`.
                  *   Define `const planFileNameInWorkspace = '.llmutils_plan.yml';`.
                  *   Copy the original plan file to `path.join(newWorkspace.path, planFileNameInWorkspace)`. Use `await Bun.write(target, await Bun.file(source).text())`.
                  *   Update `currentPlanFile = path.resolve(newWorkspace.path, planFileNameInWorkspace);`.
                  *   Update `currentBaseDir = newWorkspace.path;`.
                  *   Change the process's CWD: `process.chdir(newWorkspace.path);`.
                  *   Log that the agent is now operating in the new workspace.
          4.  The `sharedExecutorOptions` passed to `buildExecutorAndLog` should
          use `baseDir: currentBaseDir`.

          5.  Inside the main `while` loop, when loading the plan file, use
          `currentPlanFile`: `const fileContent = await
          Bun.file(currentPlanFile).text();`.

          6.  The `prepareNextStep` function is called with `currentPlanFile`.
          It uses `getGitRoot()` internally, which will now correctly resolve to
          `currentBaseDir` (the workspace root) because the CWD has been
          changed.

          7.  The `markStepDone` function is also called with `currentPlanFile`.
          Git commands run by `markStepDone --commit` will operate within the
          workspace.

          8.  After the `while` loop finishes (or if an error breaks out):
              *   Add a `finally` block to the main `try` that handles agent execution.
              *   Inside this `finally` block, if `options.workspaceTaskId` was provided (meaning CWD was changed), restore the CWD: `process.chdir(originalCwd);`. Log that CWD is restored.
          9.  The existing `config.postApplyCommands` execution loop should run
          *after* the CWD is restored, so it operates on the main repository.
        done: false
      - prompt: >
          Add tests for `rmplan agent` with workspace creation in a new test
          file or an existing relevant one (e.g., `src/rmplan/agent.test.ts` if
          it exists, or as part of integration tests).


          1.  Mock `WorkspaceManager` and its `createWorkspace` method.
              *   Test case: `createWorkspace` succeeds.
                  *   Verify `createWorkspace` is called with correct `taskId`, original `planFile` path, and `config`.
                  *   Verify the plan file is copied to the mock workspace path.
                  *   Verify `process.chdir` is called to the mock workspace path.
                  *   Verify `sharedExecutorOptions.baseDir` is set to the workspace path.
                  *   Verify `prepareNextStep` and `markStepDone` are called with the path to the plan file inside the workspace.
                  *   Verify `process.chdir` is called to restore original CWD in a `finally` block.
              *   Test case: `createWorkspace` fails.
                  *   Verify an error is logged and the process exits.
          2.  Mock `buildExecutorAndLog` and the executor's `execute` method.

          3.  Mock `prepareNextStep` and `markStepDone` to control the agent's
          loop.

          4.  Mock `executePostApplyCommand` to verify it's called after CWD
          restoration if workspace creation was used.

          5.  Consider how `getGitRoot()` behaves. If `process.chdir()` is
          mocked, `getGitRoot()` might not reflect the change. Tests might need
          to account for `getGitRoot()` being called with an explicit CWD
          argument by the agent logic if `process.chdir` is hard to test
          directly, or ensure `getGitRoot` is also spied on/mocked to return the
          expected workspace root. For simplicity, assume `process.chdir` works
          and `getGitRoot()` (called without args) picks up the new CWD.
        done: false
  - title: 7. Documentation Update
    description: Update `README.md` and any other relevant documentation to describe
      the new workspace auto-creation feature, its configuration, and usage.
    files:
      - README.md
      - (Potentially other documentation files if they exist)
    include_imports: false
    include_importers: false
    steps:
      - prompt: >
          Update `README.md` (and any other relevant documentation files).


          1.  Add a new section explaining the "Autocreate Workspace" feature
          for `rmplan agent`.

          2.  Detail the new CLI option for `rmplan agent`: `--workspace-task-id
          <id>`.

          3.  Explain the new `workspaceCreation` section in the `rmplan.yml`
          configuration file:
              *   `method`: `'script'` or `'llmutils'`.
              *   `scriptPath`: (for `method: 'script'`). Explain that the script should output the absolute workspace path to stdout and can use env vars `LLMUTILS_TASK_ID` and `LLMUTILS_PLAN_FILE_PATH`.
              *   `repositoryUrl`: (for `method: 'llmutils'`). Explain inference from current repo.
              *   `cloneLocation`: (for `method: 'llmutils'`). Explain default and customization.
              *   `postCloneCommands`: (for `method: 'llmutils'`). Explain these commands run in the new workspace after clone and branch.
          4.  Describe the workspace tracking mechanism using
          `~/.llmutils/workspaces.json`.

          5.  Provide examples of how to configure and use this feature.
        done: false
