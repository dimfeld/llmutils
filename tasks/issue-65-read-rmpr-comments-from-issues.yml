goal: "Implement the feature: Read `rmpr` comments from GitHub issues and use
  them to provide arguments to `rmfilter` when using the `rmplan generate
  --issue` command."
details: >
  The `rmplan generate` command, when used with the `--issue` option, fetches
  content from a GitHub issue (title, body, comments) to form a plan. This
  project will extend this functionality to parse `rmpr` (ReadMePRompt)
  directives from this issue content.


  Similar to how `rmpr` directives in PR comments guide context generation for
  `pr-answer`, these directives in issues will be translated into arguments for
  the `rmfilter` command that `rmplan generate` uses. This allows users to
  specify `rmfilter` options (like including specific files, enabling import
  analysis, or passing arbitrary `rmfilter` flags) directly within the issue
  description or comments.


  The project involves:

  1.  Creating a generic function to convert `RmprOptions` (parsed from
  comments) into `rmfilter` arguments, suitable for contexts other than Pull
  Requests (i.e., ignoring PR-specific directives).

  2.  Modifying the GitHub issue processing logic to parse `rmpr` directives
  from the selected issue content (title, body, comments), combine these
  options, and return them along with the cleaned plan text.

  3.  Updating the `rmplan generate` command to take these parsed `RmprOptions`
  and use them to augment the arguments passed to `rmfilter`.


  This will provide more fine-grained control over the context generation
  process when starting a plan from a GitHub issue.
tasks:
  - title: 1. Implement generic `rmfilter` argument generation from `RmprOptions`
    description: >
      Create a new function `genericArgsFromRmprOptions` in
      `src/rmpr/comment_options.ts`. This function will take `RmprOptions` and
      convert them into an array of string arguments suitable for `rmfilter`.
      Unlike the existing `argsFromRmprOptions`, this new function will not
      require a Pull Request context. It should handle generic options like
      `withImports`, `withImporters`, `include` (for non-PR specific paths), and
      `rmfilter` (for arbitrary arguments). PR-specific options such as
      `includeAll` or `include pr:*` should be ignored, possibly with a warning.
    files:
      - src/rmpr/comment_options.ts
      - src/rmpr/comment_options.test.ts
      - src/logging.ts
    include_imports: false
    steps:
      - prompt: >
          Modify `src/rmpr/comment_options.ts`.


          1.  Import `warn` from `../logging.ts`.

          2.  Define a new exported function
          `genericArgsFromRmprOptions(options: RmprOptions): string[]`.

          3.  Implement the function logic:
              - Initialize an empty array `args: string[]`.
              - If `options.withImports` is true, add `'--with-imports'` to `args`.
              - If `options.withImporters` is true, add `'--with-importers'` to `args`.
              - If `options.include` is present (array of strings):
                  - Iterate through each `pathSpec` in `options.include`.
                  - If `pathSpec` starts with `'pr:'`, call `warn(\`Skipping PR-specific include directive in generic context: \${pathSpec}\`)` and do not add it to `args`.
                  - Otherwise, add `pathSpec` to `args`.
              - If `options.rmfilter` is present (array of strings), spread its contents into `args`.
              - If `options.includeAll` is true, call `warn('Skipping PR-specific "include-all" directive in generic context.')`.
              - Return `args`.

          Ensure the function is exported.
        done: true
      - prompt: >
          Modify `src/rmpr/comment_options.test.ts`.


          1.  Import `genericArgsFromRmprOptions` from './comment_options.ts'.

          2.  Add a new `describe` block for `genericArgsFromRmprOptions`.

          3.  Inside this block, add test cases to verify its functionality:
              - Test case for basic options: `withImports`, `withImporters`.
                - Input: `{ withImports: true, withImporters: true }`
                - Expected output: `['--with-imports', '--with-importers']`
              - Test case for `include` option with generic paths.
                - Input: `{ include: ['src/file1.ts', 'docs/guide.md'] }`
                - Expected output: `['src/file1.ts', 'docs/guide.md']`
              - Test case for `include` option with PR-specific paths (should be ignored).
                - Input: `{ include: ['pr:*.js', 'src/file2.ts'] }`
                - Expected output: `['src/file2.ts']` (and verify `warn` would be called, though direct spy/mock of `warn` is not required if it complicates the test; focus on the output args).
              - Test case for `rmfilter` option.
                - Input: `{ rmfilter: ['--grep', 'TODO', '--exclude', 'node_modules'] }`
                - Expected output: `['--grep', 'TODO', '--exclude', 'node_modules']`
              - Test case for `includeAll` option (should be ignored).
                - Input: `{ includeAll: true }`
                - Expected output: `[]` (and verify `warn` would be called).
              - Test case for a combination of generic and PR-specific options.
                - Input: `{ withImports: true, include: ['src/main.ts', 'pr:test.py'], rmfilter: ['--format', 'json'], includeAll: true }`
                - Expected output: `['--with-imports', 'src/main.ts', '--format', 'json']`
              - Test case for empty options.
                - Input: `{}`
                - Expected output: `[]`
              - Test case for options object with all fields undefined.
                - Input: `{ includeAll: undefined, withImports: undefined, withImporters: undefined, include: undefined, rmfilter: undefined }`
                - Expected output: `[]`

          Use `expect(result).toEqual(expected)` for comparisons.

          You don't need to mock `warn` from `logging.ts` for these tests;
          testing the returned arguments is sufficient.
        done: true
  - title: 2. Modify `getInstructionsFromGithubIssue` to parse and return
      `RmprOptions`
    description: >
      Update the `getInstructionsFromGithubIssue` function in
      `src/common/github/issues.ts`. This function fetches issue data and allows
      the user to select parts of it. It should now also parse `rmpr` directives
      from these selected text parts, combine any found `RmprOptions`, and
      return them along with the cleaned plan text. The plan text itself should
      be constructed from the parts of the issue content after `rmpr` directives
      have been removed.
    files:
      - src/common/github/issues.ts
      - src/rmpr/comment_options.ts
    include_imports: false
    steps:
      - prompt: >
          Modify `src/common/github/issues.ts`.


          1.  Import `parseRmprOptions`, `combineRmprOptions`, and the
          `RmprOptions` type from `../../rmpr/comment_options.ts`.

          2.  In the `getInstructionsFromGithubIssue` function:
              a.  After the `selected` array of strings is obtained from `selectIssueComments(data)`, initialize two variables:
                  - `let combinedRmprOptions: RmprOptions | null = null;`
                  - `const cleanedPlanParts: string[] = [];`
              b.  Iterate through the `selected` array (each item is a string `textPart`):
                  - For each `textPart`, call `const { options: currentOptions, cleanedComment } = parseRmprOptions(textPart);`.
                  - Add the `cleanedComment` to the `cleanedPlanParts` array.
                  - If `currentOptions` is not null:
                      - If `combinedRmprOptions` is null, assign `currentOptions` to `combinedRmprOptions`.
                      - Else, update `combinedRmprOptions` by calling `combinedRmprOptions = combineRmprOptions(combinedRmprOptions, currentOptions);`.
              c.  Replace the current line `const plan = selected.join('\n\n');` with:
                  `const plan = cleanedPlanParts.join('\n\n').trim();`
              d.  Modify the return statement to include `combinedRmprOptions`. The new return object should be:
                  `{ suggestedFileName, issue: data.issue, plan, combinedRmprOptions };`
          3.  Update the JSDoc or return type annotation for
          `getInstructionsFromGithubIssue` if necessary to reflect the change in
          the returned object structure (it now includes `combinedRmprOptions:
          RmprOptions | null`).
  - title: 3. Integrate `rmpr` options from issues into `rmplan generate` command
    description: >
      Modify the `rmplan generate` command in `src/rmplan/rmplan.ts`. When
      processing an issue (`--issue` flag), it should now use the
      `combinedRmprOptions` returned by `getInstructionsFromGithubIssue`. These
      options will be converted into `rmfilter` arguments using the
      `genericArgsFromRmprOptions` function (from Task 1) and appended to the
      arguments passed to the `rmfilter` subprocess.
    files:
      - src/rmplan/rmplan.ts
      - src/rmpr/comment_options.ts
      - src/common/github/issues.ts
      - src/logging.ts
    include_imports: true
    steps:
      - prompt: >
          Modify `src/rmplan/rmplan.ts`.


          1.  Import `genericArgsFromRmprOptions` from
          `../rmpr/comment_options.ts`.
              (Note: `log` is already imported from `../logging.ts`).

          2.  In the `action` for the `generate` command:
              a.  Locate the section where `options.issue` is handled.
              b.  The call `await getInstructionsFromGithubIssue(options.issue)` will now return an object like `{ suggestedFileName, issue, plan, combinedRmprOptions }`. Update the destructuring or variable assignment to capture `combinedRmprOptions`. For example:
                  `let issueResult = await getInstructionsFromGithubIssue(options.issue);`
                  `planText = issueResult.plan;`
                  `const combinedRmprOptions = issueResult.combinedRmprOptions;`
                  (And correspondingly for `suggestedFileName` and `planFile` logic if `issueResult.suggestedFileName` is used).
              c.  After obtaining `combinedRmprOptions` and before constructing `rmfilterFullArgs`:
                  - Initialize `let issueRmfilterOptions: string[] = [];`.
                  - If `combinedRmprOptions` is not null:
                      - `issueRmfilterOptions = genericArgsFromRmprOptions(combinedRmprOptions);`
                      - If `issueRmfilterOptions.length > 0 && !options.quiet` (check if `options.quiet` exists on `generate`'s `options` object, it does):
                          `log(chalk.blue('Applying rmpr options from issue:'), issueRmfilterOptions.join(' '));` (Ensure `chalk` is imported if not already).
              d.  The variable `rmfilterArgs` currently holds arguments passed by the user on the CLI after ` -- `. Rename this to `userCliRmfilterArgs` for clarity if you wish, or keep it as `rmfilterArgs`.
                  Let `userCliRmfilterArgs = doubleDashIdx !== -1 ? process.argv.slice(doubleDashIdx + 1) : [];`
              e.  Create a new array for all `rmfilter` options that come before file paths:
                  `const allRmfilterOptions = [...userCliRmfilterArgs, ...issueRmfilterOptions];`
              f.  Update the `rmfilterFullArgs` construction to use `allRmfilterOptions` instead of just `rmfilterArgs` (or `userCliRmfilterArgs`):
                  `const rmfilterFullArgs = ['rmfilter', ...allRmfilterOptions, '--', ...additionalFiles, '--bare', '--copy', '--instructions', \`@\${tmpPromptPath}\`];`

          Ensure `chalk` is imported at the top if it's used for logging:
          `import chalk from 'chalk';`.
