---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Persist Approval Rules
goal: To save the "Always Allow" rules to a configuration file and load them on
  startup, making them persistent across multiple sessions.
id: 67
uuid: 17d4048b-8d5b-4a1c-984b-a01222586f18
status: done
priority: medium
dependencies:
  - 66
parent: 63
references:
  "63": e2f78710-fe6f-4044-98d1-dbd5c5b31755
  "66": e682b96c-4701-43f0-852a-d6350cd3ab59
planGeneratedAt: 2025-06-13T06:34:02.120Z
promptsGeneratedAt: 2025-06-13T07:27:45.666Z
createdAt: 2025-06-11T08:25:17.665Z
updatedAt: 2025-10-27T08:39:04.302Z
project:
  title: Enhance Permissions MCP with an "Always Allow" Option and Bash Prefix
    Matching
  goal: To update the interactive permissions MCP, replacing the simple
    confirmation prompt with a more flexible system that allows users to
    permanently approve certain tool invocations, including support for
    fine-grained, prefix-based approvals for Bash commands.
  details: >-
    The current permission system requires users to manually approve or deny
    every tool invocation within a session, which can be repetitive. This
    project will enhance the user experience by introducing an "Always Allow"
    option.


    The key changes are:

    1.  Replacing the `confirm` (Yes/No) prompt with a `select` prompt offering
    "Allow", "Disallow", or "Always Allow".

    2.  If "Always Allow" is chosen, the system will remember this choice for
    the specific tool.

    3.  For `Bash` tools, selecting "Always Allow" will trigger a special
    interactive prompt where the user can define a safe command prefix (e.g.,
    `git status` or `npm run`) that will be automatically approved in the
    future.

    4.  These "Always Allow" rules will be persisted to the Claude Code local
    configuration file, so they are remembered across sessions.


    This feature will be implemented primarily within the `ClaudeCodeExecutor`
    in `src/rmplan/executors/claude_code.ts`, which handles the permission
    prompting logic.
tasks:
  - title: Save Permission Rules on Update
    done: true
    description: Implement logic to write a new "Always Allow" rule to the Claude
      Code local settings file, `.claude/settings.local.json`, and update that
      file every time the "Always Allow" rule is selected. This involves
      creating helper methods to read the configuration on startup to populate
      the in-memory ruleset, and another to write back to the file whenever a
      new rule is permanently added by the user. The file I/O should be robust,
      handling cases where the file or directory doesn't exist and preserving
      other settings within the JSON file.
  - title: Document the New Permission System
    done: true
    description: Update the project's README.md file to document the new permissions
      system. The documentation should explain the "Always Allow" feature,
      describe how the interactive Bash prefix selection works, and specify
      where the permissions configuration file is stored, including its format.
changedFiles:
  - README.md
  - src/rmplan/actions.ts
  - src/rmplan/executors/claude_code/prefix_prompt.ts
  - src/rmplan/executors/claude_code.ts
rmfilter:
  - src/rmplan/executors/claude_code.ts
  - src/rmplan/executors/claude_code/permissions_mcp.ts
---

The final phase makes the "Always Allow" feature robust by ensuring user preferences are not lost when the application restarts. This involves implementing file I/O to save and load the ruleset, defining a clear location for this configuration, and documenting the feature for end-users.

The file should be the existing Claude Code settings file located at '.claude/settings.local.json'. It looks something like this:

```
{
  "permissions": {
    "allow": [
      "Bash(rg:*)",
      "Bash(bun run:*)",
      "Bash(bun test:*)",
      "Bash(jj status:*)",
      "Bash(jj commit:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(bun pm ls:*)",
      "Bash(node:*)",
      "Bash(jj diff:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}
```

So we want to add new entries to the `allow` array, with the prefix and then `:*` at the end.
