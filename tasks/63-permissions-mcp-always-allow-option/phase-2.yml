---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Implement Custom Bash Command Prefix Selection
goal: To introduce a specialized, interactive prompt for defining allowed
  prefixes for `Bash` commands when a user chooses the "Always Allow" option for
  them.
id: 66
status: done
priority: high
dependencies:
  - 65
parent: 63
docs:
  - https://github.com/SBoudrias/Inquirer.js/blob/main/packages/core/README.md
planGeneratedAt: 2025-06-13T06:34:02.120Z
promptsGeneratedAt: 2025-06-13T07:11:25.761Z
createdAt: 2025-06-11T08:25:17.665Z
updatedAt: 2025-06-13T07:16:52.575Z
project:
  title: Enhance Permissions MCP with an "Always Allow" Option and Bash Prefix
    Matching
  goal: To update the interactive permissions MCP, replacing the simple
    confirmation prompt with a more flexible system that allows users to
    permanently approve certain tool invocations, including support for
    fine-grained, prefix-based approvals for Bash commands.
  details: >-
    The current permission system requires users to manually approve or deny
    every tool invocation within a session, which can be repetitive. This
    project will enhance the user experience by introducing an "Always Allow"
    option.


    The key changes are:

    1.  Replacing the `confirm` (Yes/No) prompt with a `select` prompt offering
    "Allow", "Disallow", or "Always Allow".

    2.  If "Always Allow" is chosen, the system will remember this choice for
    the specific tool.

    3.  For `Bash` tools, selecting "Always Allow" will trigger a special
    interactive prompt where the user can define a safe command prefix (e.g.,
    `git status` or `npm run`) that will be automatically approved in the
    future.

    4.  These "Always Allow" rules will be persisted to a configuration file, so
    they are remembered across sessions.


    This feature will be implemented primarily within the `ClaudeCodeExecutor`
    in `src/rmplan/executors/claude_code.ts`, which handles the permission
    prompting logic.
tasks:
  - title: Create a Custom Interactive Prompt for Prefix Selection
    description: Using the `@inquirer/core` library, develop a new custom prompt
      component. This component will display the `Bash` command and allow the
      user to select a prefix by moving a cursor word-by-word with the left and
      right arrow keys. It will also support a keybind ('a') to select the
      entire command string.
    files:
      - src/rmplan/executors/claude_code/prefix_prompt.ts
    steps:
      - prompt: >
          Create a new file at
          `src/rmplan/executors/claude_code/prefix_prompt.ts` to house our
          custom interactive prompt.
        done: true
      - prompt: |
          Using the `createPrompt` function from `@inquirer/core` and the documentation at https://github.com/SBoudrias/Inquirer.js/blob/main/packages/core/README.md, define a new prompt. This prompt will accept a `message` and the `command` string as configuration.
        done: true
      - prompt: >
          Implement the state management for the prompt. The state should track
          the command split into an array of words, and the index of the
          currently selected word, which determines the prefix.
        done: true
      - prompt: >
          Implement the keypress handling logic. Use the `useKeypress` hook from
          `@inquirer/core`. Handle the left and right arrow keys to decrease or
          increase the selected word index. Handle the 'a' key to select all
          words in the command. Handle the 'enter' key to submit the current
          prefix.
        done: true
      - prompt: >
          Implement the rendering logic for the prompt. It should display the
          command string with the currently selected prefix part highlighted.
          Also, display helpful instructions for the user, explaining the
          keybindings (arrows for words, 'a' for all, enter to confirm). The
          final function should be exported so it can be used in
          `claude_code.ts`.
        done: true
  - title: Enhance Storage and Integrate Bash Prefix Prompt
    description: Modify the in-memory storage structure to accommodate the new
      `Bash` prefix rules and integrate the new custom prompt. This will require
      changing from a simple `Set` of tool names to a more complex `Map` that
      can store a list of approved prefixes for the `Bash` tool alongside other
      approved tool names.
    files:
      - src/rmplan/executors/claude_code.ts
    steps:
      - prompt: >
          In `src/rmplan/executors/claude_code.ts`, change the
          `alwaysAllowedTools` class property from `new Set<string>()` to `new
          Map<string, true | string[]>()`. This will allow storing either a
          boolean for general tools or an array of string prefixes specifically
          for the `Bash` tool.
        done: true
      - prompt: >
          Import the new custom prefix prompt you created in the previous task
          into `claude_code.ts`.
        done: true
      - prompt: >
          In the `createPermissionSocketServer` method, locate the logic where
          `userChoice === 'always_allow'`. Add a condition to check if the
          `tool_name` is 'Bash'.
        done: true
      - prompt: >
          If the tool is 'Bash', call your new prefix prompt, passing the
          `input.command` to it. When the prompt resolves with a selected
          prefix, add this prefix to the array of allowed prefixes for 'Bash' in
          the `alwaysAllowedTools` map. If an array for 'Bash' doesn't exist
          yet, create it.
        done: true
      - prompt: >
          Update the logic for non-Bash tools. When "Always Allow" is chosen,
          the behavior should be to set `this.alwaysAllowedTools.set(tool_name,
          true)`.
        done: true
  - title: Implement Prefix-Based Approval Logic for Bash Tools
    description: Update the pre-prompt approval check. For incoming `Bash` tool
      requests, the logic must now compare the command's input against the list
      of stored, approved prefixes to determine if it can be automatically
      approved.
    files:
      - src/rmplan/executors/claude_code.ts
    steps:
      - prompt: >
          In `createPermissionSocketServer`, navigate to the beginning of the
          `socket.on('data', ...)` handler where the automatic approval check
          occurs.
        done: true
      - prompt: >
          Modify the existing check `this.alwaysAllowedTools.has(tool_name)` to
          work with the new `Map` structure. First, check if
          `this.alwaysAllowedTools.get(tool_name)` is `true`. This handles
          non-Bash tools that have been fully approved.
        done: true
      - prompt: >
          Add a new block of logic specifically for when `tool_name === 'Bash'`.
          In this block, retrieve the array of approved prefixes from
          `this.alwaysAllowedTools.get('Bash')`.
        done: true
      - prompt: >
          If an array of prefixes exists for the `Bash` tool, iterate through
          it. For each prefix, check if the incoming `input.command` string
          starts with that prefix. If a match is found, automatically approve
          the request and send the `permission_response` without prompting the
          user.
        done: true
changedFiles:
  - src/rmplan/actions.ts
  - src/rmplan/executors/claude_code/prefix_prompt.ts
  - src/rmplan/executors/claude_code.ts
rmfilter:
  - src/rmplan/executors/claude_code.ts
  - src/rmplan/executors/claude_code/permissions_mcp.ts
---

This phase builds on the "Always Allow" feature by adding the required special handling for `Bash` tools. When a user decides to always allow a `Bash` command, instead of approving the entire tool wholesale, they will be presented with a new custom prompt. This prompt will allow them to interactively select a prefix of the command to approve, providing more granular and safer control.
