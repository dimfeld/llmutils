---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Implement Core "Always Allow" Functionality
goal: To replace the binary yes/no prompt with a multi-choice prompt that
  includes an "Always Allow" option and to handle the basic in-memory approval
  logic for the current session.
id: 65
uuid: fc5129f7-4745-4ce0-9497-5dbc9132f5d2
status: done
priority: high
dependencies: []
parent: 63
planGeneratedAt: 2025-06-13T06:34:02.120Z
promptsGeneratedAt: 2025-06-13T06:38:48.325Z
createdAt: 2025-06-11T08:25:17.665Z
updatedAt: 2025-10-27T08:39:04.307Z
project:
  title: Enhance Permissions MCP with an "Always Allow" Option and Bash Prefix
    Matching
  goal: To update the interactive permissions MCP, replacing the simple
    confirmation prompt with a more flexible system that allows users to
    permanently approve certain tool invocations, including support for
    fine-grained, prefix-based approvals for Bash commands.
  details: >-
    The current permission system requires users to manually approve or deny
    every tool invocation within a session, which can be repetitive. This
    project will enhance the user experience by introducing an "Always Allow"
    option.


    The key changes are:

    1.  Replacing the `confirm` (Yes/No) prompt with a `select` prompt offering
    "Allow", "Disallow", or "Always Allow".

    2.  If "Always Allow" is chosen, the system will remember this choice for
    the specific tool.

    3.  For `Bash` tools, selecting "Always Allow" will trigger a special
    interactive prompt where the user can define a safe command prefix (e.g.,
    `git status` or `npm run`) that will be automatically approved in the
    future.

    4.  These "Always Allow" rules will be persisted to a configuration file, so
    they are remembered across sessions.


    This feature will be implemented primarily within the `ClaudeCodeExecutor`
    in `src/rmplan/executors/claude_code.ts`, which handles the permission
    prompting logic.
tasks:
  - title: Upgrade Permission Prompt to a Select Input
    done: true
    description: 'Convert the existing boolean `confirm` prompt into a `select`
      prompt. The new prompt will provide the user with three choices: "Allow"
      (for one-time execution), "Disallow" (for one-time denial), and "Always
      Allow" (to approve all future requests for this tool).'
  - title: Implement In-Memory Storage for "Always Allow" Rules
    done: true
    description: Create an in-memory data structure, such as a `Set` or `Map`,
      within the `ClaudeCodeExecutor` class. This structure will hold the names
      of tools that the user has marked as "Always Allow" during the current
      application session.
  - title: Bypass Prompt for Pre-Approved Tools
    done: true
    description: Modify the logic in `createPermissionSocketServer` to check the
      in-memory store before displaying the permission prompt. If the tool
      requesting permission is already in the "Always Allow" set, the request
      should be approved automatically without any user interaction.
  - title: Update State When "Always Allow" is Selected
    done: true
    description: Enhance the prompt's handling logic so that when a user selects the
      "Always Allow" option, the corresponding `tool_name` is added to the
      in-memory data structure for future reference in the session.
changedFiles:
  - src/rmplan/executors/claude_code.ts
rmfilter:
  - src/rmplan/executors/claude_code.ts
  - src/rmplan/executors/claude_code/permissions_mcp.ts
---

This initial phase focuses on establishing the core workflow. We will replace the existing `@inquirer/prompts` `confirm` call with a `select` call. We will then implement the logic to store "Always Allow" decisions in memory and bypass the prompt for tools that have been pre-approved within the active session. The special handling for Bash commands will be deferred to a later phase.
