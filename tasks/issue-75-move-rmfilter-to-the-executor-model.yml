# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Refactor the `rmfilter` command to replace its current `--run` option with
  a more flexible `--executor` option, aligning its execution model with
  `rmplan`. This will allow users to specify different executors to process the
  generated prompt.
details: >-
  The `rmfilter` command currently has a `--run` boolean option that, when
  enabled, executes the generated prompt using the `runPrompt` function. This
  project aims to replace this `--run` option with an `--executor
  <executor_name>` string option.


  **Behavioral Changes:**

  1. The `--run` option will be removed from `rmfilter`.

  2. A new option, `--executor <executor_name>`, will be added. This option is
  optional.

  3. **If `--executor` is provided:**
      * `rmfilter` will generate the prompt content as it currently does.
      * It will then use the `buildExecutorAndLog` function (from the `rmplan` executor system) to instantiate the specified executor.
      * The `execute` method of the instantiated executor will be called with the generated prompt content.
      * The `globalValues.model` from `rmfilter` will be passed to the executor via `ExecutorCommonOptions` and used to populate a minimal `RmplanConfig`.
  4. **If `--executor` is NOT provided:**
      * `rmfilter` will behave as it currently does when `options.run` is `false`. That is, it will generate the prompt, write it to the output file, copy it to the clipboard if requested (`-c` or `copy: true` in config), and log information about the output, but it will *not* automatically execute the prompt.

  This change involves modifying the CLI option parsing in
  `src/rmfilter/config.ts` and the main execution logic in
  `src/rmfilter/rmfilter.ts` to integrate with the executor system defined in
  `src/rmplan/executors/`.
id: 18
status: done
tasks:
  - title: 1. Update CLI Options and Configuration
    description: Modify the command-line argument parsing and configuration handling
      in `rmfilter` to remove the `--run` option and introduce the new
      `--executor` option. This includes updating the help text.
    files:
      - src/rmfilter/config.ts
      - src/rmfilter/rmfilter.ts
    steps:
      - prompt: >
          Modify `src/rmfilter/config.ts`.


          1.  In the `globalOptions` object within the `getCurrentConfig`
          function:
              a.  Remove the `run: { type: 'boolean' },` line (and its short option if it has one).
              b.  Add a new option for the executor: `executor: { type: 'string', short: 'x' },` (you can choose a different short option if 'x' is taken or unsuitable).
          2.  Ensure that `ConfigSchema` does not contain a `run` field. It
          currently doesn't, so no change is needed there, but verify.
        done: true
      - prompt: >
          Modify `src/rmfilter/config.ts`.


          In the `getCurrentConfig` function, update the help message string
          (the one logged when `globalValues.help` is true).

          1.  Remove the line describing the `--run` option.

          2.  Add a line describing the new `--executor <name>` option. For
          example:
              `  -x, --executor <name>   Execute the prompt using the specified executor (e.g., direct-call, copy-paste)`
          3.  Adjust formatting as needed to maintain consistency.
        done: true
  - title: 2. Integrate Executor Logic into `rmfilter`
    description: Update `src/rmfilter/rmfilter.ts` to use the new `--executor`
      option. This involves removing the old `--run` logic and adding code to
      instantiate and call the specified executor if the `--executor` option is
      provided.
    files:
      - src/rmfilter/rmfilter.ts
      - src/rmplan/executors/index.ts
      - src/rmplan/executors/types.ts
      - src/rmplan/configSchema.ts
      - src/common/run_and_apply.ts
    steps:
      - prompt: >
          Modify `src/rmfilter/rmfilter.ts`.


          1.  Add the following imports at the top of the file:
              ```typescript
              import { buildExecutorAndLog } from '../../rmplan/executors'; // Adjust path if necessary
              import type { RmplanConfig } from '../../rmplan/configSchema'; // Adjust path if necessary
              import type { ExecutorCommonOptions } from '../../rmplan/executors/types'; // Adjust path if necessary
              ```
          2.  The `runPrompt` import from `../common/run_and_apply.ts` will no
          longer be needed by `fullRmfilterRun` directly. It can be removed if
          no other function in this file uses it. (Review its usage; it's
          currently only used in the `--run` block).
        done: true
      - prompt: >
          Modify `src/rmfilter/rmfilter.ts`.


          In the `fullRmfilterRun` function:

          1.  Locate and delete the entire `if (globalValues.run) { ... }`
          block. This block is typically found near the end of the function,
          after copying output to the clipboard.
        done: true
      - prompt: >
          Modify `src/rmfilter/rmfilter.ts`.


          In the `fullRmfilterRun` function, after the block that handles
          `globalValues.copy` (i.e., after `await
          clipboard.write(finalOutput);`), and before the final `return
          finalOutput;` statement, add the new logic to handle the `--executor`
          option:


          ```typescript

          // ... (previous code for writing output, logging, copying to
          clipboard)


          if (globalValues.executor) {
            if (!globalValues.quiet) {
              log(`\n## EXECUTOR: ${globalValues.executor}`);
            }

            const executorCommonOptions: ExecutorCommonOptions = {
              baseDir: baseDir, // baseDir is calculated earlier in fullRmfilterRun
              model: globalValues.model, // Pass the model specified to rmfilter
            };

            // Construct a minimal RmplanConfig.
            // Executors may use this, for example, to get model preferences.
            const rmplanConfig: RmplanConfig = {
              models: {
                execution: globalValues.model, // If undefined, executors should use their own defaults
              },
              // Other RmplanConfig fields can be left undefined or set to defaults
              // if they were strictly required by all executors.
              // For now, focusing on 'models.execution'.
            };

            try {
              const executor = buildExecutorAndLog(
                globalValues.executor,
                executorCommonOptions,
                rmplanConfig
              );

              // The 'finalOutput' variable (string containing the prompt) is generated earlier in fullRmfilterRun.
              await executor.execute(finalOutput);

              if (!globalValues.quiet) {
                log(`Executor ${globalValues.executor} finished.`);
              }
            } catch (e: any) {
              error(`Error during executor "${globalValues.executor}" execution: ${e.message}`);
              if (globalValues.debug || debug) { // 'debug' might be the global from utils
                console.error(e.stack);
              }
              // Decide if process should exit. buildExecutorAndLog might exit on its own if executor not found.
              // If executor.execute throws, we might want to exit(1) here too.
              process.exit(1);
            }
          }


          // return finalOutput; // This is the existing last line

          ```


          Ensure that `finalOutput`, `baseDir`, `globalValues`, `log`, `error`,
          and `debug` are all correctly in scope.

          The `debug` variable might be the one imported from `./utils.ts` or
          `../logging.ts`, ensure you use the correct one that reflects the
          `--debug` flag state. The `debug` variable from `import { debug } from
          '../rmfilter/utils.ts';` should be correct.
        done: true
      - prompt: >
          Review `src/rmfilter/rmfilter.ts` in the `fullRmfilterRun` function.


          Confirm the following:

          1. The old `if (globalValues.run)` block and its call to `runPrompt`
          are completely removed.

          2. The new `if (globalValues.executor)` block is correctly placed,
          typically after file writing and clipboard operations, but before the
          function returns `finalOutput`.

          3. The logic for generating `finalOutput`, writing to `outputFilePath`
          (if `!options?.skipWrite`), logging token counts and output paths (if
          `!globalValues.quiet`), and copying to clipboard (if
          `globalValues.copy`) is still intact and executes *regardless* of
          whether an executor is specified. The executor logic is an
          *additional* step if `--executor` is provided.


          No code changes are expected from this prompt, only verification. If
          discrepancies are found, point them out.
        done: true
