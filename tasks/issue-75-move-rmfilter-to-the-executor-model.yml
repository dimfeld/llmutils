---
# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
goal: Refactor the `rmfilter` command to replace its current `--run` option with
  a more flexible `--executor` option, aligning its execution model with
  `rmplan`. This will allow users to specify different executors to process the
  generated prompt.
id: 18
uuid: c11700f1-63d5-4c08-a959-24928378fdf7
status: done
updatedAt: 2025-10-27T08:39:04.264Z
tasks:
  - title: 1. Update CLI Options and Configuration
    done: true
    description: Modify the command-line argument parsing and configuration handling
      in `rmfilter` to remove the `--run` option and introduce the new
      `--executor` option. This includes updating the help text.
  - title: 2. Integrate Executor Logic into `rmfilter`
    done: true
    description: Update `src/rmfilter/rmfilter.ts` to use the new `--executor`
      option. This involves removing the old `--run` logic and adding code to
      instantiate and call the specified executor if the `--executor` option is
      provided.
---

The `rmfilter` command currently has a `--run` boolean option that, when enabled, executes the generated prompt using the `runPrompt` function. This project aims to replace this `--run` option with an `--executor <executor_name>` string option.

**Behavioral Changes:**
1. The `--run` option will be removed from `rmfilter`.
2. A new option, `--executor <executor_name>`, will be added. This option is optional.
3. **If `--executor` is provided:**
    * `rmfilter` will generate the prompt content as it currently does.
    * It will then use the `buildExecutorAndLog` function (from the `rmplan` executor system) to instantiate the specified executor.
    * The `execute` method of the instantiated executor will be called with the generated prompt content.
    * The `globalValues.model` from `rmfilter` will be passed to the executor via `ExecutorCommonOptions` and used to populate a minimal `RmplanConfig`.
4. **If `--executor` is NOT provided:**
    * `rmfilter` will behave as it currently does when `options.run` is `false`. That is, it will generate the prompt, write it to the output file, copy it to the clipboard if requested (`-c` or `copy: true` in config), and log information about the output, but it will *not* automatically execute the prompt.

This change involves modifying the CLI option parsing in `src/rmfilter/config.ts` and the main execution logic in `src/rmfilter/rmfilter.ts` to integrate with the executor system defined in `src/rmplan/executors/`.
