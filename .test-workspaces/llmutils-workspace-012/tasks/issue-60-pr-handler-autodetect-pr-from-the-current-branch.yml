goal: Implement a feature for `answer-pr` to automatically detect the relevant
  Pull Request (PR) from the current Git or Jujutsu branch if no PR identifier
  is provided. Additionally, warn the user if an explicitly provided PR number
  doesn't match the current branch.
details: >
  The `answer-pr` command currently requires a PR identifier (URL or number).
  This project will enhance it to:

  1.  Determine the current local branch name, supporting both Git and Jujutsu
  (jj) SCMs.

  2.  Fetch a list of open PRs from GitHub for the current repository.

  3.  If `answer-pr` is invoked without a PR identifier:
      *   Attempt to find an open PR whose head branch name matches the current local SCM branch name.
      *   If a unique match is found, use that PR.
      *   If multiple matches are found, prompt the user to select one.
      *   If no match is found, prompt the user to select from all open PRs or enter an identifier manually.
  4.  If `answer-pr` is invoked *with* a PR identifier:
      *   After fetching the PR details, compare the PR's head branch name with the current local SCM branch name.
      *   If they do not match, warn the user and ask for confirmation before proceeding.

  This will improve the usability of `answer-pr` by reducing the need to
  manually look up PR numbers when working on a feature branch corresponding to
  a PR.
tasks:
  - title: 1. Implement SCM Current Branch Detection Utilities
    description: Create utility functions to get the current branch name from Git
      and Jujutsu. Then, create a combined function that tries both.
    files:
      - src/rmpr/git_utils.ts
      - src/rmpr/git_utils.test.ts
      - src/rmfilter/utils.ts
    include_imports: false
    include_importers: false
    steps:
      - prompt: >
          In `src/rmpr/git_utils.ts`, add a new asynchronous function
          `getCurrentGitBranch(): Promise<string | null>`.

          This function should:

          1.  Execute the command `git branch --show-current`. You can use
          `logSpawn` from `src/rmfilter/utils.ts` for this. Ensure `logSpawn` is
          called with `stdout: 'pipe'` and `stderr: 'pipe'`.

          2.  If the command executes successfully (exit code 0) and outputs a
          branch name, trim the output and return the branch name.

          3.  If the command fails, or if it succeeds but outputs nothing (e.g.,
          detached HEAD state), return `null`.

          4.  Handle potential errors during command execution gracefully.


          In `src/rmpr/git_utils.test.ts`, add tests for `getCurrentGitBranch`:

          1.  Setup a temporary Git repository using `fs.mkdtemp` and
          `os.tmpdir`. Initialize it, configure user, and commit a file.

          2.  Test Case 1: Create a branch (e.g., `feature-branch`) and check it
          out. Verify `getCurrentGitBranch` returns `feature-branch`.

          3.  Test Case 2: Checkout a commit hash directly to simulate a
          detached HEAD state. Verify `getCurrentGitBranch` returns `null`.

          4.  Test Case 3: (Optional, if easy to simulate) Run outside a Git
          repository context (e.g., by changing `process.cwd()` temporarily if
          `getGitRoot` allows falling back or if `git` command simply fails).
          Verify `getCurrentGitBranch` returns `null`.

          Ensure to clean up the temporary directory in an `afterAll` or
          `finally` block.

          Remember to `import { $ } from 'bun';` for running shell commands in
          tests if needed.
        done: true
      - prompt: >
          In `src/rmpr/git_utils.ts`, add a new asynchronous function
          `getCurrentJujutsuBranch(): Promise<string | null>`.

          This function should:

          1.  Execute `jj branch list --at @ --quiet`. This command lists
          branches (one per line) pointing to the current revision. Use
          `logSpawn`.

          2.  If the command fails or returns no output, return `null`.

          3.  Parse the output:
              *   Split the output by newline to get a list of branch names.
              *   Filter out any empty strings.
          4.  If no branch names are found, return `null`.

          5.  If one branch name is found, return it.

          6.  If multiple branch names are found:
              *   Filter out branches named "main" or "master".
              *   If only one branch remains after filtering, return it.
              *   If multiple branches still remain, return the first one from the filtered list (or the original list if filtering resulted in zero).
              *   If no branches remain after filtering (e.g., only "main" and "master" were present), return the first branch from the original list.

          In `src/rmpr/git_utils.test.ts`, add tests for
          `getCurrentJujutsuBranch`.

          You will need to mock `logSpawn` for these tests as setting up a `jj`
          environment is complex.

          1.  Mock `logSpawn` to simulate `jj branch list --at @ --quiet`
          output:
              *   Test Case 1: Outputting a single branch name (e.g., "my-jj-feature"). Verify it returns "my-jj-feature".
              *   Test Case 2: Outputting multiple branch names (e.g., "my-jj-feature\nother-branch"). Verify it returns "my-jj-feature" (or "other-branch" based on your heuristic, be consistent).
              *   Test Case 3: Outputting "main\nmy-jj-feature". Verify it returns "my-jj-feature".
              *   Test Case 4: Outputting "main\nmaster". Verify it returns "main" (or "master").
              *   Test Case 5: Empty output. Verify it returns `null`.
              *   Test Case 6: Command failure (mock `exited` to be non-zero). Verify it returns `null`.
        done: true
      - prompt: >
          In `src/rmpr/git_utils.ts`, add a new asynchronous function
          `getCurrentBranchName(): Promise<string | null>`.

          This function should:

          1.  First, call `await getCurrentGitBranch()`.

          2.  If it returns a non-null branch name, return that name.

          3.  If `getCurrentGitBranch()` returns `null` (e.g., in detached HEAD
          or not a Git repo), then call `await getCurrentJujutsuBranch()`.

          4.  Return the result of `getCurrentJujutsuBranch()` (which could be a
          branch name or `null`).


          In `src/rmpr/git_utils.test.ts`, add tests for `getCurrentBranchName`:

          1.  Mock `getCurrentGitBranch` and `getCurrentJujutsuBranch`.

          2.  Test Case 1: `getCurrentGitBranch` returns "git-branch". Verify
          `getCurrentBranchName` returns "git-branch" and
          `getCurrentJujutsuBranch` is not called.

          3.  Test Case 2: `getCurrentGitBranch` returns `null`,
          `getCurrentJujutsuBranch` returns "jj-branch". Verify
          `getCurrentBranchName` returns "jj-branch".

          4.  Test Case 3: Both return `null`. Verify `getCurrentBranchName`
          returns `null`.
        done: true
  - title: 2. Implement Fetching Open Pull Requests
    description: Add a function to fetch all open pull requests for a given repository.
    files:
      - src/common/github/pull_requests.ts
      - src/common/github/pull_requests.test.ts
      - src/common/github/identifiers.ts
      - src/logging.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          In `src/common/github/pull_requests.ts`:

          1.  Define a new interface `OpenPullRequest` with the following
          properties:
              *   `number: number`
              *   `title: string`
              *   `headRefName: string`
              *   `html_url: string` (for display/linking)
              *   `user: { login: string } | null` (GitHub user who opened the PR)
          2.  Add a new asynchronous function `fetchOpenPullRequests(owner:
          string, repo: string): Promise<OpenPullRequest[]>`.

          3.  This function should:
              *   Initialize `Octokit` using `process.env.GITHUB_TOKEN`.
              *   Use `octokit.request('GET /repos/{owner}/{repo}/pulls', { owner, repo, state: 'open', per_page: 100 })` to fetch open PRs. Handle pagination if you want to be thorough, but fetching up to 100 open PRs is likely sufficient for this tool's typical use case. For now, a single page of 100 is fine.
              *   Map the response data to an array of `OpenPullRequest` objects. The relevant fields from the GitHub API response are typically:
                  *   `number`
                  *   `title`
                  *   `head.ref` (for `headRefName`)
                  *   `html_url`
                  *   `user` (object with `login`)
              *   Return the array of `OpenPullRequest` objects.
              *   If an error occurs (e.g., network issue, auth failure, repo not found), log an error message using the `error` function from `src/logging.ts` and throw the error or return an empty array. For now, re-throwing is fine.
              *   Ensure `GITHUB_TOKEN` is checked and an informative error is thrown if it's not set.

          In `src/common/github/pull_requests.test.ts`:

          1.  Add tests for `fetchOpenPullRequests`.

          2.  Mock `Octokit` or `octokit.request`.
              *   Test Case 1: Successful API call returns a list of PRs. Verify the data is correctly mapped to `OpenPullRequest[]`.
              *   Test Case 2: API returns an empty list. Verify an empty array is returned.
              *   Test Case 3: Mock an API error. Verify the function handles it (e.g., throws or returns empty array and logs error).
              *   Test Case 4: `GITHUB_TOKEN` is not set. Verify an error is thrown.
        done: true
  - title: 3. Modify `answer-pr` Command for Optional PR Identifier
    description: Update the `commander` definition for `answer-pr` to make the
      `prIdentifier` argument optional.
    files:
      - src/rmplan/rmplan.ts
    include_imports: false
    include_importers: false
    steps:
      - prompt: >
          In `src/rmplan/rmplan.ts`:

          1.  Locate the `answer-pr` command definition:
          `program.command('answer-pr <prIdentifier>')`.

          2.  Change it to make `prIdentifier` optional:
          `program.command('answer-pr [prIdentifier]')`.

          3.  The `prIdentifier` argument in the `.action(async (prIdentifier,
          options) => { ... })` handler will now be `string | undefined`. No
          other changes are needed in this file for this step; the handling of
          the potentially undefined `prIdentifier` will be done in
          `src/rmpr/main.ts`.
        done: true
  - title: 4. Implement PR Autodetection and Selection Logic
    description: >
      Modify `handleRmprCommand` in `src/rmpr/main.ts` to implement the PR
      autodetection and selection flow when no PR identifier is explicitly
      provided.
    files:
      - src/rmpr/main.ts
      - src/rmpr/git_utils.ts
      - src/common/github/pull_requests.ts
      - src/common/github/identifiers.ts
      - src/rmfilter/utils.ts
      - src/logging.ts
      - src/rmpr/main.test.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: |
          In `src/rmpr/main.ts`, within the `handleRmprCommand` function:
          1.  Modify the initial PR identifier handling. `prIdentifierArg` can now be `undefined`.
          2.  Declare a variable, e.g., `let resolvedPrIdentifier: { owner: string; repo: string; number: number; } | null = null;`.
          3.  If `prIdentifierArg` is provided:
              *   Try to parse it using `await parsePrOrIssueNumber(prIdentifierArg)`.
              *   If parsing is successful, assign the result to `resolvedPrIdentifier`.
          4.  If `resolvedPrIdentifier` is still `null` (meaning `prIdentifierArg` was not provided, or it was provided but didn't parse into a specific PR object, e.g. it's just a branch name or invalid):
              *   Log "PR identifier not provided or not specific, attempting to autodetect..."
              *   Call `await getCurrentBranchName()` from `src/rmpr/git_utils.ts`.
              *   If no current branch name is found, log an error ("Could not determine current branch.") and exit.
              *   Call `await getGitRepository()` from `src/rmfilter/utils.ts` to get the `owner/repo` string. Parse this into `owner` and `repo`. If it fails, error and exit.
              *   Call `await fetchOpenPullRequests(owner, repo)`.
              *   Filter the list of open PRs: find PRs where `pr.headRefName` is an exact match to the `currentBranchName`.
              *   **Scenario 1: One Match Found**
                  *   Log that a unique PR was found matching the current branch.
                  *   Construct the `resolvedPrIdentifier` object using the matched PR's number, and the owner/repo from `getGitRepository`.
              *   **Scenario 2: Multiple Matches Found**
                  *   Log that multiple PRs match the current branch.
                  *   Use `@inquirer/prompts` `select` to prompt the user to choose one of the matching PRs. Display PR titles and numbers.
                  *   If the user selects a PR, construct `resolvedPrIdentifier`. If not, exit.
              *   **Scenario 3: No Exact Match Found**
                  *   Log that no PR directly matches the current branch.
                  *   Use `@inquirer/prompts` `search` to allow the user to select from *all* open PRs (fetched earlier). The `search` prompt should allow searching by title or number. The choices for `search` should be an array of objects like `{ name: \`#\${pr.number}: \${pr.title} (\${pr.headRefName})\`, value: pr.number }`.
                  *   If the user selects a PR, construct `resolvedPrIdentifier` using the selected PR's number.
                  *   If the user doesn't select a PR (e.g., cancels the prompt), log an error ("No PR selected.") and exit.
          5.  After this block, if `resolvedPrIdentifier` is still `null`, log an error ("Could not identify a PR to process.") and exit.
          6.  Replace subsequent uses of `parsedIdentifier` with `resolvedPrIdentifier`. For example, `log(\`Processing PR: \${resolvedPrIdentifier.owner}/\${resolvedPrIdentifier.repo}#\${resolvedPrIdentifier.number}\`);` and when calling `fetchPullRequestAndComments`.

          Create a new test file `src/rmpr/main.test.ts` or add to an existing one if appropriate.
          Write integration tests for the autodetection logic:
          *   Mock `getCurrentBranchName`, `getGitRepository`, `fetchOpenPullRequests`, `parsePrOrIssueNumber`, and `@inquirer/prompts` functions (`select`, `search`).
          *   Test 1: `prIdentifierArg` is provided and valid -> autodetection is skipped, `resolvedPrIdentifier` is set.
          *   Test 2: `prIdentifierArg` is undefined, one PR matches current branch -> `resolvedPrIdentifier` is set to the matched PR, no prompt.
          *   Test 3: `prIdentifierArg` is undefined, multiple PRs match -> `select` prompt is called, user selection sets `resolvedPrIdentifier`.
          *   Test 4: `prIdentifierArg` is undefined, no PRs match -> `search` prompt is called, user selection sets `resolvedPrIdentifier`.
          *   Test 5: `prIdentifierArg` is undefined, no current branch -> error occurs.
          *   Test 6: `prIdentifierArg` is undefined, no PRs match, user cancels `search` prompt -> error occurs.
        done: true
  - title: 5. Implement Branch Mismatch Warning
    description: If a PR identifier was explicitly provided, warn the user if the
      current SCM branch does not match the PR's head branch.
    files:
      - src/rmpr/main.ts
      - src/rmpr/git_utils.ts
      - src/logging.ts
      - src/rmpr/main.test.ts
    include_imports: true
    include_importers: false
    steps:
      - prompt: >
          In `src/rmpr/main.ts`, within `handleRmprCommand`:

          1.  After `prData = await fetchPullRequestAndComments(...)` has
          successfully executed and you have `prData.pullRequest`.

          2.  Check if `prIdentifierArg` was provided by the user (i.e.,
          autodetection logic was *not* the primary path to determine
          `resolvedPrIdentifier`). A simple way to check this is if
          `prIdentifierArg` was not undefined AND `await
          parsePrOrIssueNumber(prIdentifierArg)` initially returned a non-null
          value. Store this as a boolean, e.g., `wasPrIdentifierExplicit`.

          3.  If `wasPrIdentifierExplicit` is true:
              *   Call `await getCurrentBranchName()`.
              *   Let `currentScmBranch = await getCurrentBranchName()`.
              *   Let `prHeadBranch = prData.pullRequest.headRefName`.
              *   If `currentScmBranch` is not null AND `currentScmBranch !== prHeadBranch`:
                  *   Log a warning using `warn()` from `src/logging.ts`: `Current local branch "${currentScmBranch}" does not match the PR's head branch "${prHeadBranch}".`
                  *   If `options.yes` is false, use `@inquirer/prompts` `confirm` to ask "Proceed with this PR anyway?". Default to `true`.
                  *   If the user does not confirm, log "User chose not to proceed due to branch mismatch." and exit the process.

          In `src/rmpr/main.test.ts`, add tests for the branch mismatch warning:

          *   Mock `getCurrentBranchName`, `fetchPullRequestAndComments`,
          `parsePrOrIssueNumber`, and `@inquirer/prompts confirm`.

          *   Test 1: Explicit PR ID, current branch matches PR head branch ->
          No warning, no prompt.

          *   Test 2: Explicit PR ID, current branch mismatches PR head branch,
          `options.yes` is true -> Warning logged, no prompt, proceeds.

          *   Test 3: Explicit PR ID, current branch mismatches PR head branch,
          `options.yes` is false -> Warning logged, `confirm` prompt shown.
              *   Sub-test 3a: User confirms -> Proceeds.
              *   Sub-test 3b: User denies -> Exits.
          *   Test 4: PR was autodetected (even if current branch somehow
          changed and now mismatches) -> No warning, no prompt. (Hint: check
          `wasPrIdentifierExplicit` logic).

          *   Test 5: Explicit PR ID, `getCurrentBranchName` returns `null` ->
          No warning, no prompt.
        done: true
